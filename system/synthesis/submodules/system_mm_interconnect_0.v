// system_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 17.0 595

`timescale 1 ps / 1 ps
module system_mm_interconnect_0 (
		input  wire        pll_0_outclk0_clk,                             //                           pll_0_outclk0.clk
		input  wire        pll_0_outclk2_clk,                             //                           pll_0_outclk2.clk
		input  wire        ao486_reset_sink_reset_bridge_in_reset_reset,  //  ao486_reset_sink_reset_bridge_in_reset.reset
		input  wire        sound_reset_sink_reset_bridge_in_reset_reset,  //  sound_reset_sink_reset_bridge_in_reset.reset
		input  wire        width_trans_reset_reset_bridge_in_reset_reset, // width_trans_reset_reset_bridge_in_reset.reset
		input  wire [15:0] ao486_avalon_io_address,                       //                         ao486_avalon_io.address
		output wire        ao486_avalon_io_waitrequest,                   //                                        .waitrequest
		input  wire [3:0]  ao486_avalon_io_byteenable,                    //                                        .byteenable
		input  wire        ao486_avalon_io_read,                          //                                        .read
		output wire [31:0] ao486_avalon_io_readdata,                      //                                        .readdata
		output wire        ao486_avalon_io_readdatavalid,                 //                                        .readdatavalid
		input  wire        ao486_avalon_io_write,                         //                                        .write
		input  wire [31:0] ao486_avalon_io_writedata,                     //                                        .writedata
		output wire [2:0]  floppy0_io_address,                            //                              floppy0_io.address
		output wire        floppy0_io_write,                              //                                        .write
		output wire        floppy0_io_read,                               //                                        .read
		input  wire [7:0]  floppy0_io_readdata,                           //                                        .readdata
		output wire [7:0]  floppy0_io_writedata,                          //                                        .writedata
		output wire [0:0]  hdd0_io_address,                               //                                 hdd0_io.address
		output wire        hdd0_io_write,                                 //                                        .write
		output wire        hdd0_io_read,                                  //                                        .read
		input  wire [31:0] hdd0_io_readdata,                              //                                        .readdata
		output wire [31:0] hdd0_io_writedata,                             //                                        .writedata
		output wire [3:0]  hdd0_io_byteenable,                            //                                        .byteenable
		output wire [0:0]  hdd1_io_address,                               //                                 hdd1_io.address
		output wire        hdd1_io_write,                                 //                                        .write
		output wire        hdd1_io_read,                                  //                                        .read
		input  wire [31:0] hdd1_io_readdata,                              //                                        .readdata
		output wire [31:0] hdd1_io_writedata,                             //                                        .writedata
		output wire [3:0]  hdd1_io_byteenable,                            //                                        .byteenable
		output wire [2:0]  hddext_0x370_io_address,                       //                         hddext_0x370_io.address
		output wire        hddext_0x370_io_write,                         //                                        .write
		output wire        hddext_0x370_io_read,                          //                                        .read
		input  wire [7:0]  hddext_0x370_io_readdata,                      //                                        .readdata
		output wire [7:0]  hddext_0x370_io_writedata,                     //                                        .writedata
		output wire [4:0]  pc_dma_master_address,                         //                           pc_dma_master.address
		output wire        pc_dma_master_write,                           //                                        .write
		output wire        pc_dma_master_read,                            //                                        .read
		input  wire [7:0]  pc_dma_master_readdata,                        //                                        .readdata
		output wire [7:0]  pc_dma_master_writedata,                       //                                        .writedata
		output wire [3:0]  pc_dma_page_address,                           //                             pc_dma_page.address
		output wire        pc_dma_page_write,                             //                                        .write
		output wire        pc_dma_page_read,                              //                                        .read
		input  wire [7:0]  pc_dma_page_readdata,                          //                                        .readdata
		output wire [7:0]  pc_dma_page_writedata,                         //                                        .writedata
		output wire [3:0]  pc_dma_slave_address,                          //                            pc_dma_slave.address
		output wire        pc_dma_slave_write,                            //                                        .write
		output wire        pc_dma_slave_read,                             //                                        .read
		input  wire [7:0]  pc_dma_slave_readdata,                         //                                        .readdata
		output wire [7:0]  pc_dma_slave_writedata,                        //                                        .writedata
		output wire [0:0]  pic_master_address,                            //                              pic_master.address
		output wire        pic_master_write,                              //                                        .write
		output wire        pic_master_read,                               //                                        .read
		input  wire [7:0]  pic_master_readdata,                           //                                        .readdata
		output wire [7:0]  pic_master_writedata,                          //                                        .writedata
		output wire [0:0]  pic_slave_address,                             //                               pic_slave.address
		output wire        pic_slave_write,                               //                                        .write
		output wire        pic_slave_read,                                //                                        .read
		input  wire [7:0]  pic_slave_readdata,                            //                                        .readdata
		output wire [7:0]  pic_slave_writedata,                           //                                        .writedata
		output wire [1:0]  pit_io_address,                                //                                  pit_io.address
		output wire        pit_io_write,                                  //                                        .write
		output wire        pit_io_read,                                   //                                        .read
		input  wire [7:0]  pit_io_readdata,                               //                                        .readdata
		output wire [7:0]  pit_io_writedata,                              //                                        .writedata
		output wire [2:0]  ps2_io_address,                                //                                  ps2_io.address
		output wire        ps2_io_write,                                  //                                        .write
		output wire        ps2_io_read,                                   //                                        .read
		input  wire [7:0]  ps2_io_readdata,                               //                                        .readdata
		output wire [7:0]  ps2_io_writedata,                              //                                        .writedata
		output wire [3:0]  ps2_sysctl_address,                            //                              ps2_sysctl.address
		output wire        ps2_sysctl_write,                              //                                        .write
		output wire        ps2_sysctl_read,                               //                                        .read
		input  wire [7:0]  ps2_sysctl_readdata,                           //                                        .readdata
		output wire [7:0]  ps2_sysctl_writedata,                          //                                        .writedata
		output wire [0:0]  rtc_io_address,                                //                                  rtc_io.address
		output wire        rtc_io_write,                                  //                                        .write
		output wire        rtc_io_read,                                   //                                        .read
		input  wire [7:0]  rtc_io_readdata,                               //                                        .readdata
		output wire [7:0]  rtc_io_writedata,                              //                                        .writedata
		output wire [1:0]  sound_fm_address,                              //                                sound_fm.address
		output wire        sound_fm_write,                                //                                        .write
		output wire        sound_fm_read,                                 //                                        .read
		input  wire [7:0]  sound_fm_readdata,                             //                                        .readdata
		output wire [7:0]  sound_fm_writedata,                            //                                        .writedata
		output wire [3:0]  sound_io_address,                              //                                sound_io.address
		output wire        sound_io_write,                                //                                        .write
		output wire        sound_io_read,                                 //                                        .read
		input  wire [7:0]  sound_io_readdata,                             //                                        .readdata
		output wire [7:0]  sound_io_writedata,                            //                                        .writedata
		output wire [2:0]  sound_mpu_address,                             //                               sound_mpu.address
		output wire        sound_mpu_write,                               //                                        .write
		output wire        sound_mpu_read,                                //                                        .read
		input  wire [7:0]  sound_mpu_readdata,                            //                                        .readdata
		output wire [7:0]  sound_mpu_writedata,                           //                                        .writedata
		output wire [3:0]  vga_io_b_address,                              //                                vga_io_b.address
		output wire        vga_io_b_write,                                //                                        .write
		output wire        vga_io_b_read,                                 //                                        .read
		input  wire [7:0]  vga_io_b_readdata,                             //                                        .readdata
		output wire [7:0]  vga_io_b_writedata,                            //                                        .writedata
		output wire [3:0]  vga_io_c_address,                              //                                vga_io_c.address
		output wire        vga_io_c_write,                                //                                        .write
		output wire        vga_io_c_read,                                 //                                        .read
		input  wire [7:0]  vga_io_c_readdata,                             //                                        .readdata
		output wire [7:0]  vga_io_c_writedata,                            //                                        .writedata
		output wire [3:0]  vga_io_d_address,                              //                                vga_io_d.address
		output wire        vga_io_d_write,                                //                                        .write
		output wire        vga_io_d_read,                                 //                                        .read
		input  wire [7:0]  vga_io_d_readdata,                             //                                        .readdata
		output wire [7:0]  vga_io_d_writedata,                            //                                        .writedata
		output wire [2:0]  width_trans_in_address,                        //                          width_trans_in.address
		output wire        width_trans_in_write,                          //                                        .write
		output wire        width_trans_in_read,                           //                                        .read
		input  wire [7:0]  width_trans_in_readdata,                       //                                        .readdata
		output wire [7:0]  width_trans_in_writedata                       //                                        .writedata
	);

	wire         ao486_avalon_io_translator_avalon_universal_master_0_waitrequest;   // ao486_avalon_io_agent:av_waitrequest -> ao486_avalon_io_translator:uav_waitrequest
	wire  [31:0] ao486_avalon_io_translator_avalon_universal_master_0_readdata;      // ao486_avalon_io_agent:av_readdata -> ao486_avalon_io_translator:uav_readdata
	wire         ao486_avalon_io_translator_avalon_universal_master_0_debugaccess;   // ao486_avalon_io_translator:uav_debugaccess -> ao486_avalon_io_agent:av_debugaccess
	wire  [15:0] ao486_avalon_io_translator_avalon_universal_master_0_address;       // ao486_avalon_io_translator:uav_address -> ao486_avalon_io_agent:av_address
	wire         ao486_avalon_io_translator_avalon_universal_master_0_read;          // ao486_avalon_io_translator:uav_read -> ao486_avalon_io_agent:av_read
	wire   [3:0] ao486_avalon_io_translator_avalon_universal_master_0_byteenable;    // ao486_avalon_io_translator:uav_byteenable -> ao486_avalon_io_agent:av_byteenable
	wire         ao486_avalon_io_translator_avalon_universal_master_0_readdatavalid; // ao486_avalon_io_agent:av_readdatavalid -> ao486_avalon_io_translator:uav_readdatavalid
	wire         ao486_avalon_io_translator_avalon_universal_master_0_lock;          // ao486_avalon_io_translator:uav_lock -> ao486_avalon_io_agent:av_lock
	wire         ao486_avalon_io_translator_avalon_universal_master_0_write;         // ao486_avalon_io_translator:uav_write -> ao486_avalon_io_agent:av_write
	wire  [31:0] ao486_avalon_io_translator_avalon_universal_master_0_writedata;     // ao486_avalon_io_translator:uav_writedata -> ao486_avalon_io_agent:av_writedata
	wire   [2:0] ao486_avalon_io_translator_avalon_universal_master_0_burstcount;    // ao486_avalon_io_translator:uav_burstcount -> ao486_avalon_io_agent:av_burstcount
	wire   [7:0] sound_fm_agent_m0_readdata;                                         // sound_fm_translator:uav_readdata -> sound_fm_agent:m0_readdata
	wire         sound_fm_agent_m0_waitrequest;                                      // sound_fm_translator:uav_waitrequest -> sound_fm_agent:m0_waitrequest
	wire         sound_fm_agent_m0_debugaccess;                                      // sound_fm_agent:m0_debugaccess -> sound_fm_translator:uav_debugaccess
	wire  [15:0] sound_fm_agent_m0_address;                                          // sound_fm_agent:m0_address -> sound_fm_translator:uav_address
	wire   [0:0] sound_fm_agent_m0_byteenable;                                       // sound_fm_agent:m0_byteenable -> sound_fm_translator:uav_byteenable
	wire         sound_fm_agent_m0_read;                                             // sound_fm_agent:m0_read -> sound_fm_translator:uav_read
	wire         sound_fm_agent_m0_readdatavalid;                                    // sound_fm_translator:uav_readdatavalid -> sound_fm_agent:m0_readdatavalid
	wire         sound_fm_agent_m0_lock;                                             // sound_fm_agent:m0_lock -> sound_fm_translator:uav_lock
	wire   [7:0] sound_fm_agent_m0_writedata;                                        // sound_fm_agent:m0_writedata -> sound_fm_translator:uav_writedata
	wire         sound_fm_agent_m0_write;                                            // sound_fm_agent:m0_write -> sound_fm_translator:uav_write
	wire   [0:0] sound_fm_agent_m0_burstcount;                                       // sound_fm_agent:m0_burstcount -> sound_fm_translator:uav_burstcount
	wire         sound_fm_agent_rf_source_valid;                                     // sound_fm_agent:rf_source_valid -> sound_fm_agent_rsp_fifo:in_valid
	wire  [67:0] sound_fm_agent_rf_source_data;                                      // sound_fm_agent:rf_source_data -> sound_fm_agent_rsp_fifo:in_data
	wire         sound_fm_agent_rf_source_ready;                                     // sound_fm_agent_rsp_fifo:in_ready -> sound_fm_agent:rf_source_ready
	wire         sound_fm_agent_rf_source_startofpacket;                             // sound_fm_agent:rf_source_startofpacket -> sound_fm_agent_rsp_fifo:in_startofpacket
	wire         sound_fm_agent_rf_source_endofpacket;                               // sound_fm_agent:rf_source_endofpacket -> sound_fm_agent_rsp_fifo:in_endofpacket
	wire         sound_fm_agent_rsp_fifo_out_valid;                                  // sound_fm_agent_rsp_fifo:out_valid -> sound_fm_agent:rf_sink_valid
	wire  [67:0] sound_fm_agent_rsp_fifo_out_data;                                   // sound_fm_agent_rsp_fifo:out_data -> sound_fm_agent:rf_sink_data
	wire         sound_fm_agent_rsp_fifo_out_ready;                                  // sound_fm_agent:rf_sink_ready -> sound_fm_agent_rsp_fifo:out_ready
	wire         sound_fm_agent_rsp_fifo_out_startofpacket;                          // sound_fm_agent_rsp_fifo:out_startofpacket -> sound_fm_agent:rf_sink_startofpacket
	wire         sound_fm_agent_rsp_fifo_out_endofpacket;                            // sound_fm_agent_rsp_fifo:out_endofpacket -> sound_fm_agent:rf_sink_endofpacket
	wire   [7:0] width_trans_in_agent_m0_readdata;                                   // width_trans_in_translator:uav_readdata -> width_trans_in_agent:m0_readdata
	wire         width_trans_in_agent_m0_waitrequest;                                // width_trans_in_translator:uav_waitrequest -> width_trans_in_agent:m0_waitrequest
	wire         width_trans_in_agent_m0_debugaccess;                                // width_trans_in_agent:m0_debugaccess -> width_trans_in_translator:uav_debugaccess
	wire  [15:0] width_trans_in_agent_m0_address;                                    // width_trans_in_agent:m0_address -> width_trans_in_translator:uav_address
	wire   [0:0] width_trans_in_agent_m0_byteenable;                                 // width_trans_in_agent:m0_byteenable -> width_trans_in_translator:uav_byteenable
	wire         width_trans_in_agent_m0_read;                                       // width_trans_in_agent:m0_read -> width_trans_in_translator:uav_read
	wire         width_trans_in_agent_m0_readdatavalid;                              // width_trans_in_translator:uav_readdatavalid -> width_trans_in_agent:m0_readdatavalid
	wire         width_trans_in_agent_m0_lock;                                       // width_trans_in_agent:m0_lock -> width_trans_in_translator:uav_lock
	wire   [7:0] width_trans_in_agent_m0_writedata;                                  // width_trans_in_agent:m0_writedata -> width_trans_in_translator:uav_writedata
	wire         width_trans_in_agent_m0_write;                                      // width_trans_in_agent:m0_write -> width_trans_in_translator:uav_write
	wire   [0:0] width_trans_in_agent_m0_burstcount;                                 // width_trans_in_agent:m0_burstcount -> width_trans_in_translator:uav_burstcount
	wire         width_trans_in_agent_rf_source_valid;                               // width_trans_in_agent:rf_source_valid -> width_trans_in_agent_rsp_fifo:in_valid
	wire  [67:0] width_trans_in_agent_rf_source_data;                                // width_trans_in_agent:rf_source_data -> width_trans_in_agent_rsp_fifo:in_data
	wire         width_trans_in_agent_rf_source_ready;                               // width_trans_in_agent_rsp_fifo:in_ready -> width_trans_in_agent:rf_source_ready
	wire         width_trans_in_agent_rf_source_startofpacket;                       // width_trans_in_agent:rf_source_startofpacket -> width_trans_in_agent_rsp_fifo:in_startofpacket
	wire         width_trans_in_agent_rf_source_endofpacket;                         // width_trans_in_agent:rf_source_endofpacket -> width_trans_in_agent_rsp_fifo:in_endofpacket
	wire         width_trans_in_agent_rsp_fifo_out_valid;                            // width_trans_in_agent_rsp_fifo:out_valid -> width_trans_in_agent:rf_sink_valid
	wire  [67:0] width_trans_in_agent_rsp_fifo_out_data;                             // width_trans_in_agent_rsp_fifo:out_data -> width_trans_in_agent:rf_sink_data
	wire         width_trans_in_agent_rsp_fifo_out_ready;                            // width_trans_in_agent:rf_sink_ready -> width_trans_in_agent_rsp_fifo:out_ready
	wire         width_trans_in_agent_rsp_fifo_out_startofpacket;                    // width_trans_in_agent_rsp_fifo:out_startofpacket -> width_trans_in_agent:rf_sink_startofpacket
	wire         width_trans_in_agent_rsp_fifo_out_endofpacket;                      // width_trans_in_agent_rsp_fifo:out_endofpacket -> width_trans_in_agent:rf_sink_endofpacket
	wire         width_trans_in_agent_rdata_fifo_src_valid;                          // width_trans_in_agent:rdata_fifo_src_valid -> width_trans_in_agent_rdata_fifo:in_valid
	wire   [9:0] width_trans_in_agent_rdata_fifo_src_data;                           // width_trans_in_agent:rdata_fifo_src_data -> width_trans_in_agent_rdata_fifo:in_data
	wire         width_trans_in_agent_rdata_fifo_src_ready;                          // width_trans_in_agent_rdata_fifo:in_ready -> width_trans_in_agent:rdata_fifo_src_ready
	wire   [7:0] sound_io_agent_m0_readdata;                                         // sound_io_translator:uav_readdata -> sound_io_agent:m0_readdata
	wire         sound_io_agent_m0_waitrequest;                                      // sound_io_translator:uav_waitrequest -> sound_io_agent:m0_waitrequest
	wire         sound_io_agent_m0_debugaccess;                                      // sound_io_agent:m0_debugaccess -> sound_io_translator:uav_debugaccess
	wire  [15:0] sound_io_agent_m0_address;                                          // sound_io_agent:m0_address -> sound_io_translator:uav_address
	wire   [0:0] sound_io_agent_m0_byteenable;                                       // sound_io_agent:m0_byteenable -> sound_io_translator:uav_byteenable
	wire         sound_io_agent_m0_read;                                             // sound_io_agent:m0_read -> sound_io_translator:uav_read
	wire         sound_io_agent_m0_readdatavalid;                                    // sound_io_translator:uav_readdatavalid -> sound_io_agent:m0_readdatavalid
	wire         sound_io_agent_m0_lock;                                             // sound_io_agent:m0_lock -> sound_io_translator:uav_lock
	wire   [7:0] sound_io_agent_m0_writedata;                                        // sound_io_agent:m0_writedata -> sound_io_translator:uav_writedata
	wire         sound_io_agent_m0_write;                                            // sound_io_agent:m0_write -> sound_io_translator:uav_write
	wire   [0:0] sound_io_agent_m0_burstcount;                                       // sound_io_agent:m0_burstcount -> sound_io_translator:uav_burstcount
	wire         sound_io_agent_rf_source_valid;                                     // sound_io_agent:rf_source_valid -> sound_io_agent_rsp_fifo:in_valid
	wire  [67:0] sound_io_agent_rf_source_data;                                      // sound_io_agent:rf_source_data -> sound_io_agent_rsp_fifo:in_data
	wire         sound_io_agent_rf_source_ready;                                     // sound_io_agent_rsp_fifo:in_ready -> sound_io_agent:rf_source_ready
	wire         sound_io_agent_rf_source_startofpacket;                             // sound_io_agent:rf_source_startofpacket -> sound_io_agent_rsp_fifo:in_startofpacket
	wire         sound_io_agent_rf_source_endofpacket;                               // sound_io_agent:rf_source_endofpacket -> sound_io_agent_rsp_fifo:in_endofpacket
	wire         sound_io_agent_rsp_fifo_out_valid;                                  // sound_io_agent_rsp_fifo:out_valid -> sound_io_agent:rf_sink_valid
	wire  [67:0] sound_io_agent_rsp_fifo_out_data;                                   // sound_io_agent_rsp_fifo:out_data -> sound_io_agent:rf_sink_data
	wire         sound_io_agent_rsp_fifo_out_ready;                                  // sound_io_agent:rf_sink_ready -> sound_io_agent_rsp_fifo:out_ready
	wire         sound_io_agent_rsp_fifo_out_startofpacket;                          // sound_io_agent_rsp_fifo:out_startofpacket -> sound_io_agent:rf_sink_startofpacket
	wire         sound_io_agent_rsp_fifo_out_endofpacket;                            // sound_io_agent_rsp_fifo:out_endofpacket -> sound_io_agent:rf_sink_endofpacket
	wire   [7:0] rtc_io_agent_m0_readdata;                                           // rtc_io_translator:uav_readdata -> rtc_io_agent:m0_readdata
	wire         rtc_io_agent_m0_waitrequest;                                        // rtc_io_translator:uav_waitrequest -> rtc_io_agent:m0_waitrequest
	wire         rtc_io_agent_m0_debugaccess;                                        // rtc_io_agent:m0_debugaccess -> rtc_io_translator:uav_debugaccess
	wire  [15:0] rtc_io_agent_m0_address;                                            // rtc_io_agent:m0_address -> rtc_io_translator:uav_address
	wire   [0:0] rtc_io_agent_m0_byteenable;                                         // rtc_io_agent:m0_byteenable -> rtc_io_translator:uav_byteenable
	wire         rtc_io_agent_m0_read;                                               // rtc_io_agent:m0_read -> rtc_io_translator:uav_read
	wire         rtc_io_agent_m0_readdatavalid;                                      // rtc_io_translator:uav_readdatavalid -> rtc_io_agent:m0_readdatavalid
	wire         rtc_io_agent_m0_lock;                                               // rtc_io_agent:m0_lock -> rtc_io_translator:uav_lock
	wire   [7:0] rtc_io_agent_m0_writedata;                                          // rtc_io_agent:m0_writedata -> rtc_io_translator:uav_writedata
	wire         rtc_io_agent_m0_write;                                              // rtc_io_agent:m0_write -> rtc_io_translator:uav_write
	wire   [0:0] rtc_io_agent_m0_burstcount;                                         // rtc_io_agent:m0_burstcount -> rtc_io_translator:uav_burstcount
	wire         rtc_io_agent_rf_source_valid;                                       // rtc_io_agent:rf_source_valid -> rtc_io_agent_rsp_fifo:in_valid
	wire  [67:0] rtc_io_agent_rf_source_data;                                        // rtc_io_agent:rf_source_data -> rtc_io_agent_rsp_fifo:in_data
	wire         rtc_io_agent_rf_source_ready;                                       // rtc_io_agent_rsp_fifo:in_ready -> rtc_io_agent:rf_source_ready
	wire         rtc_io_agent_rf_source_startofpacket;                               // rtc_io_agent:rf_source_startofpacket -> rtc_io_agent_rsp_fifo:in_startofpacket
	wire         rtc_io_agent_rf_source_endofpacket;                                 // rtc_io_agent:rf_source_endofpacket -> rtc_io_agent_rsp_fifo:in_endofpacket
	wire         rtc_io_agent_rsp_fifo_out_valid;                                    // rtc_io_agent_rsp_fifo:out_valid -> rtc_io_agent:rf_sink_valid
	wire  [67:0] rtc_io_agent_rsp_fifo_out_data;                                     // rtc_io_agent_rsp_fifo:out_data -> rtc_io_agent:rf_sink_data
	wire         rtc_io_agent_rsp_fifo_out_ready;                                    // rtc_io_agent:rf_sink_ready -> rtc_io_agent_rsp_fifo:out_ready
	wire         rtc_io_agent_rsp_fifo_out_startofpacket;                            // rtc_io_agent_rsp_fifo:out_startofpacket -> rtc_io_agent:rf_sink_startofpacket
	wire         rtc_io_agent_rsp_fifo_out_endofpacket;                              // rtc_io_agent_rsp_fifo:out_endofpacket -> rtc_io_agent:rf_sink_endofpacket
	wire   [7:0] pit_io_agent_m0_readdata;                                           // pit_io_translator:uav_readdata -> pit_io_agent:m0_readdata
	wire         pit_io_agent_m0_waitrequest;                                        // pit_io_translator:uav_waitrequest -> pit_io_agent:m0_waitrequest
	wire         pit_io_agent_m0_debugaccess;                                        // pit_io_agent:m0_debugaccess -> pit_io_translator:uav_debugaccess
	wire  [15:0] pit_io_agent_m0_address;                                            // pit_io_agent:m0_address -> pit_io_translator:uav_address
	wire   [0:0] pit_io_agent_m0_byteenable;                                         // pit_io_agent:m0_byteenable -> pit_io_translator:uav_byteenable
	wire         pit_io_agent_m0_read;                                               // pit_io_agent:m0_read -> pit_io_translator:uav_read
	wire         pit_io_agent_m0_readdatavalid;                                      // pit_io_translator:uav_readdatavalid -> pit_io_agent:m0_readdatavalid
	wire         pit_io_agent_m0_lock;                                               // pit_io_agent:m0_lock -> pit_io_translator:uav_lock
	wire   [7:0] pit_io_agent_m0_writedata;                                          // pit_io_agent:m0_writedata -> pit_io_translator:uav_writedata
	wire         pit_io_agent_m0_write;                                              // pit_io_agent:m0_write -> pit_io_translator:uav_write
	wire   [0:0] pit_io_agent_m0_burstcount;                                         // pit_io_agent:m0_burstcount -> pit_io_translator:uav_burstcount
	wire         pit_io_agent_rf_source_valid;                                       // pit_io_agent:rf_source_valid -> pit_io_agent_rsp_fifo:in_valid
	wire  [67:0] pit_io_agent_rf_source_data;                                        // pit_io_agent:rf_source_data -> pit_io_agent_rsp_fifo:in_data
	wire         pit_io_agent_rf_source_ready;                                       // pit_io_agent_rsp_fifo:in_ready -> pit_io_agent:rf_source_ready
	wire         pit_io_agent_rf_source_startofpacket;                               // pit_io_agent:rf_source_startofpacket -> pit_io_agent_rsp_fifo:in_startofpacket
	wire         pit_io_agent_rf_source_endofpacket;                                 // pit_io_agent:rf_source_endofpacket -> pit_io_agent_rsp_fifo:in_endofpacket
	wire         pit_io_agent_rsp_fifo_out_valid;                                    // pit_io_agent_rsp_fifo:out_valid -> pit_io_agent:rf_sink_valid
	wire  [67:0] pit_io_agent_rsp_fifo_out_data;                                     // pit_io_agent_rsp_fifo:out_data -> pit_io_agent:rf_sink_data
	wire         pit_io_agent_rsp_fifo_out_ready;                                    // pit_io_agent:rf_sink_ready -> pit_io_agent_rsp_fifo:out_ready
	wire         pit_io_agent_rsp_fifo_out_startofpacket;                            // pit_io_agent_rsp_fifo:out_startofpacket -> pit_io_agent:rf_sink_startofpacket
	wire         pit_io_agent_rsp_fifo_out_endofpacket;                              // pit_io_agent_rsp_fifo:out_endofpacket -> pit_io_agent:rf_sink_endofpacket
	wire  [31:0] hdd0_io_agent_m0_readdata;                                          // hdd0_io_translator:uav_readdata -> hdd0_io_agent:m0_readdata
	wire         hdd0_io_agent_m0_waitrequest;                                       // hdd0_io_translator:uav_waitrequest -> hdd0_io_agent:m0_waitrequest
	wire         hdd0_io_agent_m0_debugaccess;                                       // hdd0_io_agent:m0_debugaccess -> hdd0_io_translator:uav_debugaccess
	wire  [15:0] hdd0_io_agent_m0_address;                                           // hdd0_io_agent:m0_address -> hdd0_io_translator:uav_address
	wire   [3:0] hdd0_io_agent_m0_byteenable;                                        // hdd0_io_agent:m0_byteenable -> hdd0_io_translator:uav_byteenable
	wire         hdd0_io_agent_m0_read;                                              // hdd0_io_agent:m0_read -> hdd0_io_translator:uav_read
	wire         hdd0_io_agent_m0_readdatavalid;                                     // hdd0_io_translator:uav_readdatavalid -> hdd0_io_agent:m0_readdatavalid
	wire         hdd0_io_agent_m0_lock;                                              // hdd0_io_agent:m0_lock -> hdd0_io_translator:uav_lock
	wire  [31:0] hdd0_io_agent_m0_writedata;                                         // hdd0_io_agent:m0_writedata -> hdd0_io_translator:uav_writedata
	wire         hdd0_io_agent_m0_write;                                             // hdd0_io_agent:m0_write -> hdd0_io_translator:uav_write
	wire   [2:0] hdd0_io_agent_m0_burstcount;                                        // hdd0_io_agent:m0_burstcount -> hdd0_io_translator:uav_burstcount
	wire         hdd0_io_agent_rf_source_valid;                                      // hdd0_io_agent:rf_source_valid -> hdd0_io_agent_rsp_fifo:in_valid
	wire  [94:0] hdd0_io_agent_rf_source_data;                                       // hdd0_io_agent:rf_source_data -> hdd0_io_agent_rsp_fifo:in_data
	wire         hdd0_io_agent_rf_source_ready;                                      // hdd0_io_agent_rsp_fifo:in_ready -> hdd0_io_agent:rf_source_ready
	wire         hdd0_io_agent_rf_source_startofpacket;                              // hdd0_io_agent:rf_source_startofpacket -> hdd0_io_agent_rsp_fifo:in_startofpacket
	wire         hdd0_io_agent_rf_source_endofpacket;                                // hdd0_io_agent:rf_source_endofpacket -> hdd0_io_agent_rsp_fifo:in_endofpacket
	wire         hdd0_io_agent_rsp_fifo_out_valid;                                   // hdd0_io_agent_rsp_fifo:out_valid -> hdd0_io_agent:rf_sink_valid
	wire  [94:0] hdd0_io_agent_rsp_fifo_out_data;                                    // hdd0_io_agent_rsp_fifo:out_data -> hdd0_io_agent:rf_sink_data
	wire         hdd0_io_agent_rsp_fifo_out_ready;                                   // hdd0_io_agent:rf_sink_ready -> hdd0_io_agent_rsp_fifo:out_ready
	wire         hdd0_io_agent_rsp_fifo_out_startofpacket;                           // hdd0_io_agent_rsp_fifo:out_startofpacket -> hdd0_io_agent:rf_sink_startofpacket
	wire         hdd0_io_agent_rsp_fifo_out_endofpacket;                             // hdd0_io_agent_rsp_fifo:out_endofpacket -> hdd0_io_agent:rf_sink_endofpacket
	wire         cmd_mux_005_src_valid;                                              // cmd_mux_005:src_valid -> hdd0_io_agent:cp_valid
	wire  [93:0] cmd_mux_005_src_data;                                               // cmd_mux_005:src_data -> hdd0_io_agent:cp_data
	wire         cmd_mux_005_src_ready;                                              // hdd0_io_agent:cp_ready -> cmd_mux_005:src_ready
	wire  [19:0] cmd_mux_005_src_channel;                                            // cmd_mux_005:src_channel -> hdd0_io_agent:cp_channel
	wire         cmd_mux_005_src_startofpacket;                                      // cmd_mux_005:src_startofpacket -> hdd0_io_agent:cp_startofpacket
	wire         cmd_mux_005_src_endofpacket;                                        // cmd_mux_005:src_endofpacket -> hdd0_io_agent:cp_endofpacket
	wire   [7:0] floppy0_io_agent_m0_readdata;                                       // floppy0_io_translator:uav_readdata -> floppy0_io_agent:m0_readdata
	wire         floppy0_io_agent_m0_waitrequest;                                    // floppy0_io_translator:uav_waitrequest -> floppy0_io_agent:m0_waitrequest
	wire         floppy0_io_agent_m0_debugaccess;                                    // floppy0_io_agent:m0_debugaccess -> floppy0_io_translator:uav_debugaccess
	wire  [15:0] floppy0_io_agent_m0_address;                                        // floppy0_io_agent:m0_address -> floppy0_io_translator:uav_address
	wire   [0:0] floppy0_io_agent_m0_byteenable;                                     // floppy0_io_agent:m0_byteenable -> floppy0_io_translator:uav_byteenable
	wire         floppy0_io_agent_m0_read;                                           // floppy0_io_agent:m0_read -> floppy0_io_translator:uav_read
	wire         floppy0_io_agent_m0_readdatavalid;                                  // floppy0_io_translator:uav_readdatavalid -> floppy0_io_agent:m0_readdatavalid
	wire         floppy0_io_agent_m0_lock;                                           // floppy0_io_agent:m0_lock -> floppy0_io_translator:uav_lock
	wire   [7:0] floppy0_io_agent_m0_writedata;                                      // floppy0_io_agent:m0_writedata -> floppy0_io_translator:uav_writedata
	wire         floppy0_io_agent_m0_write;                                          // floppy0_io_agent:m0_write -> floppy0_io_translator:uav_write
	wire   [0:0] floppy0_io_agent_m0_burstcount;                                     // floppy0_io_agent:m0_burstcount -> floppy0_io_translator:uav_burstcount
	wire         floppy0_io_agent_rf_source_valid;                                   // floppy0_io_agent:rf_source_valid -> floppy0_io_agent_rsp_fifo:in_valid
	wire  [67:0] floppy0_io_agent_rf_source_data;                                    // floppy0_io_agent:rf_source_data -> floppy0_io_agent_rsp_fifo:in_data
	wire         floppy0_io_agent_rf_source_ready;                                   // floppy0_io_agent_rsp_fifo:in_ready -> floppy0_io_agent:rf_source_ready
	wire         floppy0_io_agent_rf_source_startofpacket;                           // floppy0_io_agent:rf_source_startofpacket -> floppy0_io_agent_rsp_fifo:in_startofpacket
	wire         floppy0_io_agent_rf_source_endofpacket;                             // floppy0_io_agent:rf_source_endofpacket -> floppy0_io_agent_rsp_fifo:in_endofpacket
	wire         floppy0_io_agent_rsp_fifo_out_valid;                                // floppy0_io_agent_rsp_fifo:out_valid -> floppy0_io_agent:rf_sink_valid
	wire  [67:0] floppy0_io_agent_rsp_fifo_out_data;                                 // floppy0_io_agent_rsp_fifo:out_data -> floppy0_io_agent:rf_sink_data
	wire         floppy0_io_agent_rsp_fifo_out_ready;                                // floppy0_io_agent:rf_sink_ready -> floppy0_io_agent_rsp_fifo:out_ready
	wire         floppy0_io_agent_rsp_fifo_out_startofpacket;                        // floppy0_io_agent_rsp_fifo:out_startofpacket -> floppy0_io_agent:rf_sink_startofpacket
	wire         floppy0_io_agent_rsp_fifo_out_endofpacket;                          // floppy0_io_agent_rsp_fifo:out_endofpacket -> floppy0_io_agent:rf_sink_endofpacket
	wire   [7:0] ps2_io_agent_m0_readdata;                                           // ps2_io_translator:uav_readdata -> ps2_io_agent:m0_readdata
	wire         ps2_io_agent_m0_waitrequest;                                        // ps2_io_translator:uav_waitrequest -> ps2_io_agent:m0_waitrequest
	wire         ps2_io_agent_m0_debugaccess;                                        // ps2_io_agent:m0_debugaccess -> ps2_io_translator:uav_debugaccess
	wire  [15:0] ps2_io_agent_m0_address;                                            // ps2_io_agent:m0_address -> ps2_io_translator:uav_address
	wire   [0:0] ps2_io_agent_m0_byteenable;                                         // ps2_io_agent:m0_byteenable -> ps2_io_translator:uav_byteenable
	wire         ps2_io_agent_m0_read;                                               // ps2_io_agent:m0_read -> ps2_io_translator:uav_read
	wire         ps2_io_agent_m0_readdatavalid;                                      // ps2_io_translator:uav_readdatavalid -> ps2_io_agent:m0_readdatavalid
	wire         ps2_io_agent_m0_lock;                                               // ps2_io_agent:m0_lock -> ps2_io_translator:uav_lock
	wire   [7:0] ps2_io_agent_m0_writedata;                                          // ps2_io_agent:m0_writedata -> ps2_io_translator:uav_writedata
	wire         ps2_io_agent_m0_write;                                              // ps2_io_agent:m0_write -> ps2_io_translator:uav_write
	wire   [0:0] ps2_io_agent_m0_burstcount;                                         // ps2_io_agent:m0_burstcount -> ps2_io_translator:uav_burstcount
	wire         ps2_io_agent_rf_source_valid;                                       // ps2_io_agent:rf_source_valid -> ps2_io_agent_rsp_fifo:in_valid
	wire  [67:0] ps2_io_agent_rf_source_data;                                        // ps2_io_agent:rf_source_data -> ps2_io_agent_rsp_fifo:in_data
	wire         ps2_io_agent_rf_source_ready;                                       // ps2_io_agent_rsp_fifo:in_ready -> ps2_io_agent:rf_source_ready
	wire         ps2_io_agent_rf_source_startofpacket;                               // ps2_io_agent:rf_source_startofpacket -> ps2_io_agent_rsp_fifo:in_startofpacket
	wire         ps2_io_agent_rf_source_endofpacket;                                 // ps2_io_agent:rf_source_endofpacket -> ps2_io_agent_rsp_fifo:in_endofpacket
	wire         ps2_io_agent_rsp_fifo_out_valid;                                    // ps2_io_agent_rsp_fifo:out_valid -> ps2_io_agent:rf_sink_valid
	wire  [67:0] ps2_io_agent_rsp_fifo_out_data;                                     // ps2_io_agent_rsp_fifo:out_data -> ps2_io_agent:rf_sink_data
	wire         ps2_io_agent_rsp_fifo_out_ready;                                    // ps2_io_agent:rf_sink_ready -> ps2_io_agent_rsp_fifo:out_ready
	wire         ps2_io_agent_rsp_fifo_out_startofpacket;                            // ps2_io_agent_rsp_fifo:out_startofpacket -> ps2_io_agent:rf_sink_startofpacket
	wire         ps2_io_agent_rsp_fifo_out_endofpacket;                              // ps2_io_agent_rsp_fifo:out_endofpacket -> ps2_io_agent:rf_sink_endofpacket
	wire  [31:0] hdd1_io_agent_m0_readdata;                                          // hdd1_io_translator:uav_readdata -> hdd1_io_agent:m0_readdata
	wire         hdd1_io_agent_m0_waitrequest;                                       // hdd1_io_translator:uav_waitrequest -> hdd1_io_agent:m0_waitrequest
	wire         hdd1_io_agent_m0_debugaccess;                                       // hdd1_io_agent:m0_debugaccess -> hdd1_io_translator:uav_debugaccess
	wire  [15:0] hdd1_io_agent_m0_address;                                           // hdd1_io_agent:m0_address -> hdd1_io_translator:uav_address
	wire   [3:0] hdd1_io_agent_m0_byteenable;                                        // hdd1_io_agent:m0_byteenable -> hdd1_io_translator:uav_byteenable
	wire         hdd1_io_agent_m0_read;                                              // hdd1_io_agent:m0_read -> hdd1_io_translator:uav_read
	wire         hdd1_io_agent_m0_readdatavalid;                                     // hdd1_io_translator:uav_readdatavalid -> hdd1_io_agent:m0_readdatavalid
	wire         hdd1_io_agent_m0_lock;                                              // hdd1_io_agent:m0_lock -> hdd1_io_translator:uav_lock
	wire  [31:0] hdd1_io_agent_m0_writedata;                                         // hdd1_io_agent:m0_writedata -> hdd1_io_translator:uav_writedata
	wire         hdd1_io_agent_m0_write;                                             // hdd1_io_agent:m0_write -> hdd1_io_translator:uav_write
	wire   [2:0] hdd1_io_agent_m0_burstcount;                                        // hdd1_io_agent:m0_burstcount -> hdd1_io_translator:uav_burstcount
	wire         hdd1_io_agent_rf_source_valid;                                      // hdd1_io_agent:rf_source_valid -> hdd1_io_agent_rsp_fifo:in_valid
	wire  [94:0] hdd1_io_agent_rf_source_data;                                       // hdd1_io_agent:rf_source_data -> hdd1_io_agent_rsp_fifo:in_data
	wire         hdd1_io_agent_rf_source_ready;                                      // hdd1_io_agent_rsp_fifo:in_ready -> hdd1_io_agent:rf_source_ready
	wire         hdd1_io_agent_rf_source_startofpacket;                              // hdd1_io_agent:rf_source_startofpacket -> hdd1_io_agent_rsp_fifo:in_startofpacket
	wire         hdd1_io_agent_rf_source_endofpacket;                                // hdd1_io_agent:rf_source_endofpacket -> hdd1_io_agent_rsp_fifo:in_endofpacket
	wire         hdd1_io_agent_rsp_fifo_out_valid;                                   // hdd1_io_agent_rsp_fifo:out_valid -> hdd1_io_agent:rf_sink_valid
	wire  [94:0] hdd1_io_agent_rsp_fifo_out_data;                                    // hdd1_io_agent_rsp_fifo:out_data -> hdd1_io_agent:rf_sink_data
	wire         hdd1_io_agent_rsp_fifo_out_ready;                                   // hdd1_io_agent:rf_sink_ready -> hdd1_io_agent_rsp_fifo:out_ready
	wire         hdd1_io_agent_rsp_fifo_out_startofpacket;                           // hdd1_io_agent_rsp_fifo:out_startofpacket -> hdd1_io_agent:rf_sink_startofpacket
	wire         hdd1_io_agent_rsp_fifo_out_endofpacket;                             // hdd1_io_agent_rsp_fifo:out_endofpacket -> hdd1_io_agent:rf_sink_endofpacket
	wire         cmd_mux_008_src_valid;                                              // cmd_mux_008:src_valid -> hdd1_io_agent:cp_valid
	wire  [93:0] cmd_mux_008_src_data;                                               // cmd_mux_008:src_data -> hdd1_io_agent:cp_data
	wire         cmd_mux_008_src_ready;                                              // hdd1_io_agent:cp_ready -> cmd_mux_008:src_ready
	wire  [19:0] cmd_mux_008_src_channel;                                            // cmd_mux_008:src_channel -> hdd1_io_agent:cp_channel
	wire         cmd_mux_008_src_startofpacket;                                      // cmd_mux_008:src_startofpacket -> hdd1_io_agent:cp_startofpacket
	wire         cmd_mux_008_src_endofpacket;                                        // cmd_mux_008:src_endofpacket -> hdd1_io_agent:cp_endofpacket
	wire   [7:0] hddext_0x370_io_agent_m0_readdata;                                  // hddext_0x370_io_translator:uav_readdata -> hddext_0x370_io_agent:m0_readdata
	wire         hddext_0x370_io_agent_m0_waitrequest;                               // hddext_0x370_io_translator:uav_waitrequest -> hddext_0x370_io_agent:m0_waitrequest
	wire         hddext_0x370_io_agent_m0_debugaccess;                               // hddext_0x370_io_agent:m0_debugaccess -> hddext_0x370_io_translator:uav_debugaccess
	wire  [15:0] hddext_0x370_io_agent_m0_address;                                   // hddext_0x370_io_agent:m0_address -> hddext_0x370_io_translator:uav_address
	wire   [0:0] hddext_0x370_io_agent_m0_byteenable;                                // hddext_0x370_io_agent:m0_byteenable -> hddext_0x370_io_translator:uav_byteenable
	wire         hddext_0x370_io_agent_m0_read;                                      // hddext_0x370_io_agent:m0_read -> hddext_0x370_io_translator:uav_read
	wire         hddext_0x370_io_agent_m0_readdatavalid;                             // hddext_0x370_io_translator:uav_readdatavalid -> hddext_0x370_io_agent:m0_readdatavalid
	wire         hddext_0x370_io_agent_m0_lock;                                      // hddext_0x370_io_agent:m0_lock -> hddext_0x370_io_translator:uav_lock
	wire   [7:0] hddext_0x370_io_agent_m0_writedata;                                 // hddext_0x370_io_agent:m0_writedata -> hddext_0x370_io_translator:uav_writedata
	wire         hddext_0x370_io_agent_m0_write;                                     // hddext_0x370_io_agent:m0_write -> hddext_0x370_io_translator:uav_write
	wire   [0:0] hddext_0x370_io_agent_m0_burstcount;                                // hddext_0x370_io_agent:m0_burstcount -> hddext_0x370_io_translator:uav_burstcount
	wire         hddext_0x370_io_agent_rf_source_valid;                              // hddext_0x370_io_agent:rf_source_valid -> hddext_0x370_io_agent_rsp_fifo:in_valid
	wire  [67:0] hddext_0x370_io_agent_rf_source_data;                               // hddext_0x370_io_agent:rf_source_data -> hddext_0x370_io_agent_rsp_fifo:in_data
	wire         hddext_0x370_io_agent_rf_source_ready;                              // hddext_0x370_io_agent_rsp_fifo:in_ready -> hddext_0x370_io_agent:rf_source_ready
	wire         hddext_0x370_io_agent_rf_source_startofpacket;                      // hddext_0x370_io_agent:rf_source_startofpacket -> hddext_0x370_io_agent_rsp_fifo:in_startofpacket
	wire         hddext_0x370_io_agent_rf_source_endofpacket;                        // hddext_0x370_io_agent:rf_source_endofpacket -> hddext_0x370_io_agent_rsp_fifo:in_endofpacket
	wire         hddext_0x370_io_agent_rsp_fifo_out_valid;                           // hddext_0x370_io_agent_rsp_fifo:out_valid -> hddext_0x370_io_agent:rf_sink_valid
	wire  [67:0] hddext_0x370_io_agent_rsp_fifo_out_data;                            // hddext_0x370_io_agent_rsp_fifo:out_data -> hddext_0x370_io_agent:rf_sink_data
	wire         hddext_0x370_io_agent_rsp_fifo_out_ready;                           // hddext_0x370_io_agent:rf_sink_ready -> hddext_0x370_io_agent_rsp_fifo:out_ready
	wire         hddext_0x370_io_agent_rsp_fifo_out_startofpacket;                   // hddext_0x370_io_agent_rsp_fifo:out_startofpacket -> hddext_0x370_io_agent:rf_sink_startofpacket
	wire         hddext_0x370_io_agent_rsp_fifo_out_endofpacket;                     // hddext_0x370_io_agent_rsp_fifo:out_endofpacket -> hddext_0x370_io_agent:rf_sink_endofpacket
	wire   [7:0] vga_io_b_agent_m0_readdata;                                         // vga_io_b_translator:uav_readdata -> vga_io_b_agent:m0_readdata
	wire         vga_io_b_agent_m0_waitrequest;                                      // vga_io_b_translator:uav_waitrequest -> vga_io_b_agent:m0_waitrequest
	wire         vga_io_b_agent_m0_debugaccess;                                      // vga_io_b_agent:m0_debugaccess -> vga_io_b_translator:uav_debugaccess
	wire  [15:0] vga_io_b_agent_m0_address;                                          // vga_io_b_agent:m0_address -> vga_io_b_translator:uav_address
	wire   [0:0] vga_io_b_agent_m0_byteenable;                                       // vga_io_b_agent:m0_byteenable -> vga_io_b_translator:uav_byteenable
	wire         vga_io_b_agent_m0_read;                                             // vga_io_b_agent:m0_read -> vga_io_b_translator:uav_read
	wire         vga_io_b_agent_m0_readdatavalid;                                    // vga_io_b_translator:uav_readdatavalid -> vga_io_b_agent:m0_readdatavalid
	wire         vga_io_b_agent_m0_lock;                                             // vga_io_b_agent:m0_lock -> vga_io_b_translator:uav_lock
	wire   [7:0] vga_io_b_agent_m0_writedata;                                        // vga_io_b_agent:m0_writedata -> vga_io_b_translator:uav_writedata
	wire         vga_io_b_agent_m0_write;                                            // vga_io_b_agent:m0_write -> vga_io_b_translator:uav_write
	wire   [0:0] vga_io_b_agent_m0_burstcount;                                       // vga_io_b_agent:m0_burstcount -> vga_io_b_translator:uav_burstcount
	wire         vga_io_b_agent_rf_source_valid;                                     // vga_io_b_agent:rf_source_valid -> vga_io_b_agent_rsp_fifo:in_valid
	wire  [67:0] vga_io_b_agent_rf_source_data;                                      // vga_io_b_agent:rf_source_data -> vga_io_b_agent_rsp_fifo:in_data
	wire         vga_io_b_agent_rf_source_ready;                                     // vga_io_b_agent_rsp_fifo:in_ready -> vga_io_b_agent:rf_source_ready
	wire         vga_io_b_agent_rf_source_startofpacket;                             // vga_io_b_agent:rf_source_startofpacket -> vga_io_b_agent_rsp_fifo:in_startofpacket
	wire         vga_io_b_agent_rf_source_endofpacket;                               // vga_io_b_agent:rf_source_endofpacket -> vga_io_b_agent_rsp_fifo:in_endofpacket
	wire         vga_io_b_agent_rsp_fifo_out_valid;                                  // vga_io_b_agent_rsp_fifo:out_valid -> vga_io_b_agent:rf_sink_valid
	wire  [67:0] vga_io_b_agent_rsp_fifo_out_data;                                   // vga_io_b_agent_rsp_fifo:out_data -> vga_io_b_agent:rf_sink_data
	wire         vga_io_b_agent_rsp_fifo_out_ready;                                  // vga_io_b_agent:rf_sink_ready -> vga_io_b_agent_rsp_fifo:out_ready
	wire         vga_io_b_agent_rsp_fifo_out_startofpacket;                          // vga_io_b_agent_rsp_fifo:out_startofpacket -> vga_io_b_agent:rf_sink_startofpacket
	wire         vga_io_b_agent_rsp_fifo_out_endofpacket;                            // vga_io_b_agent_rsp_fifo:out_endofpacket -> vga_io_b_agent:rf_sink_endofpacket
	wire   [7:0] vga_io_c_agent_m0_readdata;                                         // vga_io_c_translator:uav_readdata -> vga_io_c_agent:m0_readdata
	wire         vga_io_c_agent_m0_waitrequest;                                      // vga_io_c_translator:uav_waitrequest -> vga_io_c_agent:m0_waitrequest
	wire         vga_io_c_agent_m0_debugaccess;                                      // vga_io_c_agent:m0_debugaccess -> vga_io_c_translator:uav_debugaccess
	wire  [15:0] vga_io_c_agent_m0_address;                                          // vga_io_c_agent:m0_address -> vga_io_c_translator:uav_address
	wire   [0:0] vga_io_c_agent_m0_byteenable;                                       // vga_io_c_agent:m0_byteenable -> vga_io_c_translator:uav_byteenable
	wire         vga_io_c_agent_m0_read;                                             // vga_io_c_agent:m0_read -> vga_io_c_translator:uav_read
	wire         vga_io_c_agent_m0_readdatavalid;                                    // vga_io_c_translator:uav_readdatavalid -> vga_io_c_agent:m0_readdatavalid
	wire         vga_io_c_agent_m0_lock;                                             // vga_io_c_agent:m0_lock -> vga_io_c_translator:uav_lock
	wire   [7:0] vga_io_c_agent_m0_writedata;                                        // vga_io_c_agent:m0_writedata -> vga_io_c_translator:uav_writedata
	wire         vga_io_c_agent_m0_write;                                            // vga_io_c_agent:m0_write -> vga_io_c_translator:uav_write
	wire   [0:0] vga_io_c_agent_m0_burstcount;                                       // vga_io_c_agent:m0_burstcount -> vga_io_c_translator:uav_burstcount
	wire         vga_io_c_agent_rf_source_valid;                                     // vga_io_c_agent:rf_source_valid -> vga_io_c_agent_rsp_fifo:in_valid
	wire  [67:0] vga_io_c_agent_rf_source_data;                                      // vga_io_c_agent:rf_source_data -> vga_io_c_agent_rsp_fifo:in_data
	wire         vga_io_c_agent_rf_source_ready;                                     // vga_io_c_agent_rsp_fifo:in_ready -> vga_io_c_agent:rf_source_ready
	wire         vga_io_c_agent_rf_source_startofpacket;                             // vga_io_c_agent:rf_source_startofpacket -> vga_io_c_agent_rsp_fifo:in_startofpacket
	wire         vga_io_c_agent_rf_source_endofpacket;                               // vga_io_c_agent:rf_source_endofpacket -> vga_io_c_agent_rsp_fifo:in_endofpacket
	wire         vga_io_c_agent_rsp_fifo_out_valid;                                  // vga_io_c_agent_rsp_fifo:out_valid -> vga_io_c_agent:rf_sink_valid
	wire  [67:0] vga_io_c_agent_rsp_fifo_out_data;                                   // vga_io_c_agent_rsp_fifo:out_data -> vga_io_c_agent:rf_sink_data
	wire         vga_io_c_agent_rsp_fifo_out_ready;                                  // vga_io_c_agent:rf_sink_ready -> vga_io_c_agent_rsp_fifo:out_ready
	wire         vga_io_c_agent_rsp_fifo_out_startofpacket;                          // vga_io_c_agent_rsp_fifo:out_startofpacket -> vga_io_c_agent:rf_sink_startofpacket
	wire         vga_io_c_agent_rsp_fifo_out_endofpacket;                            // vga_io_c_agent_rsp_fifo:out_endofpacket -> vga_io_c_agent:rf_sink_endofpacket
	wire   [7:0] vga_io_d_agent_m0_readdata;                                         // vga_io_d_translator:uav_readdata -> vga_io_d_agent:m0_readdata
	wire         vga_io_d_agent_m0_waitrequest;                                      // vga_io_d_translator:uav_waitrequest -> vga_io_d_agent:m0_waitrequest
	wire         vga_io_d_agent_m0_debugaccess;                                      // vga_io_d_agent:m0_debugaccess -> vga_io_d_translator:uav_debugaccess
	wire  [15:0] vga_io_d_agent_m0_address;                                          // vga_io_d_agent:m0_address -> vga_io_d_translator:uav_address
	wire   [0:0] vga_io_d_agent_m0_byteenable;                                       // vga_io_d_agent:m0_byteenable -> vga_io_d_translator:uav_byteenable
	wire         vga_io_d_agent_m0_read;                                             // vga_io_d_agent:m0_read -> vga_io_d_translator:uav_read
	wire         vga_io_d_agent_m0_readdatavalid;                                    // vga_io_d_translator:uav_readdatavalid -> vga_io_d_agent:m0_readdatavalid
	wire         vga_io_d_agent_m0_lock;                                             // vga_io_d_agent:m0_lock -> vga_io_d_translator:uav_lock
	wire   [7:0] vga_io_d_agent_m0_writedata;                                        // vga_io_d_agent:m0_writedata -> vga_io_d_translator:uav_writedata
	wire         vga_io_d_agent_m0_write;                                            // vga_io_d_agent:m0_write -> vga_io_d_translator:uav_write
	wire   [0:0] vga_io_d_agent_m0_burstcount;                                       // vga_io_d_agent:m0_burstcount -> vga_io_d_translator:uav_burstcount
	wire         vga_io_d_agent_rf_source_valid;                                     // vga_io_d_agent:rf_source_valid -> vga_io_d_agent_rsp_fifo:in_valid
	wire  [67:0] vga_io_d_agent_rf_source_data;                                      // vga_io_d_agent:rf_source_data -> vga_io_d_agent_rsp_fifo:in_data
	wire         vga_io_d_agent_rf_source_ready;                                     // vga_io_d_agent_rsp_fifo:in_ready -> vga_io_d_agent:rf_source_ready
	wire         vga_io_d_agent_rf_source_startofpacket;                             // vga_io_d_agent:rf_source_startofpacket -> vga_io_d_agent_rsp_fifo:in_startofpacket
	wire         vga_io_d_agent_rf_source_endofpacket;                               // vga_io_d_agent:rf_source_endofpacket -> vga_io_d_agent_rsp_fifo:in_endofpacket
	wire         vga_io_d_agent_rsp_fifo_out_valid;                                  // vga_io_d_agent_rsp_fifo:out_valid -> vga_io_d_agent:rf_sink_valid
	wire  [67:0] vga_io_d_agent_rsp_fifo_out_data;                                   // vga_io_d_agent_rsp_fifo:out_data -> vga_io_d_agent:rf_sink_data
	wire         vga_io_d_agent_rsp_fifo_out_ready;                                  // vga_io_d_agent:rf_sink_ready -> vga_io_d_agent_rsp_fifo:out_ready
	wire         vga_io_d_agent_rsp_fifo_out_startofpacket;                          // vga_io_d_agent_rsp_fifo:out_startofpacket -> vga_io_d_agent:rf_sink_startofpacket
	wire         vga_io_d_agent_rsp_fifo_out_endofpacket;                            // vga_io_d_agent_rsp_fifo:out_endofpacket -> vga_io_d_agent:rf_sink_endofpacket
	wire   [7:0] pc_dma_master_agent_m0_readdata;                                    // pc_dma_master_translator:uav_readdata -> pc_dma_master_agent:m0_readdata
	wire         pc_dma_master_agent_m0_waitrequest;                                 // pc_dma_master_translator:uav_waitrequest -> pc_dma_master_agent:m0_waitrequest
	wire         pc_dma_master_agent_m0_debugaccess;                                 // pc_dma_master_agent:m0_debugaccess -> pc_dma_master_translator:uav_debugaccess
	wire  [15:0] pc_dma_master_agent_m0_address;                                     // pc_dma_master_agent:m0_address -> pc_dma_master_translator:uav_address
	wire   [0:0] pc_dma_master_agent_m0_byteenable;                                  // pc_dma_master_agent:m0_byteenable -> pc_dma_master_translator:uav_byteenable
	wire         pc_dma_master_agent_m0_read;                                        // pc_dma_master_agent:m0_read -> pc_dma_master_translator:uav_read
	wire         pc_dma_master_agent_m0_readdatavalid;                               // pc_dma_master_translator:uav_readdatavalid -> pc_dma_master_agent:m0_readdatavalid
	wire         pc_dma_master_agent_m0_lock;                                        // pc_dma_master_agent:m0_lock -> pc_dma_master_translator:uav_lock
	wire   [7:0] pc_dma_master_agent_m0_writedata;                                   // pc_dma_master_agent:m0_writedata -> pc_dma_master_translator:uav_writedata
	wire         pc_dma_master_agent_m0_write;                                       // pc_dma_master_agent:m0_write -> pc_dma_master_translator:uav_write
	wire   [0:0] pc_dma_master_agent_m0_burstcount;                                  // pc_dma_master_agent:m0_burstcount -> pc_dma_master_translator:uav_burstcount
	wire         pc_dma_master_agent_rf_source_valid;                                // pc_dma_master_agent:rf_source_valid -> pc_dma_master_agent_rsp_fifo:in_valid
	wire  [67:0] pc_dma_master_agent_rf_source_data;                                 // pc_dma_master_agent:rf_source_data -> pc_dma_master_agent_rsp_fifo:in_data
	wire         pc_dma_master_agent_rf_source_ready;                                // pc_dma_master_agent_rsp_fifo:in_ready -> pc_dma_master_agent:rf_source_ready
	wire         pc_dma_master_agent_rf_source_startofpacket;                        // pc_dma_master_agent:rf_source_startofpacket -> pc_dma_master_agent_rsp_fifo:in_startofpacket
	wire         pc_dma_master_agent_rf_source_endofpacket;                          // pc_dma_master_agent:rf_source_endofpacket -> pc_dma_master_agent_rsp_fifo:in_endofpacket
	wire         pc_dma_master_agent_rsp_fifo_out_valid;                             // pc_dma_master_agent_rsp_fifo:out_valid -> pc_dma_master_agent:rf_sink_valid
	wire  [67:0] pc_dma_master_agent_rsp_fifo_out_data;                              // pc_dma_master_agent_rsp_fifo:out_data -> pc_dma_master_agent:rf_sink_data
	wire         pc_dma_master_agent_rsp_fifo_out_ready;                             // pc_dma_master_agent:rf_sink_ready -> pc_dma_master_agent_rsp_fifo:out_ready
	wire         pc_dma_master_agent_rsp_fifo_out_startofpacket;                     // pc_dma_master_agent_rsp_fifo:out_startofpacket -> pc_dma_master_agent:rf_sink_startofpacket
	wire         pc_dma_master_agent_rsp_fifo_out_endofpacket;                       // pc_dma_master_agent_rsp_fifo:out_endofpacket -> pc_dma_master_agent:rf_sink_endofpacket
	wire   [7:0] pic_master_agent_m0_readdata;                                       // pic_master_translator:uav_readdata -> pic_master_agent:m0_readdata
	wire         pic_master_agent_m0_waitrequest;                                    // pic_master_translator:uav_waitrequest -> pic_master_agent:m0_waitrequest
	wire         pic_master_agent_m0_debugaccess;                                    // pic_master_agent:m0_debugaccess -> pic_master_translator:uav_debugaccess
	wire  [15:0] pic_master_agent_m0_address;                                        // pic_master_agent:m0_address -> pic_master_translator:uav_address
	wire   [0:0] pic_master_agent_m0_byteenable;                                     // pic_master_agent:m0_byteenable -> pic_master_translator:uav_byteenable
	wire         pic_master_agent_m0_read;                                           // pic_master_agent:m0_read -> pic_master_translator:uav_read
	wire         pic_master_agent_m0_readdatavalid;                                  // pic_master_translator:uav_readdatavalid -> pic_master_agent:m0_readdatavalid
	wire         pic_master_agent_m0_lock;                                           // pic_master_agent:m0_lock -> pic_master_translator:uav_lock
	wire   [7:0] pic_master_agent_m0_writedata;                                      // pic_master_agent:m0_writedata -> pic_master_translator:uav_writedata
	wire         pic_master_agent_m0_write;                                          // pic_master_agent:m0_write -> pic_master_translator:uav_write
	wire   [0:0] pic_master_agent_m0_burstcount;                                     // pic_master_agent:m0_burstcount -> pic_master_translator:uav_burstcount
	wire         pic_master_agent_rf_source_valid;                                   // pic_master_agent:rf_source_valid -> pic_master_agent_rsp_fifo:in_valid
	wire  [67:0] pic_master_agent_rf_source_data;                                    // pic_master_agent:rf_source_data -> pic_master_agent_rsp_fifo:in_data
	wire         pic_master_agent_rf_source_ready;                                   // pic_master_agent_rsp_fifo:in_ready -> pic_master_agent:rf_source_ready
	wire         pic_master_agent_rf_source_startofpacket;                           // pic_master_agent:rf_source_startofpacket -> pic_master_agent_rsp_fifo:in_startofpacket
	wire         pic_master_agent_rf_source_endofpacket;                             // pic_master_agent:rf_source_endofpacket -> pic_master_agent_rsp_fifo:in_endofpacket
	wire         pic_master_agent_rsp_fifo_out_valid;                                // pic_master_agent_rsp_fifo:out_valid -> pic_master_agent:rf_sink_valid
	wire  [67:0] pic_master_agent_rsp_fifo_out_data;                                 // pic_master_agent_rsp_fifo:out_data -> pic_master_agent:rf_sink_data
	wire         pic_master_agent_rsp_fifo_out_ready;                                // pic_master_agent:rf_sink_ready -> pic_master_agent_rsp_fifo:out_ready
	wire         pic_master_agent_rsp_fifo_out_startofpacket;                        // pic_master_agent_rsp_fifo:out_startofpacket -> pic_master_agent:rf_sink_startofpacket
	wire         pic_master_agent_rsp_fifo_out_endofpacket;                          // pic_master_agent_rsp_fifo:out_endofpacket -> pic_master_agent:rf_sink_endofpacket
	wire   [7:0] sound_mpu_agent_m0_readdata;                                        // sound_mpu_translator:uav_readdata -> sound_mpu_agent:m0_readdata
	wire         sound_mpu_agent_m0_waitrequest;                                     // sound_mpu_translator:uav_waitrequest -> sound_mpu_agent:m0_waitrequest
	wire         sound_mpu_agent_m0_debugaccess;                                     // sound_mpu_agent:m0_debugaccess -> sound_mpu_translator:uav_debugaccess
	wire  [15:0] sound_mpu_agent_m0_address;                                         // sound_mpu_agent:m0_address -> sound_mpu_translator:uav_address
	wire   [0:0] sound_mpu_agent_m0_byteenable;                                      // sound_mpu_agent:m0_byteenable -> sound_mpu_translator:uav_byteenable
	wire         sound_mpu_agent_m0_read;                                            // sound_mpu_agent:m0_read -> sound_mpu_translator:uav_read
	wire         sound_mpu_agent_m0_readdatavalid;                                   // sound_mpu_translator:uav_readdatavalid -> sound_mpu_agent:m0_readdatavalid
	wire         sound_mpu_agent_m0_lock;                                            // sound_mpu_agent:m0_lock -> sound_mpu_translator:uav_lock
	wire   [7:0] sound_mpu_agent_m0_writedata;                                       // sound_mpu_agent:m0_writedata -> sound_mpu_translator:uav_writedata
	wire         sound_mpu_agent_m0_write;                                           // sound_mpu_agent:m0_write -> sound_mpu_translator:uav_write
	wire   [0:0] sound_mpu_agent_m0_burstcount;                                      // sound_mpu_agent:m0_burstcount -> sound_mpu_translator:uav_burstcount
	wire         sound_mpu_agent_rf_source_valid;                                    // sound_mpu_agent:rf_source_valid -> sound_mpu_agent_rsp_fifo:in_valid
	wire  [67:0] sound_mpu_agent_rf_source_data;                                     // sound_mpu_agent:rf_source_data -> sound_mpu_agent_rsp_fifo:in_data
	wire         sound_mpu_agent_rf_source_ready;                                    // sound_mpu_agent_rsp_fifo:in_ready -> sound_mpu_agent:rf_source_ready
	wire         sound_mpu_agent_rf_source_startofpacket;                            // sound_mpu_agent:rf_source_startofpacket -> sound_mpu_agent_rsp_fifo:in_startofpacket
	wire         sound_mpu_agent_rf_source_endofpacket;                              // sound_mpu_agent:rf_source_endofpacket -> sound_mpu_agent_rsp_fifo:in_endofpacket
	wire         sound_mpu_agent_rsp_fifo_out_valid;                                 // sound_mpu_agent_rsp_fifo:out_valid -> sound_mpu_agent:rf_sink_valid
	wire  [67:0] sound_mpu_agent_rsp_fifo_out_data;                                  // sound_mpu_agent_rsp_fifo:out_data -> sound_mpu_agent:rf_sink_data
	wire         sound_mpu_agent_rsp_fifo_out_ready;                                 // sound_mpu_agent:rf_sink_ready -> sound_mpu_agent_rsp_fifo:out_ready
	wire         sound_mpu_agent_rsp_fifo_out_startofpacket;                         // sound_mpu_agent_rsp_fifo:out_startofpacket -> sound_mpu_agent:rf_sink_startofpacket
	wire         sound_mpu_agent_rsp_fifo_out_endofpacket;                           // sound_mpu_agent_rsp_fifo:out_endofpacket -> sound_mpu_agent:rf_sink_endofpacket
	wire   [7:0] pc_dma_page_agent_m0_readdata;                                      // pc_dma_page_translator:uav_readdata -> pc_dma_page_agent:m0_readdata
	wire         pc_dma_page_agent_m0_waitrequest;                                   // pc_dma_page_translator:uav_waitrequest -> pc_dma_page_agent:m0_waitrequest
	wire         pc_dma_page_agent_m0_debugaccess;                                   // pc_dma_page_agent:m0_debugaccess -> pc_dma_page_translator:uav_debugaccess
	wire  [15:0] pc_dma_page_agent_m0_address;                                       // pc_dma_page_agent:m0_address -> pc_dma_page_translator:uav_address
	wire   [0:0] pc_dma_page_agent_m0_byteenable;                                    // pc_dma_page_agent:m0_byteenable -> pc_dma_page_translator:uav_byteenable
	wire         pc_dma_page_agent_m0_read;                                          // pc_dma_page_agent:m0_read -> pc_dma_page_translator:uav_read
	wire         pc_dma_page_agent_m0_readdatavalid;                                 // pc_dma_page_translator:uav_readdatavalid -> pc_dma_page_agent:m0_readdatavalid
	wire         pc_dma_page_agent_m0_lock;                                          // pc_dma_page_agent:m0_lock -> pc_dma_page_translator:uav_lock
	wire   [7:0] pc_dma_page_agent_m0_writedata;                                     // pc_dma_page_agent:m0_writedata -> pc_dma_page_translator:uav_writedata
	wire         pc_dma_page_agent_m0_write;                                         // pc_dma_page_agent:m0_write -> pc_dma_page_translator:uav_write
	wire   [0:0] pc_dma_page_agent_m0_burstcount;                                    // pc_dma_page_agent:m0_burstcount -> pc_dma_page_translator:uav_burstcount
	wire         pc_dma_page_agent_rf_source_valid;                                  // pc_dma_page_agent:rf_source_valid -> pc_dma_page_agent_rsp_fifo:in_valid
	wire  [67:0] pc_dma_page_agent_rf_source_data;                                   // pc_dma_page_agent:rf_source_data -> pc_dma_page_agent_rsp_fifo:in_data
	wire         pc_dma_page_agent_rf_source_ready;                                  // pc_dma_page_agent_rsp_fifo:in_ready -> pc_dma_page_agent:rf_source_ready
	wire         pc_dma_page_agent_rf_source_startofpacket;                          // pc_dma_page_agent:rf_source_startofpacket -> pc_dma_page_agent_rsp_fifo:in_startofpacket
	wire         pc_dma_page_agent_rf_source_endofpacket;                            // pc_dma_page_agent:rf_source_endofpacket -> pc_dma_page_agent_rsp_fifo:in_endofpacket
	wire         pc_dma_page_agent_rsp_fifo_out_valid;                               // pc_dma_page_agent_rsp_fifo:out_valid -> pc_dma_page_agent:rf_sink_valid
	wire  [67:0] pc_dma_page_agent_rsp_fifo_out_data;                                // pc_dma_page_agent_rsp_fifo:out_data -> pc_dma_page_agent:rf_sink_data
	wire         pc_dma_page_agent_rsp_fifo_out_ready;                               // pc_dma_page_agent:rf_sink_ready -> pc_dma_page_agent_rsp_fifo:out_ready
	wire         pc_dma_page_agent_rsp_fifo_out_startofpacket;                       // pc_dma_page_agent_rsp_fifo:out_startofpacket -> pc_dma_page_agent:rf_sink_startofpacket
	wire         pc_dma_page_agent_rsp_fifo_out_endofpacket;                         // pc_dma_page_agent_rsp_fifo:out_endofpacket -> pc_dma_page_agent:rf_sink_endofpacket
	wire   [7:0] pc_dma_slave_agent_m0_readdata;                                     // pc_dma_slave_translator:uav_readdata -> pc_dma_slave_agent:m0_readdata
	wire         pc_dma_slave_agent_m0_waitrequest;                                  // pc_dma_slave_translator:uav_waitrequest -> pc_dma_slave_agent:m0_waitrequest
	wire         pc_dma_slave_agent_m0_debugaccess;                                  // pc_dma_slave_agent:m0_debugaccess -> pc_dma_slave_translator:uav_debugaccess
	wire  [15:0] pc_dma_slave_agent_m0_address;                                      // pc_dma_slave_agent:m0_address -> pc_dma_slave_translator:uav_address
	wire   [0:0] pc_dma_slave_agent_m0_byteenable;                                   // pc_dma_slave_agent:m0_byteenable -> pc_dma_slave_translator:uav_byteenable
	wire         pc_dma_slave_agent_m0_read;                                         // pc_dma_slave_agent:m0_read -> pc_dma_slave_translator:uav_read
	wire         pc_dma_slave_agent_m0_readdatavalid;                                // pc_dma_slave_translator:uav_readdatavalid -> pc_dma_slave_agent:m0_readdatavalid
	wire         pc_dma_slave_agent_m0_lock;                                         // pc_dma_slave_agent:m0_lock -> pc_dma_slave_translator:uav_lock
	wire   [7:0] pc_dma_slave_agent_m0_writedata;                                    // pc_dma_slave_agent:m0_writedata -> pc_dma_slave_translator:uav_writedata
	wire         pc_dma_slave_agent_m0_write;                                        // pc_dma_slave_agent:m0_write -> pc_dma_slave_translator:uav_write
	wire   [0:0] pc_dma_slave_agent_m0_burstcount;                                   // pc_dma_slave_agent:m0_burstcount -> pc_dma_slave_translator:uav_burstcount
	wire         pc_dma_slave_agent_rf_source_valid;                                 // pc_dma_slave_agent:rf_source_valid -> pc_dma_slave_agent_rsp_fifo:in_valid
	wire  [67:0] pc_dma_slave_agent_rf_source_data;                                  // pc_dma_slave_agent:rf_source_data -> pc_dma_slave_agent_rsp_fifo:in_data
	wire         pc_dma_slave_agent_rf_source_ready;                                 // pc_dma_slave_agent_rsp_fifo:in_ready -> pc_dma_slave_agent:rf_source_ready
	wire         pc_dma_slave_agent_rf_source_startofpacket;                         // pc_dma_slave_agent:rf_source_startofpacket -> pc_dma_slave_agent_rsp_fifo:in_startofpacket
	wire         pc_dma_slave_agent_rf_source_endofpacket;                           // pc_dma_slave_agent:rf_source_endofpacket -> pc_dma_slave_agent_rsp_fifo:in_endofpacket
	wire         pc_dma_slave_agent_rsp_fifo_out_valid;                              // pc_dma_slave_agent_rsp_fifo:out_valid -> pc_dma_slave_agent:rf_sink_valid
	wire  [67:0] pc_dma_slave_agent_rsp_fifo_out_data;                               // pc_dma_slave_agent_rsp_fifo:out_data -> pc_dma_slave_agent:rf_sink_data
	wire         pc_dma_slave_agent_rsp_fifo_out_ready;                              // pc_dma_slave_agent:rf_sink_ready -> pc_dma_slave_agent_rsp_fifo:out_ready
	wire         pc_dma_slave_agent_rsp_fifo_out_startofpacket;                      // pc_dma_slave_agent_rsp_fifo:out_startofpacket -> pc_dma_slave_agent:rf_sink_startofpacket
	wire         pc_dma_slave_agent_rsp_fifo_out_endofpacket;                        // pc_dma_slave_agent_rsp_fifo:out_endofpacket -> pc_dma_slave_agent:rf_sink_endofpacket
	wire   [7:0] pic_slave_agent_m0_readdata;                                        // pic_slave_translator:uav_readdata -> pic_slave_agent:m0_readdata
	wire         pic_slave_agent_m0_waitrequest;                                     // pic_slave_translator:uav_waitrequest -> pic_slave_agent:m0_waitrequest
	wire         pic_slave_agent_m0_debugaccess;                                     // pic_slave_agent:m0_debugaccess -> pic_slave_translator:uav_debugaccess
	wire  [15:0] pic_slave_agent_m0_address;                                         // pic_slave_agent:m0_address -> pic_slave_translator:uav_address
	wire   [0:0] pic_slave_agent_m0_byteenable;                                      // pic_slave_agent:m0_byteenable -> pic_slave_translator:uav_byteenable
	wire         pic_slave_agent_m0_read;                                            // pic_slave_agent:m0_read -> pic_slave_translator:uav_read
	wire         pic_slave_agent_m0_readdatavalid;                                   // pic_slave_translator:uav_readdatavalid -> pic_slave_agent:m0_readdatavalid
	wire         pic_slave_agent_m0_lock;                                            // pic_slave_agent:m0_lock -> pic_slave_translator:uav_lock
	wire   [7:0] pic_slave_agent_m0_writedata;                                       // pic_slave_agent:m0_writedata -> pic_slave_translator:uav_writedata
	wire         pic_slave_agent_m0_write;                                           // pic_slave_agent:m0_write -> pic_slave_translator:uav_write
	wire   [0:0] pic_slave_agent_m0_burstcount;                                      // pic_slave_agent:m0_burstcount -> pic_slave_translator:uav_burstcount
	wire         pic_slave_agent_rf_source_valid;                                    // pic_slave_agent:rf_source_valid -> pic_slave_agent_rsp_fifo:in_valid
	wire  [67:0] pic_slave_agent_rf_source_data;                                     // pic_slave_agent:rf_source_data -> pic_slave_agent_rsp_fifo:in_data
	wire         pic_slave_agent_rf_source_ready;                                    // pic_slave_agent_rsp_fifo:in_ready -> pic_slave_agent:rf_source_ready
	wire         pic_slave_agent_rf_source_startofpacket;                            // pic_slave_agent:rf_source_startofpacket -> pic_slave_agent_rsp_fifo:in_startofpacket
	wire         pic_slave_agent_rf_source_endofpacket;                              // pic_slave_agent:rf_source_endofpacket -> pic_slave_agent_rsp_fifo:in_endofpacket
	wire         pic_slave_agent_rsp_fifo_out_valid;                                 // pic_slave_agent_rsp_fifo:out_valid -> pic_slave_agent:rf_sink_valid
	wire  [67:0] pic_slave_agent_rsp_fifo_out_data;                                  // pic_slave_agent_rsp_fifo:out_data -> pic_slave_agent:rf_sink_data
	wire         pic_slave_agent_rsp_fifo_out_ready;                                 // pic_slave_agent:rf_sink_ready -> pic_slave_agent_rsp_fifo:out_ready
	wire         pic_slave_agent_rsp_fifo_out_startofpacket;                         // pic_slave_agent_rsp_fifo:out_startofpacket -> pic_slave_agent:rf_sink_startofpacket
	wire         pic_slave_agent_rsp_fifo_out_endofpacket;                           // pic_slave_agent_rsp_fifo:out_endofpacket -> pic_slave_agent:rf_sink_endofpacket
	wire   [7:0] ps2_sysctl_agent_m0_readdata;                                       // ps2_sysctl_translator:uav_readdata -> ps2_sysctl_agent:m0_readdata
	wire         ps2_sysctl_agent_m0_waitrequest;                                    // ps2_sysctl_translator:uav_waitrequest -> ps2_sysctl_agent:m0_waitrequest
	wire         ps2_sysctl_agent_m0_debugaccess;                                    // ps2_sysctl_agent:m0_debugaccess -> ps2_sysctl_translator:uav_debugaccess
	wire  [15:0] ps2_sysctl_agent_m0_address;                                        // ps2_sysctl_agent:m0_address -> ps2_sysctl_translator:uav_address
	wire   [0:0] ps2_sysctl_agent_m0_byteenable;                                     // ps2_sysctl_agent:m0_byteenable -> ps2_sysctl_translator:uav_byteenable
	wire         ps2_sysctl_agent_m0_read;                                           // ps2_sysctl_agent:m0_read -> ps2_sysctl_translator:uav_read
	wire         ps2_sysctl_agent_m0_readdatavalid;                                  // ps2_sysctl_translator:uav_readdatavalid -> ps2_sysctl_agent:m0_readdatavalid
	wire         ps2_sysctl_agent_m0_lock;                                           // ps2_sysctl_agent:m0_lock -> ps2_sysctl_translator:uav_lock
	wire   [7:0] ps2_sysctl_agent_m0_writedata;                                      // ps2_sysctl_agent:m0_writedata -> ps2_sysctl_translator:uav_writedata
	wire         ps2_sysctl_agent_m0_write;                                          // ps2_sysctl_agent:m0_write -> ps2_sysctl_translator:uav_write
	wire   [0:0] ps2_sysctl_agent_m0_burstcount;                                     // ps2_sysctl_agent:m0_burstcount -> ps2_sysctl_translator:uav_burstcount
	wire         ps2_sysctl_agent_rf_source_valid;                                   // ps2_sysctl_agent:rf_source_valid -> ps2_sysctl_agent_rsp_fifo:in_valid
	wire  [67:0] ps2_sysctl_agent_rf_source_data;                                    // ps2_sysctl_agent:rf_source_data -> ps2_sysctl_agent_rsp_fifo:in_data
	wire         ps2_sysctl_agent_rf_source_ready;                                   // ps2_sysctl_agent_rsp_fifo:in_ready -> ps2_sysctl_agent:rf_source_ready
	wire         ps2_sysctl_agent_rf_source_startofpacket;                           // ps2_sysctl_agent:rf_source_startofpacket -> ps2_sysctl_agent_rsp_fifo:in_startofpacket
	wire         ps2_sysctl_agent_rf_source_endofpacket;                             // ps2_sysctl_agent:rf_source_endofpacket -> ps2_sysctl_agent_rsp_fifo:in_endofpacket
	wire         ps2_sysctl_agent_rsp_fifo_out_valid;                                // ps2_sysctl_agent_rsp_fifo:out_valid -> ps2_sysctl_agent:rf_sink_valid
	wire  [67:0] ps2_sysctl_agent_rsp_fifo_out_data;                                 // ps2_sysctl_agent_rsp_fifo:out_data -> ps2_sysctl_agent:rf_sink_data
	wire         ps2_sysctl_agent_rsp_fifo_out_ready;                                // ps2_sysctl_agent:rf_sink_ready -> ps2_sysctl_agent_rsp_fifo:out_ready
	wire         ps2_sysctl_agent_rsp_fifo_out_startofpacket;                        // ps2_sysctl_agent_rsp_fifo:out_startofpacket -> ps2_sysctl_agent:rf_sink_startofpacket
	wire         ps2_sysctl_agent_rsp_fifo_out_endofpacket;                          // ps2_sysctl_agent_rsp_fifo:out_endofpacket -> ps2_sysctl_agent:rf_sink_endofpacket
	wire         ao486_avalon_io_agent_cp_valid;                                     // ao486_avalon_io_agent:cp_valid -> router:sink_valid
	wire  [93:0] ao486_avalon_io_agent_cp_data;                                      // ao486_avalon_io_agent:cp_data -> router:sink_data
	wire         ao486_avalon_io_agent_cp_ready;                                     // router:sink_ready -> ao486_avalon_io_agent:cp_ready
	wire         ao486_avalon_io_agent_cp_startofpacket;                             // ao486_avalon_io_agent:cp_startofpacket -> router:sink_startofpacket
	wire         ao486_avalon_io_agent_cp_endofpacket;                               // ao486_avalon_io_agent:cp_endofpacket -> router:sink_endofpacket
	wire         sound_fm_agent_rp_valid;                                            // sound_fm_agent:rp_valid -> router_001:sink_valid
	wire  [66:0] sound_fm_agent_rp_data;                                             // sound_fm_agent:rp_data -> router_001:sink_data
	wire         sound_fm_agent_rp_ready;                                            // router_001:sink_ready -> sound_fm_agent:rp_ready
	wire         sound_fm_agent_rp_startofpacket;                                    // sound_fm_agent:rp_startofpacket -> router_001:sink_startofpacket
	wire         sound_fm_agent_rp_endofpacket;                                      // sound_fm_agent:rp_endofpacket -> router_001:sink_endofpacket
	wire         width_trans_in_agent_rp_valid;                                      // width_trans_in_agent:rp_valid -> router_002:sink_valid
	wire  [66:0] width_trans_in_agent_rp_data;                                       // width_trans_in_agent:rp_data -> router_002:sink_data
	wire         width_trans_in_agent_rp_ready;                                      // router_002:sink_ready -> width_trans_in_agent:rp_ready
	wire         width_trans_in_agent_rp_startofpacket;                              // width_trans_in_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire         width_trans_in_agent_rp_endofpacket;                                // width_trans_in_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         sound_io_agent_rp_valid;                                            // sound_io_agent:rp_valid -> router_003:sink_valid
	wire  [66:0] sound_io_agent_rp_data;                                             // sound_io_agent:rp_data -> router_003:sink_data
	wire         sound_io_agent_rp_ready;                                            // router_003:sink_ready -> sound_io_agent:rp_ready
	wire         sound_io_agent_rp_startofpacket;                                    // sound_io_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire         sound_io_agent_rp_endofpacket;                                      // sound_io_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire         rtc_io_agent_rp_valid;                                              // rtc_io_agent:rp_valid -> router_004:sink_valid
	wire  [66:0] rtc_io_agent_rp_data;                                               // rtc_io_agent:rp_data -> router_004:sink_data
	wire         rtc_io_agent_rp_ready;                                              // router_004:sink_ready -> rtc_io_agent:rp_ready
	wire         rtc_io_agent_rp_startofpacket;                                      // rtc_io_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire         rtc_io_agent_rp_endofpacket;                                        // rtc_io_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire         pit_io_agent_rp_valid;                                              // pit_io_agent:rp_valid -> router_005:sink_valid
	wire  [66:0] pit_io_agent_rp_data;                                               // pit_io_agent:rp_data -> router_005:sink_data
	wire         pit_io_agent_rp_ready;                                              // router_005:sink_ready -> pit_io_agent:rp_ready
	wire         pit_io_agent_rp_startofpacket;                                      // pit_io_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire         pit_io_agent_rp_endofpacket;                                        // pit_io_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire         hdd0_io_agent_rp_valid;                                             // hdd0_io_agent:rp_valid -> router_006:sink_valid
	wire  [93:0] hdd0_io_agent_rp_data;                                              // hdd0_io_agent:rp_data -> router_006:sink_data
	wire         hdd0_io_agent_rp_ready;                                             // router_006:sink_ready -> hdd0_io_agent:rp_ready
	wire         hdd0_io_agent_rp_startofpacket;                                     // hdd0_io_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire         hdd0_io_agent_rp_endofpacket;                                       // hdd0_io_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire         router_006_src_valid;                                               // router_006:src_valid -> rsp_demux_005:sink_valid
	wire  [93:0] router_006_src_data;                                                // router_006:src_data -> rsp_demux_005:sink_data
	wire         router_006_src_ready;                                               // rsp_demux_005:sink_ready -> router_006:src_ready
	wire  [19:0] router_006_src_channel;                                             // router_006:src_channel -> rsp_demux_005:sink_channel
	wire         router_006_src_startofpacket;                                       // router_006:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire         router_006_src_endofpacket;                                         // router_006:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire         floppy0_io_agent_rp_valid;                                          // floppy0_io_agent:rp_valid -> router_007:sink_valid
	wire  [66:0] floppy0_io_agent_rp_data;                                           // floppy0_io_agent:rp_data -> router_007:sink_data
	wire         floppy0_io_agent_rp_ready;                                          // router_007:sink_ready -> floppy0_io_agent:rp_ready
	wire         floppy0_io_agent_rp_startofpacket;                                  // floppy0_io_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire         floppy0_io_agent_rp_endofpacket;                                    // floppy0_io_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire         ps2_io_agent_rp_valid;                                              // ps2_io_agent:rp_valid -> router_008:sink_valid
	wire  [66:0] ps2_io_agent_rp_data;                                               // ps2_io_agent:rp_data -> router_008:sink_data
	wire         ps2_io_agent_rp_ready;                                              // router_008:sink_ready -> ps2_io_agent:rp_ready
	wire         ps2_io_agent_rp_startofpacket;                                      // ps2_io_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire         ps2_io_agent_rp_endofpacket;                                        // ps2_io_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire         hdd1_io_agent_rp_valid;                                             // hdd1_io_agent:rp_valid -> router_009:sink_valid
	wire  [93:0] hdd1_io_agent_rp_data;                                              // hdd1_io_agent:rp_data -> router_009:sink_data
	wire         hdd1_io_agent_rp_ready;                                             // router_009:sink_ready -> hdd1_io_agent:rp_ready
	wire         hdd1_io_agent_rp_startofpacket;                                     // hdd1_io_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire         hdd1_io_agent_rp_endofpacket;                                       // hdd1_io_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire         router_009_src_valid;                                               // router_009:src_valid -> rsp_demux_008:sink_valid
	wire  [93:0] router_009_src_data;                                                // router_009:src_data -> rsp_demux_008:sink_data
	wire         router_009_src_ready;                                               // rsp_demux_008:sink_ready -> router_009:src_ready
	wire  [19:0] router_009_src_channel;                                             // router_009:src_channel -> rsp_demux_008:sink_channel
	wire         router_009_src_startofpacket;                                       // router_009:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire         router_009_src_endofpacket;                                         // router_009:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire         hddext_0x370_io_agent_rp_valid;                                     // hddext_0x370_io_agent:rp_valid -> router_010:sink_valid
	wire  [66:0] hddext_0x370_io_agent_rp_data;                                      // hddext_0x370_io_agent:rp_data -> router_010:sink_data
	wire         hddext_0x370_io_agent_rp_ready;                                     // router_010:sink_ready -> hddext_0x370_io_agent:rp_ready
	wire         hddext_0x370_io_agent_rp_startofpacket;                             // hddext_0x370_io_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire         hddext_0x370_io_agent_rp_endofpacket;                               // hddext_0x370_io_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire         vga_io_b_agent_rp_valid;                                            // vga_io_b_agent:rp_valid -> router_011:sink_valid
	wire  [66:0] vga_io_b_agent_rp_data;                                             // vga_io_b_agent:rp_data -> router_011:sink_data
	wire         vga_io_b_agent_rp_ready;                                            // router_011:sink_ready -> vga_io_b_agent:rp_ready
	wire         vga_io_b_agent_rp_startofpacket;                                    // vga_io_b_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire         vga_io_b_agent_rp_endofpacket;                                      // vga_io_b_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire         vga_io_c_agent_rp_valid;                                            // vga_io_c_agent:rp_valid -> router_012:sink_valid
	wire  [66:0] vga_io_c_agent_rp_data;                                             // vga_io_c_agent:rp_data -> router_012:sink_data
	wire         vga_io_c_agent_rp_ready;                                            // router_012:sink_ready -> vga_io_c_agent:rp_ready
	wire         vga_io_c_agent_rp_startofpacket;                                    // vga_io_c_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire         vga_io_c_agent_rp_endofpacket;                                      // vga_io_c_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire         vga_io_d_agent_rp_valid;                                            // vga_io_d_agent:rp_valid -> router_013:sink_valid
	wire  [66:0] vga_io_d_agent_rp_data;                                             // vga_io_d_agent:rp_data -> router_013:sink_data
	wire         vga_io_d_agent_rp_ready;                                            // router_013:sink_ready -> vga_io_d_agent:rp_ready
	wire         vga_io_d_agent_rp_startofpacket;                                    // vga_io_d_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire         vga_io_d_agent_rp_endofpacket;                                      // vga_io_d_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire         pc_dma_master_agent_rp_valid;                                       // pc_dma_master_agent:rp_valid -> router_014:sink_valid
	wire  [66:0] pc_dma_master_agent_rp_data;                                        // pc_dma_master_agent:rp_data -> router_014:sink_data
	wire         pc_dma_master_agent_rp_ready;                                       // router_014:sink_ready -> pc_dma_master_agent:rp_ready
	wire         pc_dma_master_agent_rp_startofpacket;                               // pc_dma_master_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire         pc_dma_master_agent_rp_endofpacket;                                 // pc_dma_master_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire         pic_master_agent_rp_valid;                                          // pic_master_agent:rp_valid -> router_015:sink_valid
	wire  [66:0] pic_master_agent_rp_data;                                           // pic_master_agent:rp_data -> router_015:sink_data
	wire         pic_master_agent_rp_ready;                                          // router_015:sink_ready -> pic_master_agent:rp_ready
	wire         pic_master_agent_rp_startofpacket;                                  // pic_master_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire         pic_master_agent_rp_endofpacket;                                    // pic_master_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire         sound_mpu_agent_rp_valid;                                           // sound_mpu_agent:rp_valid -> router_016:sink_valid
	wire  [66:0] sound_mpu_agent_rp_data;                                            // sound_mpu_agent:rp_data -> router_016:sink_data
	wire         sound_mpu_agent_rp_ready;                                           // router_016:sink_ready -> sound_mpu_agent:rp_ready
	wire         sound_mpu_agent_rp_startofpacket;                                   // sound_mpu_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire         sound_mpu_agent_rp_endofpacket;                                     // sound_mpu_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire         pc_dma_page_agent_rp_valid;                                         // pc_dma_page_agent:rp_valid -> router_017:sink_valid
	wire  [66:0] pc_dma_page_agent_rp_data;                                          // pc_dma_page_agent:rp_data -> router_017:sink_data
	wire         pc_dma_page_agent_rp_ready;                                         // router_017:sink_ready -> pc_dma_page_agent:rp_ready
	wire         pc_dma_page_agent_rp_startofpacket;                                 // pc_dma_page_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire         pc_dma_page_agent_rp_endofpacket;                                   // pc_dma_page_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire         pc_dma_slave_agent_rp_valid;                                        // pc_dma_slave_agent:rp_valid -> router_018:sink_valid
	wire  [66:0] pc_dma_slave_agent_rp_data;                                         // pc_dma_slave_agent:rp_data -> router_018:sink_data
	wire         pc_dma_slave_agent_rp_ready;                                        // router_018:sink_ready -> pc_dma_slave_agent:rp_ready
	wire         pc_dma_slave_agent_rp_startofpacket;                                // pc_dma_slave_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire         pc_dma_slave_agent_rp_endofpacket;                                  // pc_dma_slave_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire         pic_slave_agent_rp_valid;                                           // pic_slave_agent:rp_valid -> router_019:sink_valid
	wire  [66:0] pic_slave_agent_rp_data;                                            // pic_slave_agent:rp_data -> router_019:sink_data
	wire         pic_slave_agent_rp_ready;                                           // router_019:sink_ready -> pic_slave_agent:rp_ready
	wire         pic_slave_agent_rp_startofpacket;                                   // pic_slave_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire         pic_slave_agent_rp_endofpacket;                                     // pic_slave_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire         ps2_sysctl_agent_rp_valid;                                          // ps2_sysctl_agent:rp_valid -> router_020:sink_valid
	wire  [66:0] ps2_sysctl_agent_rp_data;                                           // ps2_sysctl_agent:rp_data -> router_020:sink_data
	wire         ps2_sysctl_agent_rp_ready;                                          // router_020:sink_ready -> ps2_sysctl_agent:rp_ready
	wire         ps2_sysctl_agent_rp_startofpacket;                                  // ps2_sysctl_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire         ps2_sysctl_agent_rp_endofpacket;                                    // ps2_sysctl_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire         router_src_valid;                                                   // router:src_valid -> ao486_avalon_io_limiter:cmd_sink_valid
	wire  [93:0] router_src_data;                                                    // router:src_data -> ao486_avalon_io_limiter:cmd_sink_data
	wire         router_src_ready;                                                   // ao486_avalon_io_limiter:cmd_sink_ready -> router:src_ready
	wire  [19:0] router_src_channel;                                                 // router:src_channel -> ao486_avalon_io_limiter:cmd_sink_channel
	wire         router_src_startofpacket;                                           // router:src_startofpacket -> ao486_avalon_io_limiter:cmd_sink_startofpacket
	wire         router_src_endofpacket;                                             // router:src_endofpacket -> ao486_avalon_io_limiter:cmd_sink_endofpacket
	wire  [93:0] ao486_avalon_io_limiter_cmd_src_data;                               // ao486_avalon_io_limiter:cmd_src_data -> cmd_demux:sink_data
	wire         ao486_avalon_io_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> ao486_avalon_io_limiter:cmd_src_ready
	wire  [19:0] ao486_avalon_io_limiter_cmd_src_channel;                            // ao486_avalon_io_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire         ao486_avalon_io_limiter_cmd_src_startofpacket;                      // ao486_avalon_io_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire         ao486_avalon_io_limiter_cmd_src_endofpacket;                        // ao486_avalon_io_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire         rsp_mux_src_valid;                                                  // rsp_mux:src_valid -> ao486_avalon_io_limiter:rsp_sink_valid
	wire  [93:0] rsp_mux_src_data;                                                   // rsp_mux:src_data -> ao486_avalon_io_limiter:rsp_sink_data
	wire         rsp_mux_src_ready;                                                  // ao486_avalon_io_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire  [19:0] rsp_mux_src_channel;                                                // rsp_mux:src_channel -> ao486_avalon_io_limiter:rsp_sink_channel
	wire         rsp_mux_src_startofpacket;                                          // rsp_mux:src_startofpacket -> ao486_avalon_io_limiter:rsp_sink_startofpacket
	wire         rsp_mux_src_endofpacket;                                            // rsp_mux:src_endofpacket -> ao486_avalon_io_limiter:rsp_sink_endofpacket
	wire         ao486_avalon_io_limiter_rsp_src_valid;                              // ao486_avalon_io_limiter:rsp_src_valid -> ao486_avalon_io_agent:rp_valid
	wire  [93:0] ao486_avalon_io_limiter_rsp_src_data;                               // ao486_avalon_io_limiter:rsp_src_data -> ao486_avalon_io_agent:rp_data
	wire         ao486_avalon_io_limiter_rsp_src_ready;                              // ao486_avalon_io_agent:rp_ready -> ao486_avalon_io_limiter:rsp_src_ready
	wire  [19:0] ao486_avalon_io_limiter_rsp_src_channel;                            // ao486_avalon_io_limiter:rsp_src_channel -> ao486_avalon_io_agent:rp_channel
	wire         ao486_avalon_io_limiter_rsp_src_startofpacket;                      // ao486_avalon_io_limiter:rsp_src_startofpacket -> ao486_avalon_io_agent:rp_startofpacket
	wire         ao486_avalon_io_limiter_rsp_src_endofpacket;                        // ao486_avalon_io_limiter:rsp_src_endofpacket -> ao486_avalon_io_agent:rp_endofpacket
	wire         sound_fm_burst_adapter_source0_valid;                               // sound_fm_burst_adapter:source0_valid -> sound_fm_agent:cp_valid
	wire  [66:0] sound_fm_burst_adapter_source0_data;                                // sound_fm_burst_adapter:source0_data -> sound_fm_agent:cp_data
	wire         sound_fm_burst_adapter_source0_ready;                               // sound_fm_agent:cp_ready -> sound_fm_burst_adapter:source0_ready
	wire  [19:0] sound_fm_burst_adapter_source0_channel;                             // sound_fm_burst_adapter:source0_channel -> sound_fm_agent:cp_channel
	wire         sound_fm_burst_adapter_source0_startofpacket;                       // sound_fm_burst_adapter:source0_startofpacket -> sound_fm_agent:cp_startofpacket
	wire         sound_fm_burst_adapter_source0_endofpacket;                         // sound_fm_burst_adapter:source0_endofpacket -> sound_fm_agent:cp_endofpacket
	wire         width_trans_in_burst_adapter_source0_valid;                         // width_trans_in_burst_adapter:source0_valid -> width_trans_in_agent:cp_valid
	wire  [66:0] width_trans_in_burst_adapter_source0_data;                          // width_trans_in_burst_adapter:source0_data -> width_trans_in_agent:cp_data
	wire         width_trans_in_burst_adapter_source0_ready;                         // width_trans_in_agent:cp_ready -> width_trans_in_burst_adapter:source0_ready
	wire  [19:0] width_trans_in_burst_adapter_source0_channel;                       // width_trans_in_burst_adapter:source0_channel -> width_trans_in_agent:cp_channel
	wire         width_trans_in_burst_adapter_source0_startofpacket;                 // width_trans_in_burst_adapter:source0_startofpacket -> width_trans_in_agent:cp_startofpacket
	wire         width_trans_in_burst_adapter_source0_endofpacket;                   // width_trans_in_burst_adapter:source0_endofpacket -> width_trans_in_agent:cp_endofpacket
	wire         sound_io_burst_adapter_source0_valid;                               // sound_io_burst_adapter:source0_valid -> sound_io_agent:cp_valid
	wire  [66:0] sound_io_burst_adapter_source0_data;                                // sound_io_burst_adapter:source0_data -> sound_io_agent:cp_data
	wire         sound_io_burst_adapter_source0_ready;                               // sound_io_agent:cp_ready -> sound_io_burst_adapter:source0_ready
	wire  [19:0] sound_io_burst_adapter_source0_channel;                             // sound_io_burst_adapter:source0_channel -> sound_io_agent:cp_channel
	wire         sound_io_burst_adapter_source0_startofpacket;                       // sound_io_burst_adapter:source0_startofpacket -> sound_io_agent:cp_startofpacket
	wire         sound_io_burst_adapter_source0_endofpacket;                         // sound_io_burst_adapter:source0_endofpacket -> sound_io_agent:cp_endofpacket
	wire         rtc_io_burst_adapter_source0_valid;                                 // rtc_io_burst_adapter:source0_valid -> rtc_io_agent:cp_valid
	wire  [66:0] rtc_io_burst_adapter_source0_data;                                  // rtc_io_burst_adapter:source0_data -> rtc_io_agent:cp_data
	wire         rtc_io_burst_adapter_source0_ready;                                 // rtc_io_agent:cp_ready -> rtc_io_burst_adapter:source0_ready
	wire  [19:0] rtc_io_burst_adapter_source0_channel;                               // rtc_io_burst_adapter:source0_channel -> rtc_io_agent:cp_channel
	wire         rtc_io_burst_adapter_source0_startofpacket;                         // rtc_io_burst_adapter:source0_startofpacket -> rtc_io_agent:cp_startofpacket
	wire         rtc_io_burst_adapter_source0_endofpacket;                           // rtc_io_burst_adapter:source0_endofpacket -> rtc_io_agent:cp_endofpacket
	wire         pit_io_burst_adapter_source0_valid;                                 // pit_io_burst_adapter:source0_valid -> pit_io_agent:cp_valid
	wire  [66:0] pit_io_burst_adapter_source0_data;                                  // pit_io_burst_adapter:source0_data -> pit_io_agent:cp_data
	wire         pit_io_burst_adapter_source0_ready;                                 // pit_io_agent:cp_ready -> pit_io_burst_adapter:source0_ready
	wire  [19:0] pit_io_burst_adapter_source0_channel;                               // pit_io_burst_adapter:source0_channel -> pit_io_agent:cp_channel
	wire         pit_io_burst_adapter_source0_startofpacket;                         // pit_io_burst_adapter:source0_startofpacket -> pit_io_agent:cp_startofpacket
	wire         pit_io_burst_adapter_source0_endofpacket;                           // pit_io_burst_adapter:source0_endofpacket -> pit_io_agent:cp_endofpacket
	wire         floppy0_io_burst_adapter_source0_valid;                             // floppy0_io_burst_adapter:source0_valid -> floppy0_io_agent:cp_valid
	wire  [66:0] floppy0_io_burst_adapter_source0_data;                              // floppy0_io_burst_adapter:source0_data -> floppy0_io_agent:cp_data
	wire         floppy0_io_burst_adapter_source0_ready;                             // floppy0_io_agent:cp_ready -> floppy0_io_burst_adapter:source0_ready
	wire  [19:0] floppy0_io_burst_adapter_source0_channel;                           // floppy0_io_burst_adapter:source0_channel -> floppy0_io_agent:cp_channel
	wire         floppy0_io_burst_adapter_source0_startofpacket;                     // floppy0_io_burst_adapter:source0_startofpacket -> floppy0_io_agent:cp_startofpacket
	wire         floppy0_io_burst_adapter_source0_endofpacket;                       // floppy0_io_burst_adapter:source0_endofpacket -> floppy0_io_agent:cp_endofpacket
	wire         ps2_io_burst_adapter_source0_valid;                                 // ps2_io_burst_adapter:source0_valid -> ps2_io_agent:cp_valid
	wire  [66:0] ps2_io_burst_adapter_source0_data;                                  // ps2_io_burst_adapter:source0_data -> ps2_io_agent:cp_data
	wire         ps2_io_burst_adapter_source0_ready;                                 // ps2_io_agent:cp_ready -> ps2_io_burst_adapter:source0_ready
	wire  [19:0] ps2_io_burst_adapter_source0_channel;                               // ps2_io_burst_adapter:source0_channel -> ps2_io_agent:cp_channel
	wire         ps2_io_burst_adapter_source0_startofpacket;                         // ps2_io_burst_adapter:source0_startofpacket -> ps2_io_agent:cp_startofpacket
	wire         ps2_io_burst_adapter_source0_endofpacket;                           // ps2_io_burst_adapter:source0_endofpacket -> ps2_io_agent:cp_endofpacket
	wire         hddext_0x370_io_burst_adapter_source0_valid;                        // hddext_0x370_io_burst_adapter:source0_valid -> hddext_0x370_io_agent:cp_valid
	wire  [66:0] hddext_0x370_io_burst_adapter_source0_data;                         // hddext_0x370_io_burst_adapter:source0_data -> hddext_0x370_io_agent:cp_data
	wire         hddext_0x370_io_burst_adapter_source0_ready;                        // hddext_0x370_io_agent:cp_ready -> hddext_0x370_io_burst_adapter:source0_ready
	wire  [19:0] hddext_0x370_io_burst_adapter_source0_channel;                      // hddext_0x370_io_burst_adapter:source0_channel -> hddext_0x370_io_agent:cp_channel
	wire         hddext_0x370_io_burst_adapter_source0_startofpacket;                // hddext_0x370_io_burst_adapter:source0_startofpacket -> hddext_0x370_io_agent:cp_startofpacket
	wire         hddext_0x370_io_burst_adapter_source0_endofpacket;                  // hddext_0x370_io_burst_adapter:source0_endofpacket -> hddext_0x370_io_agent:cp_endofpacket
	wire         vga_io_b_burst_adapter_source0_valid;                               // vga_io_b_burst_adapter:source0_valid -> vga_io_b_agent:cp_valid
	wire  [66:0] vga_io_b_burst_adapter_source0_data;                                // vga_io_b_burst_adapter:source0_data -> vga_io_b_agent:cp_data
	wire         vga_io_b_burst_adapter_source0_ready;                               // vga_io_b_agent:cp_ready -> vga_io_b_burst_adapter:source0_ready
	wire  [19:0] vga_io_b_burst_adapter_source0_channel;                             // vga_io_b_burst_adapter:source0_channel -> vga_io_b_agent:cp_channel
	wire         vga_io_b_burst_adapter_source0_startofpacket;                       // vga_io_b_burst_adapter:source0_startofpacket -> vga_io_b_agent:cp_startofpacket
	wire         vga_io_b_burst_adapter_source0_endofpacket;                         // vga_io_b_burst_adapter:source0_endofpacket -> vga_io_b_agent:cp_endofpacket
	wire         vga_io_c_burst_adapter_source0_valid;                               // vga_io_c_burst_adapter:source0_valid -> vga_io_c_agent:cp_valid
	wire  [66:0] vga_io_c_burst_adapter_source0_data;                                // vga_io_c_burst_adapter:source0_data -> vga_io_c_agent:cp_data
	wire         vga_io_c_burst_adapter_source0_ready;                               // vga_io_c_agent:cp_ready -> vga_io_c_burst_adapter:source0_ready
	wire  [19:0] vga_io_c_burst_adapter_source0_channel;                             // vga_io_c_burst_adapter:source0_channel -> vga_io_c_agent:cp_channel
	wire         vga_io_c_burst_adapter_source0_startofpacket;                       // vga_io_c_burst_adapter:source0_startofpacket -> vga_io_c_agent:cp_startofpacket
	wire         vga_io_c_burst_adapter_source0_endofpacket;                         // vga_io_c_burst_adapter:source0_endofpacket -> vga_io_c_agent:cp_endofpacket
	wire         vga_io_d_burst_adapter_source0_valid;                               // vga_io_d_burst_adapter:source0_valid -> vga_io_d_agent:cp_valid
	wire  [66:0] vga_io_d_burst_adapter_source0_data;                                // vga_io_d_burst_adapter:source0_data -> vga_io_d_agent:cp_data
	wire         vga_io_d_burst_adapter_source0_ready;                               // vga_io_d_agent:cp_ready -> vga_io_d_burst_adapter:source0_ready
	wire  [19:0] vga_io_d_burst_adapter_source0_channel;                             // vga_io_d_burst_adapter:source0_channel -> vga_io_d_agent:cp_channel
	wire         vga_io_d_burst_adapter_source0_startofpacket;                       // vga_io_d_burst_adapter:source0_startofpacket -> vga_io_d_agent:cp_startofpacket
	wire         vga_io_d_burst_adapter_source0_endofpacket;                         // vga_io_d_burst_adapter:source0_endofpacket -> vga_io_d_agent:cp_endofpacket
	wire         pc_dma_master_burst_adapter_source0_valid;                          // pc_dma_master_burst_adapter:source0_valid -> pc_dma_master_agent:cp_valid
	wire  [66:0] pc_dma_master_burst_adapter_source0_data;                           // pc_dma_master_burst_adapter:source0_data -> pc_dma_master_agent:cp_data
	wire         pc_dma_master_burst_adapter_source0_ready;                          // pc_dma_master_agent:cp_ready -> pc_dma_master_burst_adapter:source0_ready
	wire  [19:0] pc_dma_master_burst_adapter_source0_channel;                        // pc_dma_master_burst_adapter:source0_channel -> pc_dma_master_agent:cp_channel
	wire         pc_dma_master_burst_adapter_source0_startofpacket;                  // pc_dma_master_burst_adapter:source0_startofpacket -> pc_dma_master_agent:cp_startofpacket
	wire         pc_dma_master_burst_adapter_source0_endofpacket;                    // pc_dma_master_burst_adapter:source0_endofpacket -> pc_dma_master_agent:cp_endofpacket
	wire         pic_master_burst_adapter_source0_valid;                             // pic_master_burst_adapter:source0_valid -> pic_master_agent:cp_valid
	wire  [66:0] pic_master_burst_adapter_source0_data;                              // pic_master_burst_adapter:source0_data -> pic_master_agent:cp_data
	wire         pic_master_burst_adapter_source0_ready;                             // pic_master_agent:cp_ready -> pic_master_burst_adapter:source0_ready
	wire  [19:0] pic_master_burst_adapter_source0_channel;                           // pic_master_burst_adapter:source0_channel -> pic_master_agent:cp_channel
	wire         pic_master_burst_adapter_source0_startofpacket;                     // pic_master_burst_adapter:source0_startofpacket -> pic_master_agent:cp_startofpacket
	wire         pic_master_burst_adapter_source0_endofpacket;                       // pic_master_burst_adapter:source0_endofpacket -> pic_master_agent:cp_endofpacket
	wire         sound_mpu_burst_adapter_source0_valid;                              // sound_mpu_burst_adapter:source0_valid -> sound_mpu_agent:cp_valid
	wire  [66:0] sound_mpu_burst_adapter_source0_data;                               // sound_mpu_burst_adapter:source0_data -> sound_mpu_agent:cp_data
	wire         sound_mpu_burst_adapter_source0_ready;                              // sound_mpu_agent:cp_ready -> sound_mpu_burst_adapter:source0_ready
	wire  [19:0] sound_mpu_burst_adapter_source0_channel;                            // sound_mpu_burst_adapter:source0_channel -> sound_mpu_agent:cp_channel
	wire         sound_mpu_burst_adapter_source0_startofpacket;                      // sound_mpu_burst_adapter:source0_startofpacket -> sound_mpu_agent:cp_startofpacket
	wire         sound_mpu_burst_adapter_source0_endofpacket;                        // sound_mpu_burst_adapter:source0_endofpacket -> sound_mpu_agent:cp_endofpacket
	wire         pc_dma_page_burst_adapter_source0_valid;                            // pc_dma_page_burst_adapter:source0_valid -> pc_dma_page_agent:cp_valid
	wire  [66:0] pc_dma_page_burst_adapter_source0_data;                             // pc_dma_page_burst_adapter:source0_data -> pc_dma_page_agent:cp_data
	wire         pc_dma_page_burst_adapter_source0_ready;                            // pc_dma_page_agent:cp_ready -> pc_dma_page_burst_adapter:source0_ready
	wire  [19:0] pc_dma_page_burst_adapter_source0_channel;                          // pc_dma_page_burst_adapter:source0_channel -> pc_dma_page_agent:cp_channel
	wire         pc_dma_page_burst_adapter_source0_startofpacket;                    // pc_dma_page_burst_adapter:source0_startofpacket -> pc_dma_page_agent:cp_startofpacket
	wire         pc_dma_page_burst_adapter_source0_endofpacket;                      // pc_dma_page_burst_adapter:source0_endofpacket -> pc_dma_page_agent:cp_endofpacket
	wire         pc_dma_slave_burst_adapter_source0_valid;                           // pc_dma_slave_burst_adapter:source0_valid -> pc_dma_slave_agent:cp_valid
	wire  [66:0] pc_dma_slave_burst_adapter_source0_data;                            // pc_dma_slave_burst_adapter:source0_data -> pc_dma_slave_agent:cp_data
	wire         pc_dma_slave_burst_adapter_source0_ready;                           // pc_dma_slave_agent:cp_ready -> pc_dma_slave_burst_adapter:source0_ready
	wire  [19:0] pc_dma_slave_burst_adapter_source0_channel;                         // pc_dma_slave_burst_adapter:source0_channel -> pc_dma_slave_agent:cp_channel
	wire         pc_dma_slave_burst_adapter_source0_startofpacket;                   // pc_dma_slave_burst_adapter:source0_startofpacket -> pc_dma_slave_agent:cp_startofpacket
	wire         pc_dma_slave_burst_adapter_source0_endofpacket;                     // pc_dma_slave_burst_adapter:source0_endofpacket -> pc_dma_slave_agent:cp_endofpacket
	wire         pic_slave_burst_adapter_source0_valid;                              // pic_slave_burst_adapter:source0_valid -> pic_slave_agent:cp_valid
	wire  [66:0] pic_slave_burst_adapter_source0_data;                               // pic_slave_burst_adapter:source0_data -> pic_slave_agent:cp_data
	wire         pic_slave_burst_adapter_source0_ready;                              // pic_slave_agent:cp_ready -> pic_slave_burst_adapter:source0_ready
	wire  [19:0] pic_slave_burst_adapter_source0_channel;                            // pic_slave_burst_adapter:source0_channel -> pic_slave_agent:cp_channel
	wire         pic_slave_burst_adapter_source0_startofpacket;                      // pic_slave_burst_adapter:source0_startofpacket -> pic_slave_agent:cp_startofpacket
	wire         pic_slave_burst_adapter_source0_endofpacket;                        // pic_slave_burst_adapter:source0_endofpacket -> pic_slave_agent:cp_endofpacket
	wire         ps2_sysctl_burst_adapter_source0_valid;                             // ps2_sysctl_burst_adapter:source0_valid -> ps2_sysctl_agent:cp_valid
	wire  [66:0] ps2_sysctl_burst_adapter_source0_data;                              // ps2_sysctl_burst_adapter:source0_data -> ps2_sysctl_agent:cp_data
	wire         ps2_sysctl_burst_adapter_source0_ready;                             // ps2_sysctl_agent:cp_ready -> ps2_sysctl_burst_adapter:source0_ready
	wire  [19:0] ps2_sysctl_burst_adapter_source0_channel;                           // ps2_sysctl_burst_adapter:source0_channel -> ps2_sysctl_agent:cp_channel
	wire         ps2_sysctl_burst_adapter_source0_startofpacket;                     // ps2_sysctl_burst_adapter:source0_startofpacket -> ps2_sysctl_agent:cp_startofpacket
	wire         ps2_sysctl_burst_adapter_source0_endofpacket;                       // ps2_sysctl_burst_adapter:source0_endofpacket -> ps2_sysctl_agent:cp_endofpacket
	wire         cmd_demux_src0_valid;                                               // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [93:0] cmd_demux_src0_data;                                                // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire         cmd_demux_src0_ready;                                               // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire  [19:0] cmd_demux_src0_channel;                                             // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_startofpacket;                                       // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire         cmd_demux_src0_endofpacket;                                         // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src2_valid;                                               // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [93:0] cmd_demux_src2_data;                                                // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire         cmd_demux_src2_ready;                                               // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire  [19:0] cmd_demux_src2_channel;                                             // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire         cmd_demux_src2_startofpacket;                                       // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire         cmd_demux_src2_endofpacket;                                         // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire         cmd_demux_src3_valid;                                               // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [93:0] cmd_demux_src3_data;                                                // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire         cmd_demux_src3_ready;                                               // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire  [19:0] cmd_demux_src3_channel;                                             // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire         cmd_demux_src3_startofpacket;                                       // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire         cmd_demux_src3_endofpacket;                                         // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire         cmd_demux_src4_valid;                                               // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [93:0] cmd_demux_src4_data;                                                // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire         cmd_demux_src4_ready;                                               // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire  [19:0] cmd_demux_src4_channel;                                             // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire         cmd_demux_src4_startofpacket;                                       // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire         cmd_demux_src4_endofpacket;                                         // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire         cmd_demux_src5_valid;                                               // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [93:0] cmd_demux_src5_data;                                                // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire         cmd_demux_src5_ready;                                               // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire  [19:0] cmd_demux_src5_channel;                                             // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire         cmd_demux_src5_startofpacket;                                       // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire         cmd_demux_src5_endofpacket;                                         // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire         cmd_demux_src6_valid;                                               // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [93:0] cmd_demux_src6_data;                                                // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire         cmd_demux_src6_ready;                                               // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire  [19:0] cmd_demux_src6_channel;                                             // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire         cmd_demux_src6_startofpacket;                                       // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire         cmd_demux_src6_endofpacket;                                         // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire         cmd_demux_src7_valid;                                               // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [93:0] cmd_demux_src7_data;                                                // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire         cmd_demux_src7_ready;                                               // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire  [19:0] cmd_demux_src7_channel;                                             // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire         cmd_demux_src7_startofpacket;                                       // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire         cmd_demux_src7_endofpacket;                                         // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire         cmd_demux_src8_valid;                                               // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [93:0] cmd_demux_src8_data;                                                // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire         cmd_demux_src8_ready;                                               // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire  [19:0] cmd_demux_src8_channel;                                             // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire         cmd_demux_src8_startofpacket;                                       // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire         cmd_demux_src8_endofpacket;                                         // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire         cmd_demux_src9_valid;                                               // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [93:0] cmd_demux_src9_data;                                                // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire         cmd_demux_src9_ready;                                               // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire  [19:0] cmd_demux_src9_channel;                                             // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire         cmd_demux_src9_startofpacket;                                       // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire         cmd_demux_src9_endofpacket;                                         // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire         cmd_demux_src10_valid;                                              // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [93:0] cmd_demux_src10_data;                                               // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire         cmd_demux_src10_ready;                                              // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire  [19:0] cmd_demux_src10_channel;                                            // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire         cmd_demux_src10_startofpacket;                                      // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire         cmd_demux_src10_endofpacket;                                        // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire         cmd_demux_src11_valid;                                              // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [93:0] cmd_demux_src11_data;                                               // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire         cmd_demux_src11_ready;                                              // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire  [19:0] cmd_demux_src11_channel;                                            // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire         cmd_demux_src11_startofpacket;                                      // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire         cmd_demux_src11_endofpacket;                                        // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire         cmd_demux_src12_valid;                                              // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire  [93:0] cmd_demux_src12_data;                                               // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire         cmd_demux_src12_ready;                                              // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire  [19:0] cmd_demux_src12_channel;                                            // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire         cmd_demux_src12_startofpacket;                                      // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire         cmd_demux_src12_endofpacket;                                        // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire         cmd_demux_src13_valid;                                              // cmd_demux:src13_valid -> cmd_mux_013:sink0_valid
	wire  [93:0] cmd_demux_src13_data;                                               // cmd_demux:src13_data -> cmd_mux_013:sink0_data
	wire         cmd_demux_src13_ready;                                              // cmd_mux_013:sink0_ready -> cmd_demux:src13_ready
	wire  [19:0] cmd_demux_src13_channel;                                            // cmd_demux:src13_channel -> cmd_mux_013:sink0_channel
	wire         cmd_demux_src13_startofpacket;                                      // cmd_demux:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire         cmd_demux_src13_endofpacket;                                        // cmd_demux:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire         cmd_demux_src14_valid;                                              // cmd_demux:src14_valid -> cmd_mux_014:sink0_valid
	wire  [93:0] cmd_demux_src14_data;                                               // cmd_demux:src14_data -> cmd_mux_014:sink0_data
	wire         cmd_demux_src14_ready;                                              // cmd_mux_014:sink0_ready -> cmd_demux:src14_ready
	wire  [19:0] cmd_demux_src14_channel;                                            // cmd_demux:src14_channel -> cmd_mux_014:sink0_channel
	wire         cmd_demux_src14_startofpacket;                                      // cmd_demux:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire         cmd_demux_src14_endofpacket;                                        // cmd_demux:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire         cmd_demux_src15_valid;                                              // cmd_demux:src15_valid -> cmd_mux_015:sink0_valid
	wire  [93:0] cmd_demux_src15_data;                                               // cmd_demux:src15_data -> cmd_mux_015:sink0_data
	wire         cmd_demux_src15_ready;                                              // cmd_mux_015:sink0_ready -> cmd_demux:src15_ready
	wire  [19:0] cmd_demux_src15_channel;                                            // cmd_demux:src15_channel -> cmd_mux_015:sink0_channel
	wire         cmd_demux_src15_startofpacket;                                      // cmd_demux:src15_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire         cmd_demux_src15_endofpacket;                                        // cmd_demux:src15_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire         cmd_demux_src16_valid;                                              // cmd_demux:src16_valid -> cmd_mux_016:sink0_valid
	wire  [93:0] cmd_demux_src16_data;                                               // cmd_demux:src16_data -> cmd_mux_016:sink0_data
	wire         cmd_demux_src16_ready;                                              // cmd_mux_016:sink0_ready -> cmd_demux:src16_ready
	wire  [19:0] cmd_demux_src16_channel;                                            // cmd_demux:src16_channel -> cmd_mux_016:sink0_channel
	wire         cmd_demux_src16_startofpacket;                                      // cmd_demux:src16_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire         cmd_demux_src16_endofpacket;                                        // cmd_demux:src16_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire         cmd_demux_src17_valid;                                              // cmd_demux:src17_valid -> cmd_mux_017:sink0_valid
	wire  [93:0] cmd_demux_src17_data;                                               // cmd_demux:src17_data -> cmd_mux_017:sink0_data
	wire         cmd_demux_src17_ready;                                              // cmd_mux_017:sink0_ready -> cmd_demux:src17_ready
	wire  [19:0] cmd_demux_src17_channel;                                            // cmd_demux:src17_channel -> cmd_mux_017:sink0_channel
	wire         cmd_demux_src17_startofpacket;                                      // cmd_demux:src17_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire         cmd_demux_src17_endofpacket;                                        // cmd_demux:src17_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire         cmd_demux_src18_valid;                                              // cmd_demux:src18_valid -> cmd_mux_018:sink0_valid
	wire  [93:0] cmd_demux_src18_data;                                               // cmd_demux:src18_data -> cmd_mux_018:sink0_data
	wire         cmd_demux_src18_ready;                                              // cmd_mux_018:sink0_ready -> cmd_demux:src18_ready
	wire  [19:0] cmd_demux_src18_channel;                                            // cmd_demux:src18_channel -> cmd_mux_018:sink0_channel
	wire         cmd_demux_src18_startofpacket;                                      // cmd_demux:src18_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire         cmd_demux_src18_endofpacket;                                        // cmd_demux:src18_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire         cmd_demux_src19_valid;                                              // cmd_demux:src19_valid -> cmd_mux_019:sink0_valid
	wire  [93:0] cmd_demux_src19_data;                                               // cmd_demux:src19_data -> cmd_mux_019:sink0_data
	wire         cmd_demux_src19_ready;                                              // cmd_mux_019:sink0_ready -> cmd_demux:src19_ready
	wire  [19:0] cmd_demux_src19_channel;                                            // cmd_demux:src19_channel -> cmd_mux_019:sink0_channel
	wire         cmd_demux_src19_startofpacket;                                      // cmd_demux:src19_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire         cmd_demux_src19_endofpacket;                                        // cmd_demux:src19_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire         rsp_demux_src0_valid;                                               // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [93:0] rsp_demux_src0_data;                                                // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire         rsp_demux_src0_ready;                                               // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire  [19:0] rsp_demux_src0_channel;                                             // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_startofpacket;                                       // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire         rsp_demux_src0_endofpacket;                                         // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_002_src0_valid;                                           // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [93:0] rsp_demux_002_src0_data;                                            // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire         rsp_demux_002_src0_ready;                                           // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire  [19:0] rsp_demux_002_src0_channel;                                         // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire         rsp_demux_002_src0_startofpacket;                                   // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire         rsp_demux_002_src0_endofpacket;                                     // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire         rsp_demux_003_src0_valid;                                           // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [93:0] rsp_demux_003_src0_data;                                            // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire         rsp_demux_003_src0_ready;                                           // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire  [19:0] rsp_demux_003_src0_channel;                                         // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire         rsp_demux_003_src0_startofpacket;                                   // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire         rsp_demux_003_src0_endofpacket;                                     // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire         rsp_demux_004_src0_valid;                                           // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [93:0] rsp_demux_004_src0_data;                                            // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire         rsp_demux_004_src0_ready;                                           // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire  [19:0] rsp_demux_004_src0_channel;                                         // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire         rsp_demux_004_src0_startofpacket;                                   // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire         rsp_demux_004_src0_endofpacket;                                     // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire         rsp_demux_005_src0_valid;                                           // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [93:0] rsp_demux_005_src0_data;                                            // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire         rsp_demux_005_src0_ready;                                           // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire  [19:0] rsp_demux_005_src0_channel;                                         // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire         rsp_demux_005_src0_startofpacket;                                   // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire         rsp_demux_005_src0_endofpacket;                                     // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire         rsp_demux_006_src0_valid;                                           // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [93:0] rsp_demux_006_src0_data;                                            // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire         rsp_demux_006_src0_ready;                                           // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire  [19:0] rsp_demux_006_src0_channel;                                         // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire         rsp_demux_006_src0_startofpacket;                                   // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire         rsp_demux_006_src0_endofpacket;                                     // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire         rsp_demux_007_src0_valid;                                           // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [93:0] rsp_demux_007_src0_data;                                            // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire         rsp_demux_007_src0_ready;                                           // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire  [19:0] rsp_demux_007_src0_channel;                                         // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire         rsp_demux_007_src0_startofpacket;                                   // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire         rsp_demux_007_src0_endofpacket;                                     // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire         rsp_demux_008_src0_valid;                                           // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [93:0] rsp_demux_008_src0_data;                                            // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire         rsp_demux_008_src0_ready;                                           // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire  [19:0] rsp_demux_008_src0_channel;                                         // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire         rsp_demux_008_src0_startofpacket;                                   // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire         rsp_demux_008_src0_endofpacket;                                     // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire         rsp_demux_009_src0_valid;                                           // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [93:0] rsp_demux_009_src0_data;                                            // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire         rsp_demux_009_src0_ready;                                           // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire  [19:0] rsp_demux_009_src0_channel;                                         // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire         rsp_demux_009_src0_startofpacket;                                   // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire         rsp_demux_009_src0_endofpacket;                                     // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire         rsp_demux_010_src0_valid;                                           // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [93:0] rsp_demux_010_src0_data;                                            // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire         rsp_demux_010_src0_ready;                                           // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire  [19:0] rsp_demux_010_src0_channel;                                         // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire         rsp_demux_010_src0_startofpacket;                                   // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire         rsp_demux_010_src0_endofpacket;                                     // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire         rsp_demux_011_src0_valid;                                           // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [93:0] rsp_demux_011_src0_data;                                            // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire         rsp_demux_011_src0_ready;                                           // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire  [19:0] rsp_demux_011_src0_channel;                                         // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire         rsp_demux_011_src0_startofpacket;                                   // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire         rsp_demux_011_src0_endofpacket;                                     // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire         rsp_demux_012_src0_valid;                                           // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire  [93:0] rsp_demux_012_src0_data;                                            // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire         rsp_demux_012_src0_ready;                                           // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire  [19:0] rsp_demux_012_src0_channel;                                         // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire         rsp_demux_012_src0_startofpacket;                                   // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire         rsp_demux_012_src0_endofpacket;                                     // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire         rsp_demux_013_src0_valid;                                           // rsp_demux_013:src0_valid -> rsp_mux:sink13_valid
	wire  [93:0] rsp_demux_013_src0_data;                                            // rsp_demux_013:src0_data -> rsp_mux:sink13_data
	wire         rsp_demux_013_src0_ready;                                           // rsp_mux:sink13_ready -> rsp_demux_013:src0_ready
	wire  [19:0] rsp_demux_013_src0_channel;                                         // rsp_demux_013:src0_channel -> rsp_mux:sink13_channel
	wire         rsp_demux_013_src0_startofpacket;                                   // rsp_demux_013:src0_startofpacket -> rsp_mux:sink13_startofpacket
	wire         rsp_demux_013_src0_endofpacket;                                     // rsp_demux_013:src0_endofpacket -> rsp_mux:sink13_endofpacket
	wire         rsp_demux_014_src0_valid;                                           // rsp_demux_014:src0_valid -> rsp_mux:sink14_valid
	wire  [93:0] rsp_demux_014_src0_data;                                            // rsp_demux_014:src0_data -> rsp_mux:sink14_data
	wire         rsp_demux_014_src0_ready;                                           // rsp_mux:sink14_ready -> rsp_demux_014:src0_ready
	wire  [19:0] rsp_demux_014_src0_channel;                                         // rsp_demux_014:src0_channel -> rsp_mux:sink14_channel
	wire         rsp_demux_014_src0_startofpacket;                                   // rsp_demux_014:src0_startofpacket -> rsp_mux:sink14_startofpacket
	wire         rsp_demux_014_src0_endofpacket;                                     // rsp_demux_014:src0_endofpacket -> rsp_mux:sink14_endofpacket
	wire         rsp_demux_015_src0_valid;                                           // rsp_demux_015:src0_valid -> rsp_mux:sink15_valid
	wire  [93:0] rsp_demux_015_src0_data;                                            // rsp_demux_015:src0_data -> rsp_mux:sink15_data
	wire         rsp_demux_015_src0_ready;                                           // rsp_mux:sink15_ready -> rsp_demux_015:src0_ready
	wire  [19:0] rsp_demux_015_src0_channel;                                         // rsp_demux_015:src0_channel -> rsp_mux:sink15_channel
	wire         rsp_demux_015_src0_startofpacket;                                   // rsp_demux_015:src0_startofpacket -> rsp_mux:sink15_startofpacket
	wire         rsp_demux_015_src0_endofpacket;                                     // rsp_demux_015:src0_endofpacket -> rsp_mux:sink15_endofpacket
	wire         rsp_demux_016_src0_valid;                                           // rsp_demux_016:src0_valid -> rsp_mux:sink16_valid
	wire  [93:0] rsp_demux_016_src0_data;                                            // rsp_demux_016:src0_data -> rsp_mux:sink16_data
	wire         rsp_demux_016_src0_ready;                                           // rsp_mux:sink16_ready -> rsp_demux_016:src0_ready
	wire  [19:0] rsp_demux_016_src0_channel;                                         // rsp_demux_016:src0_channel -> rsp_mux:sink16_channel
	wire         rsp_demux_016_src0_startofpacket;                                   // rsp_demux_016:src0_startofpacket -> rsp_mux:sink16_startofpacket
	wire         rsp_demux_016_src0_endofpacket;                                     // rsp_demux_016:src0_endofpacket -> rsp_mux:sink16_endofpacket
	wire         rsp_demux_017_src0_valid;                                           // rsp_demux_017:src0_valid -> rsp_mux:sink17_valid
	wire  [93:0] rsp_demux_017_src0_data;                                            // rsp_demux_017:src0_data -> rsp_mux:sink17_data
	wire         rsp_demux_017_src0_ready;                                           // rsp_mux:sink17_ready -> rsp_demux_017:src0_ready
	wire  [19:0] rsp_demux_017_src0_channel;                                         // rsp_demux_017:src0_channel -> rsp_mux:sink17_channel
	wire         rsp_demux_017_src0_startofpacket;                                   // rsp_demux_017:src0_startofpacket -> rsp_mux:sink17_startofpacket
	wire         rsp_demux_017_src0_endofpacket;                                     // rsp_demux_017:src0_endofpacket -> rsp_mux:sink17_endofpacket
	wire         rsp_demux_018_src0_valid;                                           // rsp_demux_018:src0_valid -> rsp_mux:sink18_valid
	wire  [93:0] rsp_demux_018_src0_data;                                            // rsp_demux_018:src0_data -> rsp_mux:sink18_data
	wire         rsp_demux_018_src0_ready;                                           // rsp_mux:sink18_ready -> rsp_demux_018:src0_ready
	wire  [19:0] rsp_demux_018_src0_channel;                                         // rsp_demux_018:src0_channel -> rsp_mux:sink18_channel
	wire         rsp_demux_018_src0_startofpacket;                                   // rsp_demux_018:src0_startofpacket -> rsp_mux:sink18_startofpacket
	wire         rsp_demux_018_src0_endofpacket;                                     // rsp_demux_018:src0_endofpacket -> rsp_mux:sink18_endofpacket
	wire         rsp_demux_019_src0_valid;                                           // rsp_demux_019:src0_valid -> rsp_mux:sink19_valid
	wire  [93:0] rsp_demux_019_src0_data;                                            // rsp_demux_019:src0_data -> rsp_mux:sink19_data
	wire         rsp_demux_019_src0_ready;                                           // rsp_mux:sink19_ready -> rsp_demux_019:src0_ready
	wire  [19:0] rsp_demux_019_src0_channel;                                         // rsp_demux_019:src0_channel -> rsp_mux:sink19_channel
	wire         rsp_demux_019_src0_startofpacket;                                   // rsp_demux_019:src0_startofpacket -> rsp_mux:sink19_startofpacket
	wire         rsp_demux_019_src0_endofpacket;                                     // rsp_demux_019:src0_endofpacket -> rsp_mux:sink19_endofpacket
	wire         router_001_src_valid;                                               // router_001:src_valid -> sound_fm_rsp_width_adapter:in_valid
	wire  [66:0] router_001_src_data;                                                // router_001:src_data -> sound_fm_rsp_width_adapter:in_data
	wire         router_001_src_ready;                                               // sound_fm_rsp_width_adapter:in_ready -> router_001:src_ready
	wire  [19:0] router_001_src_channel;                                             // router_001:src_channel -> sound_fm_rsp_width_adapter:in_channel
	wire         router_001_src_startofpacket;                                       // router_001:src_startofpacket -> sound_fm_rsp_width_adapter:in_startofpacket
	wire         router_001_src_endofpacket;                                         // router_001:src_endofpacket -> sound_fm_rsp_width_adapter:in_endofpacket
	wire         sound_fm_rsp_width_adapter_src_valid;                               // sound_fm_rsp_width_adapter:out_valid -> rsp_demux:sink_valid
	wire  [93:0] sound_fm_rsp_width_adapter_src_data;                                // sound_fm_rsp_width_adapter:out_data -> rsp_demux:sink_data
	wire         sound_fm_rsp_width_adapter_src_ready;                               // rsp_demux:sink_ready -> sound_fm_rsp_width_adapter:out_ready
	wire  [19:0] sound_fm_rsp_width_adapter_src_channel;                             // sound_fm_rsp_width_adapter:out_channel -> rsp_demux:sink_channel
	wire         sound_fm_rsp_width_adapter_src_startofpacket;                       // sound_fm_rsp_width_adapter:out_startofpacket -> rsp_demux:sink_startofpacket
	wire         sound_fm_rsp_width_adapter_src_endofpacket;                         // sound_fm_rsp_width_adapter:out_endofpacket -> rsp_demux:sink_endofpacket
	wire         router_002_src_valid;                                               // router_002:src_valid -> width_trans_in_rsp_width_adapter:in_valid
	wire  [66:0] router_002_src_data;                                                // router_002:src_data -> width_trans_in_rsp_width_adapter:in_data
	wire         router_002_src_ready;                                               // width_trans_in_rsp_width_adapter:in_ready -> router_002:src_ready
	wire  [19:0] router_002_src_channel;                                             // router_002:src_channel -> width_trans_in_rsp_width_adapter:in_channel
	wire         router_002_src_startofpacket;                                       // router_002:src_startofpacket -> width_trans_in_rsp_width_adapter:in_startofpacket
	wire         router_002_src_endofpacket;                                         // router_002:src_endofpacket -> width_trans_in_rsp_width_adapter:in_endofpacket
	wire         width_trans_in_rsp_width_adapter_src_valid;                         // width_trans_in_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire  [93:0] width_trans_in_rsp_width_adapter_src_data;                          // width_trans_in_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire         width_trans_in_rsp_width_adapter_src_ready;                         // rsp_demux_001:sink_ready -> width_trans_in_rsp_width_adapter:out_ready
	wire  [19:0] width_trans_in_rsp_width_adapter_src_channel;                       // width_trans_in_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire         width_trans_in_rsp_width_adapter_src_startofpacket;                 // width_trans_in_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire         width_trans_in_rsp_width_adapter_src_endofpacket;                   // width_trans_in_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         router_003_src_valid;                                               // router_003:src_valid -> sound_io_rsp_width_adapter:in_valid
	wire  [66:0] router_003_src_data;                                                // router_003:src_data -> sound_io_rsp_width_adapter:in_data
	wire         router_003_src_ready;                                               // sound_io_rsp_width_adapter:in_ready -> router_003:src_ready
	wire  [19:0] router_003_src_channel;                                             // router_003:src_channel -> sound_io_rsp_width_adapter:in_channel
	wire         router_003_src_startofpacket;                                       // router_003:src_startofpacket -> sound_io_rsp_width_adapter:in_startofpacket
	wire         router_003_src_endofpacket;                                         // router_003:src_endofpacket -> sound_io_rsp_width_adapter:in_endofpacket
	wire         sound_io_rsp_width_adapter_src_valid;                               // sound_io_rsp_width_adapter:out_valid -> rsp_demux_002:sink_valid
	wire  [93:0] sound_io_rsp_width_adapter_src_data;                                // sound_io_rsp_width_adapter:out_data -> rsp_demux_002:sink_data
	wire         sound_io_rsp_width_adapter_src_ready;                               // rsp_demux_002:sink_ready -> sound_io_rsp_width_adapter:out_ready
	wire  [19:0] sound_io_rsp_width_adapter_src_channel;                             // sound_io_rsp_width_adapter:out_channel -> rsp_demux_002:sink_channel
	wire         sound_io_rsp_width_adapter_src_startofpacket;                       // sound_io_rsp_width_adapter:out_startofpacket -> rsp_demux_002:sink_startofpacket
	wire         sound_io_rsp_width_adapter_src_endofpacket;                         // sound_io_rsp_width_adapter:out_endofpacket -> rsp_demux_002:sink_endofpacket
	wire         router_004_src_valid;                                               // router_004:src_valid -> rtc_io_rsp_width_adapter:in_valid
	wire  [66:0] router_004_src_data;                                                // router_004:src_data -> rtc_io_rsp_width_adapter:in_data
	wire         router_004_src_ready;                                               // rtc_io_rsp_width_adapter:in_ready -> router_004:src_ready
	wire  [19:0] router_004_src_channel;                                             // router_004:src_channel -> rtc_io_rsp_width_adapter:in_channel
	wire         router_004_src_startofpacket;                                       // router_004:src_startofpacket -> rtc_io_rsp_width_adapter:in_startofpacket
	wire         router_004_src_endofpacket;                                         // router_004:src_endofpacket -> rtc_io_rsp_width_adapter:in_endofpacket
	wire         rtc_io_rsp_width_adapter_src_valid;                                 // rtc_io_rsp_width_adapter:out_valid -> rsp_demux_003:sink_valid
	wire  [93:0] rtc_io_rsp_width_adapter_src_data;                                  // rtc_io_rsp_width_adapter:out_data -> rsp_demux_003:sink_data
	wire         rtc_io_rsp_width_adapter_src_ready;                                 // rsp_demux_003:sink_ready -> rtc_io_rsp_width_adapter:out_ready
	wire  [19:0] rtc_io_rsp_width_adapter_src_channel;                               // rtc_io_rsp_width_adapter:out_channel -> rsp_demux_003:sink_channel
	wire         rtc_io_rsp_width_adapter_src_startofpacket;                         // rtc_io_rsp_width_adapter:out_startofpacket -> rsp_demux_003:sink_startofpacket
	wire         rtc_io_rsp_width_adapter_src_endofpacket;                           // rtc_io_rsp_width_adapter:out_endofpacket -> rsp_demux_003:sink_endofpacket
	wire         router_005_src_valid;                                               // router_005:src_valid -> pit_io_rsp_width_adapter:in_valid
	wire  [66:0] router_005_src_data;                                                // router_005:src_data -> pit_io_rsp_width_adapter:in_data
	wire         router_005_src_ready;                                               // pit_io_rsp_width_adapter:in_ready -> router_005:src_ready
	wire  [19:0] router_005_src_channel;                                             // router_005:src_channel -> pit_io_rsp_width_adapter:in_channel
	wire         router_005_src_startofpacket;                                       // router_005:src_startofpacket -> pit_io_rsp_width_adapter:in_startofpacket
	wire         router_005_src_endofpacket;                                         // router_005:src_endofpacket -> pit_io_rsp_width_adapter:in_endofpacket
	wire         pit_io_rsp_width_adapter_src_valid;                                 // pit_io_rsp_width_adapter:out_valid -> rsp_demux_004:sink_valid
	wire  [93:0] pit_io_rsp_width_adapter_src_data;                                  // pit_io_rsp_width_adapter:out_data -> rsp_demux_004:sink_data
	wire         pit_io_rsp_width_adapter_src_ready;                                 // rsp_demux_004:sink_ready -> pit_io_rsp_width_adapter:out_ready
	wire  [19:0] pit_io_rsp_width_adapter_src_channel;                               // pit_io_rsp_width_adapter:out_channel -> rsp_demux_004:sink_channel
	wire         pit_io_rsp_width_adapter_src_startofpacket;                         // pit_io_rsp_width_adapter:out_startofpacket -> rsp_demux_004:sink_startofpacket
	wire         pit_io_rsp_width_adapter_src_endofpacket;                           // pit_io_rsp_width_adapter:out_endofpacket -> rsp_demux_004:sink_endofpacket
	wire         router_007_src_valid;                                               // router_007:src_valid -> floppy0_io_rsp_width_adapter:in_valid
	wire  [66:0] router_007_src_data;                                                // router_007:src_data -> floppy0_io_rsp_width_adapter:in_data
	wire         router_007_src_ready;                                               // floppy0_io_rsp_width_adapter:in_ready -> router_007:src_ready
	wire  [19:0] router_007_src_channel;                                             // router_007:src_channel -> floppy0_io_rsp_width_adapter:in_channel
	wire         router_007_src_startofpacket;                                       // router_007:src_startofpacket -> floppy0_io_rsp_width_adapter:in_startofpacket
	wire         router_007_src_endofpacket;                                         // router_007:src_endofpacket -> floppy0_io_rsp_width_adapter:in_endofpacket
	wire         floppy0_io_rsp_width_adapter_src_valid;                             // floppy0_io_rsp_width_adapter:out_valid -> rsp_demux_006:sink_valid
	wire  [93:0] floppy0_io_rsp_width_adapter_src_data;                              // floppy0_io_rsp_width_adapter:out_data -> rsp_demux_006:sink_data
	wire         floppy0_io_rsp_width_adapter_src_ready;                             // rsp_demux_006:sink_ready -> floppy0_io_rsp_width_adapter:out_ready
	wire  [19:0] floppy0_io_rsp_width_adapter_src_channel;                           // floppy0_io_rsp_width_adapter:out_channel -> rsp_demux_006:sink_channel
	wire         floppy0_io_rsp_width_adapter_src_startofpacket;                     // floppy0_io_rsp_width_adapter:out_startofpacket -> rsp_demux_006:sink_startofpacket
	wire         floppy0_io_rsp_width_adapter_src_endofpacket;                       // floppy0_io_rsp_width_adapter:out_endofpacket -> rsp_demux_006:sink_endofpacket
	wire         router_008_src_valid;                                               // router_008:src_valid -> ps2_io_rsp_width_adapter:in_valid
	wire  [66:0] router_008_src_data;                                                // router_008:src_data -> ps2_io_rsp_width_adapter:in_data
	wire         router_008_src_ready;                                               // ps2_io_rsp_width_adapter:in_ready -> router_008:src_ready
	wire  [19:0] router_008_src_channel;                                             // router_008:src_channel -> ps2_io_rsp_width_adapter:in_channel
	wire         router_008_src_startofpacket;                                       // router_008:src_startofpacket -> ps2_io_rsp_width_adapter:in_startofpacket
	wire         router_008_src_endofpacket;                                         // router_008:src_endofpacket -> ps2_io_rsp_width_adapter:in_endofpacket
	wire         ps2_io_rsp_width_adapter_src_valid;                                 // ps2_io_rsp_width_adapter:out_valid -> rsp_demux_007:sink_valid
	wire  [93:0] ps2_io_rsp_width_adapter_src_data;                                  // ps2_io_rsp_width_adapter:out_data -> rsp_demux_007:sink_data
	wire         ps2_io_rsp_width_adapter_src_ready;                                 // rsp_demux_007:sink_ready -> ps2_io_rsp_width_adapter:out_ready
	wire  [19:0] ps2_io_rsp_width_adapter_src_channel;                               // ps2_io_rsp_width_adapter:out_channel -> rsp_demux_007:sink_channel
	wire         ps2_io_rsp_width_adapter_src_startofpacket;                         // ps2_io_rsp_width_adapter:out_startofpacket -> rsp_demux_007:sink_startofpacket
	wire         ps2_io_rsp_width_adapter_src_endofpacket;                           // ps2_io_rsp_width_adapter:out_endofpacket -> rsp_demux_007:sink_endofpacket
	wire         router_010_src_valid;                                               // router_010:src_valid -> hddext_0x370_io_rsp_width_adapter:in_valid
	wire  [66:0] router_010_src_data;                                                // router_010:src_data -> hddext_0x370_io_rsp_width_adapter:in_data
	wire         router_010_src_ready;                                               // hddext_0x370_io_rsp_width_adapter:in_ready -> router_010:src_ready
	wire  [19:0] router_010_src_channel;                                             // router_010:src_channel -> hddext_0x370_io_rsp_width_adapter:in_channel
	wire         router_010_src_startofpacket;                                       // router_010:src_startofpacket -> hddext_0x370_io_rsp_width_adapter:in_startofpacket
	wire         router_010_src_endofpacket;                                         // router_010:src_endofpacket -> hddext_0x370_io_rsp_width_adapter:in_endofpacket
	wire         hddext_0x370_io_rsp_width_adapter_src_valid;                        // hddext_0x370_io_rsp_width_adapter:out_valid -> rsp_demux_009:sink_valid
	wire  [93:0] hddext_0x370_io_rsp_width_adapter_src_data;                         // hddext_0x370_io_rsp_width_adapter:out_data -> rsp_demux_009:sink_data
	wire         hddext_0x370_io_rsp_width_adapter_src_ready;                        // rsp_demux_009:sink_ready -> hddext_0x370_io_rsp_width_adapter:out_ready
	wire  [19:0] hddext_0x370_io_rsp_width_adapter_src_channel;                      // hddext_0x370_io_rsp_width_adapter:out_channel -> rsp_demux_009:sink_channel
	wire         hddext_0x370_io_rsp_width_adapter_src_startofpacket;                // hddext_0x370_io_rsp_width_adapter:out_startofpacket -> rsp_demux_009:sink_startofpacket
	wire         hddext_0x370_io_rsp_width_adapter_src_endofpacket;                  // hddext_0x370_io_rsp_width_adapter:out_endofpacket -> rsp_demux_009:sink_endofpacket
	wire         router_011_src_valid;                                               // router_011:src_valid -> vga_io_b_rsp_width_adapter:in_valid
	wire  [66:0] router_011_src_data;                                                // router_011:src_data -> vga_io_b_rsp_width_adapter:in_data
	wire         router_011_src_ready;                                               // vga_io_b_rsp_width_adapter:in_ready -> router_011:src_ready
	wire  [19:0] router_011_src_channel;                                             // router_011:src_channel -> vga_io_b_rsp_width_adapter:in_channel
	wire         router_011_src_startofpacket;                                       // router_011:src_startofpacket -> vga_io_b_rsp_width_adapter:in_startofpacket
	wire         router_011_src_endofpacket;                                         // router_011:src_endofpacket -> vga_io_b_rsp_width_adapter:in_endofpacket
	wire         vga_io_b_rsp_width_adapter_src_valid;                               // vga_io_b_rsp_width_adapter:out_valid -> rsp_demux_010:sink_valid
	wire  [93:0] vga_io_b_rsp_width_adapter_src_data;                                // vga_io_b_rsp_width_adapter:out_data -> rsp_demux_010:sink_data
	wire         vga_io_b_rsp_width_adapter_src_ready;                               // rsp_demux_010:sink_ready -> vga_io_b_rsp_width_adapter:out_ready
	wire  [19:0] vga_io_b_rsp_width_adapter_src_channel;                             // vga_io_b_rsp_width_adapter:out_channel -> rsp_demux_010:sink_channel
	wire         vga_io_b_rsp_width_adapter_src_startofpacket;                       // vga_io_b_rsp_width_adapter:out_startofpacket -> rsp_demux_010:sink_startofpacket
	wire         vga_io_b_rsp_width_adapter_src_endofpacket;                         // vga_io_b_rsp_width_adapter:out_endofpacket -> rsp_demux_010:sink_endofpacket
	wire         router_012_src_valid;                                               // router_012:src_valid -> vga_io_c_rsp_width_adapter:in_valid
	wire  [66:0] router_012_src_data;                                                // router_012:src_data -> vga_io_c_rsp_width_adapter:in_data
	wire         router_012_src_ready;                                               // vga_io_c_rsp_width_adapter:in_ready -> router_012:src_ready
	wire  [19:0] router_012_src_channel;                                             // router_012:src_channel -> vga_io_c_rsp_width_adapter:in_channel
	wire         router_012_src_startofpacket;                                       // router_012:src_startofpacket -> vga_io_c_rsp_width_adapter:in_startofpacket
	wire         router_012_src_endofpacket;                                         // router_012:src_endofpacket -> vga_io_c_rsp_width_adapter:in_endofpacket
	wire         vga_io_c_rsp_width_adapter_src_valid;                               // vga_io_c_rsp_width_adapter:out_valid -> rsp_demux_011:sink_valid
	wire  [93:0] vga_io_c_rsp_width_adapter_src_data;                                // vga_io_c_rsp_width_adapter:out_data -> rsp_demux_011:sink_data
	wire         vga_io_c_rsp_width_adapter_src_ready;                               // rsp_demux_011:sink_ready -> vga_io_c_rsp_width_adapter:out_ready
	wire  [19:0] vga_io_c_rsp_width_adapter_src_channel;                             // vga_io_c_rsp_width_adapter:out_channel -> rsp_demux_011:sink_channel
	wire         vga_io_c_rsp_width_adapter_src_startofpacket;                       // vga_io_c_rsp_width_adapter:out_startofpacket -> rsp_demux_011:sink_startofpacket
	wire         vga_io_c_rsp_width_adapter_src_endofpacket;                         // vga_io_c_rsp_width_adapter:out_endofpacket -> rsp_demux_011:sink_endofpacket
	wire         router_013_src_valid;                                               // router_013:src_valid -> vga_io_d_rsp_width_adapter:in_valid
	wire  [66:0] router_013_src_data;                                                // router_013:src_data -> vga_io_d_rsp_width_adapter:in_data
	wire         router_013_src_ready;                                               // vga_io_d_rsp_width_adapter:in_ready -> router_013:src_ready
	wire  [19:0] router_013_src_channel;                                             // router_013:src_channel -> vga_io_d_rsp_width_adapter:in_channel
	wire         router_013_src_startofpacket;                                       // router_013:src_startofpacket -> vga_io_d_rsp_width_adapter:in_startofpacket
	wire         router_013_src_endofpacket;                                         // router_013:src_endofpacket -> vga_io_d_rsp_width_adapter:in_endofpacket
	wire         vga_io_d_rsp_width_adapter_src_valid;                               // vga_io_d_rsp_width_adapter:out_valid -> rsp_demux_012:sink_valid
	wire  [93:0] vga_io_d_rsp_width_adapter_src_data;                                // vga_io_d_rsp_width_adapter:out_data -> rsp_demux_012:sink_data
	wire         vga_io_d_rsp_width_adapter_src_ready;                               // rsp_demux_012:sink_ready -> vga_io_d_rsp_width_adapter:out_ready
	wire  [19:0] vga_io_d_rsp_width_adapter_src_channel;                             // vga_io_d_rsp_width_adapter:out_channel -> rsp_demux_012:sink_channel
	wire         vga_io_d_rsp_width_adapter_src_startofpacket;                       // vga_io_d_rsp_width_adapter:out_startofpacket -> rsp_demux_012:sink_startofpacket
	wire         vga_io_d_rsp_width_adapter_src_endofpacket;                         // vga_io_d_rsp_width_adapter:out_endofpacket -> rsp_demux_012:sink_endofpacket
	wire         router_014_src_valid;                                               // router_014:src_valid -> pc_dma_master_rsp_width_adapter:in_valid
	wire  [66:0] router_014_src_data;                                                // router_014:src_data -> pc_dma_master_rsp_width_adapter:in_data
	wire         router_014_src_ready;                                               // pc_dma_master_rsp_width_adapter:in_ready -> router_014:src_ready
	wire  [19:0] router_014_src_channel;                                             // router_014:src_channel -> pc_dma_master_rsp_width_adapter:in_channel
	wire         router_014_src_startofpacket;                                       // router_014:src_startofpacket -> pc_dma_master_rsp_width_adapter:in_startofpacket
	wire         router_014_src_endofpacket;                                         // router_014:src_endofpacket -> pc_dma_master_rsp_width_adapter:in_endofpacket
	wire         pc_dma_master_rsp_width_adapter_src_valid;                          // pc_dma_master_rsp_width_adapter:out_valid -> rsp_demux_013:sink_valid
	wire  [93:0] pc_dma_master_rsp_width_adapter_src_data;                           // pc_dma_master_rsp_width_adapter:out_data -> rsp_demux_013:sink_data
	wire         pc_dma_master_rsp_width_adapter_src_ready;                          // rsp_demux_013:sink_ready -> pc_dma_master_rsp_width_adapter:out_ready
	wire  [19:0] pc_dma_master_rsp_width_adapter_src_channel;                        // pc_dma_master_rsp_width_adapter:out_channel -> rsp_demux_013:sink_channel
	wire         pc_dma_master_rsp_width_adapter_src_startofpacket;                  // pc_dma_master_rsp_width_adapter:out_startofpacket -> rsp_demux_013:sink_startofpacket
	wire         pc_dma_master_rsp_width_adapter_src_endofpacket;                    // pc_dma_master_rsp_width_adapter:out_endofpacket -> rsp_demux_013:sink_endofpacket
	wire         router_015_src_valid;                                               // router_015:src_valid -> pic_master_rsp_width_adapter:in_valid
	wire  [66:0] router_015_src_data;                                                // router_015:src_data -> pic_master_rsp_width_adapter:in_data
	wire         router_015_src_ready;                                               // pic_master_rsp_width_adapter:in_ready -> router_015:src_ready
	wire  [19:0] router_015_src_channel;                                             // router_015:src_channel -> pic_master_rsp_width_adapter:in_channel
	wire         router_015_src_startofpacket;                                       // router_015:src_startofpacket -> pic_master_rsp_width_adapter:in_startofpacket
	wire         router_015_src_endofpacket;                                         // router_015:src_endofpacket -> pic_master_rsp_width_adapter:in_endofpacket
	wire         pic_master_rsp_width_adapter_src_valid;                             // pic_master_rsp_width_adapter:out_valid -> rsp_demux_014:sink_valid
	wire  [93:0] pic_master_rsp_width_adapter_src_data;                              // pic_master_rsp_width_adapter:out_data -> rsp_demux_014:sink_data
	wire         pic_master_rsp_width_adapter_src_ready;                             // rsp_demux_014:sink_ready -> pic_master_rsp_width_adapter:out_ready
	wire  [19:0] pic_master_rsp_width_adapter_src_channel;                           // pic_master_rsp_width_adapter:out_channel -> rsp_demux_014:sink_channel
	wire         pic_master_rsp_width_adapter_src_startofpacket;                     // pic_master_rsp_width_adapter:out_startofpacket -> rsp_demux_014:sink_startofpacket
	wire         pic_master_rsp_width_adapter_src_endofpacket;                       // pic_master_rsp_width_adapter:out_endofpacket -> rsp_demux_014:sink_endofpacket
	wire         router_016_src_valid;                                               // router_016:src_valid -> sound_mpu_rsp_width_adapter:in_valid
	wire  [66:0] router_016_src_data;                                                // router_016:src_data -> sound_mpu_rsp_width_adapter:in_data
	wire         router_016_src_ready;                                               // sound_mpu_rsp_width_adapter:in_ready -> router_016:src_ready
	wire  [19:0] router_016_src_channel;                                             // router_016:src_channel -> sound_mpu_rsp_width_adapter:in_channel
	wire         router_016_src_startofpacket;                                       // router_016:src_startofpacket -> sound_mpu_rsp_width_adapter:in_startofpacket
	wire         router_016_src_endofpacket;                                         // router_016:src_endofpacket -> sound_mpu_rsp_width_adapter:in_endofpacket
	wire         sound_mpu_rsp_width_adapter_src_valid;                              // sound_mpu_rsp_width_adapter:out_valid -> rsp_demux_015:sink_valid
	wire  [93:0] sound_mpu_rsp_width_adapter_src_data;                               // sound_mpu_rsp_width_adapter:out_data -> rsp_demux_015:sink_data
	wire         sound_mpu_rsp_width_adapter_src_ready;                              // rsp_demux_015:sink_ready -> sound_mpu_rsp_width_adapter:out_ready
	wire  [19:0] sound_mpu_rsp_width_adapter_src_channel;                            // sound_mpu_rsp_width_adapter:out_channel -> rsp_demux_015:sink_channel
	wire         sound_mpu_rsp_width_adapter_src_startofpacket;                      // sound_mpu_rsp_width_adapter:out_startofpacket -> rsp_demux_015:sink_startofpacket
	wire         sound_mpu_rsp_width_adapter_src_endofpacket;                        // sound_mpu_rsp_width_adapter:out_endofpacket -> rsp_demux_015:sink_endofpacket
	wire         router_017_src_valid;                                               // router_017:src_valid -> pc_dma_page_rsp_width_adapter:in_valid
	wire  [66:0] router_017_src_data;                                                // router_017:src_data -> pc_dma_page_rsp_width_adapter:in_data
	wire         router_017_src_ready;                                               // pc_dma_page_rsp_width_adapter:in_ready -> router_017:src_ready
	wire  [19:0] router_017_src_channel;                                             // router_017:src_channel -> pc_dma_page_rsp_width_adapter:in_channel
	wire         router_017_src_startofpacket;                                       // router_017:src_startofpacket -> pc_dma_page_rsp_width_adapter:in_startofpacket
	wire         router_017_src_endofpacket;                                         // router_017:src_endofpacket -> pc_dma_page_rsp_width_adapter:in_endofpacket
	wire         pc_dma_page_rsp_width_adapter_src_valid;                            // pc_dma_page_rsp_width_adapter:out_valid -> rsp_demux_016:sink_valid
	wire  [93:0] pc_dma_page_rsp_width_adapter_src_data;                             // pc_dma_page_rsp_width_adapter:out_data -> rsp_demux_016:sink_data
	wire         pc_dma_page_rsp_width_adapter_src_ready;                            // rsp_demux_016:sink_ready -> pc_dma_page_rsp_width_adapter:out_ready
	wire  [19:0] pc_dma_page_rsp_width_adapter_src_channel;                          // pc_dma_page_rsp_width_adapter:out_channel -> rsp_demux_016:sink_channel
	wire         pc_dma_page_rsp_width_adapter_src_startofpacket;                    // pc_dma_page_rsp_width_adapter:out_startofpacket -> rsp_demux_016:sink_startofpacket
	wire         pc_dma_page_rsp_width_adapter_src_endofpacket;                      // pc_dma_page_rsp_width_adapter:out_endofpacket -> rsp_demux_016:sink_endofpacket
	wire         router_018_src_valid;                                               // router_018:src_valid -> pc_dma_slave_rsp_width_adapter:in_valid
	wire  [66:0] router_018_src_data;                                                // router_018:src_data -> pc_dma_slave_rsp_width_adapter:in_data
	wire         router_018_src_ready;                                               // pc_dma_slave_rsp_width_adapter:in_ready -> router_018:src_ready
	wire  [19:0] router_018_src_channel;                                             // router_018:src_channel -> pc_dma_slave_rsp_width_adapter:in_channel
	wire         router_018_src_startofpacket;                                       // router_018:src_startofpacket -> pc_dma_slave_rsp_width_adapter:in_startofpacket
	wire         router_018_src_endofpacket;                                         // router_018:src_endofpacket -> pc_dma_slave_rsp_width_adapter:in_endofpacket
	wire         pc_dma_slave_rsp_width_adapter_src_valid;                           // pc_dma_slave_rsp_width_adapter:out_valid -> rsp_demux_017:sink_valid
	wire  [93:0] pc_dma_slave_rsp_width_adapter_src_data;                            // pc_dma_slave_rsp_width_adapter:out_data -> rsp_demux_017:sink_data
	wire         pc_dma_slave_rsp_width_adapter_src_ready;                           // rsp_demux_017:sink_ready -> pc_dma_slave_rsp_width_adapter:out_ready
	wire  [19:0] pc_dma_slave_rsp_width_adapter_src_channel;                         // pc_dma_slave_rsp_width_adapter:out_channel -> rsp_demux_017:sink_channel
	wire         pc_dma_slave_rsp_width_adapter_src_startofpacket;                   // pc_dma_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_017:sink_startofpacket
	wire         pc_dma_slave_rsp_width_adapter_src_endofpacket;                     // pc_dma_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_017:sink_endofpacket
	wire         router_019_src_valid;                                               // router_019:src_valid -> pic_slave_rsp_width_adapter:in_valid
	wire  [66:0] router_019_src_data;                                                // router_019:src_data -> pic_slave_rsp_width_adapter:in_data
	wire         router_019_src_ready;                                               // pic_slave_rsp_width_adapter:in_ready -> router_019:src_ready
	wire  [19:0] router_019_src_channel;                                             // router_019:src_channel -> pic_slave_rsp_width_adapter:in_channel
	wire         router_019_src_startofpacket;                                       // router_019:src_startofpacket -> pic_slave_rsp_width_adapter:in_startofpacket
	wire         router_019_src_endofpacket;                                         // router_019:src_endofpacket -> pic_slave_rsp_width_adapter:in_endofpacket
	wire         pic_slave_rsp_width_adapter_src_valid;                              // pic_slave_rsp_width_adapter:out_valid -> rsp_demux_018:sink_valid
	wire  [93:0] pic_slave_rsp_width_adapter_src_data;                               // pic_slave_rsp_width_adapter:out_data -> rsp_demux_018:sink_data
	wire         pic_slave_rsp_width_adapter_src_ready;                              // rsp_demux_018:sink_ready -> pic_slave_rsp_width_adapter:out_ready
	wire  [19:0] pic_slave_rsp_width_adapter_src_channel;                            // pic_slave_rsp_width_adapter:out_channel -> rsp_demux_018:sink_channel
	wire         pic_slave_rsp_width_adapter_src_startofpacket;                      // pic_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_018:sink_startofpacket
	wire         pic_slave_rsp_width_adapter_src_endofpacket;                        // pic_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_018:sink_endofpacket
	wire         router_020_src_valid;                                               // router_020:src_valid -> ps2_sysctl_rsp_width_adapter:in_valid
	wire  [66:0] router_020_src_data;                                                // router_020:src_data -> ps2_sysctl_rsp_width_adapter:in_data
	wire         router_020_src_ready;                                               // ps2_sysctl_rsp_width_adapter:in_ready -> router_020:src_ready
	wire  [19:0] router_020_src_channel;                                             // router_020:src_channel -> ps2_sysctl_rsp_width_adapter:in_channel
	wire         router_020_src_startofpacket;                                       // router_020:src_startofpacket -> ps2_sysctl_rsp_width_adapter:in_startofpacket
	wire         router_020_src_endofpacket;                                         // router_020:src_endofpacket -> ps2_sysctl_rsp_width_adapter:in_endofpacket
	wire         ps2_sysctl_rsp_width_adapter_src_valid;                             // ps2_sysctl_rsp_width_adapter:out_valid -> rsp_demux_019:sink_valid
	wire  [93:0] ps2_sysctl_rsp_width_adapter_src_data;                              // ps2_sysctl_rsp_width_adapter:out_data -> rsp_demux_019:sink_data
	wire         ps2_sysctl_rsp_width_adapter_src_ready;                             // rsp_demux_019:sink_ready -> ps2_sysctl_rsp_width_adapter:out_ready
	wire  [19:0] ps2_sysctl_rsp_width_adapter_src_channel;                           // ps2_sysctl_rsp_width_adapter:out_channel -> rsp_demux_019:sink_channel
	wire         ps2_sysctl_rsp_width_adapter_src_startofpacket;                     // ps2_sysctl_rsp_width_adapter:out_startofpacket -> rsp_demux_019:sink_startofpacket
	wire         ps2_sysctl_rsp_width_adapter_src_endofpacket;                       // ps2_sysctl_rsp_width_adapter:out_endofpacket -> rsp_demux_019:sink_endofpacket
	wire         cmd_mux_src_valid;                                                  // cmd_mux:src_valid -> sound_fm_cmd_width_adapter:in_valid
	wire  [93:0] cmd_mux_src_data;                                                   // cmd_mux:src_data -> sound_fm_cmd_width_adapter:in_data
	wire         cmd_mux_src_ready;                                                  // sound_fm_cmd_width_adapter:in_ready -> cmd_mux:src_ready
	wire  [19:0] cmd_mux_src_channel;                                                // cmd_mux:src_channel -> sound_fm_cmd_width_adapter:in_channel
	wire         cmd_mux_src_startofpacket;                                          // cmd_mux:src_startofpacket -> sound_fm_cmd_width_adapter:in_startofpacket
	wire         cmd_mux_src_endofpacket;                                            // cmd_mux:src_endofpacket -> sound_fm_cmd_width_adapter:in_endofpacket
	wire         sound_fm_cmd_width_adapter_src_valid;                               // sound_fm_cmd_width_adapter:out_valid -> sound_fm_burst_adapter:sink0_valid
	wire  [66:0] sound_fm_cmd_width_adapter_src_data;                                // sound_fm_cmd_width_adapter:out_data -> sound_fm_burst_adapter:sink0_data
	wire         sound_fm_cmd_width_adapter_src_ready;                               // sound_fm_burst_adapter:sink0_ready -> sound_fm_cmd_width_adapter:out_ready
	wire  [19:0] sound_fm_cmd_width_adapter_src_channel;                             // sound_fm_cmd_width_adapter:out_channel -> sound_fm_burst_adapter:sink0_channel
	wire         sound_fm_cmd_width_adapter_src_startofpacket;                       // sound_fm_cmd_width_adapter:out_startofpacket -> sound_fm_burst_adapter:sink0_startofpacket
	wire         sound_fm_cmd_width_adapter_src_endofpacket;                         // sound_fm_cmd_width_adapter:out_endofpacket -> sound_fm_burst_adapter:sink0_endofpacket
	wire         cmd_mux_001_src_valid;                                              // cmd_mux_001:src_valid -> width_trans_in_cmd_width_adapter:in_valid
	wire  [93:0] cmd_mux_001_src_data;                                               // cmd_mux_001:src_data -> width_trans_in_cmd_width_adapter:in_data
	wire         cmd_mux_001_src_ready;                                              // width_trans_in_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire  [19:0] cmd_mux_001_src_channel;                                            // cmd_mux_001:src_channel -> width_trans_in_cmd_width_adapter:in_channel
	wire         cmd_mux_001_src_startofpacket;                                      // cmd_mux_001:src_startofpacket -> width_trans_in_cmd_width_adapter:in_startofpacket
	wire         cmd_mux_001_src_endofpacket;                                        // cmd_mux_001:src_endofpacket -> width_trans_in_cmd_width_adapter:in_endofpacket
	wire         width_trans_in_cmd_width_adapter_src_valid;                         // width_trans_in_cmd_width_adapter:out_valid -> width_trans_in_burst_adapter:sink0_valid
	wire  [66:0] width_trans_in_cmd_width_adapter_src_data;                          // width_trans_in_cmd_width_adapter:out_data -> width_trans_in_burst_adapter:sink0_data
	wire         width_trans_in_cmd_width_adapter_src_ready;                         // width_trans_in_burst_adapter:sink0_ready -> width_trans_in_cmd_width_adapter:out_ready
	wire  [19:0] width_trans_in_cmd_width_adapter_src_channel;                       // width_trans_in_cmd_width_adapter:out_channel -> width_trans_in_burst_adapter:sink0_channel
	wire         width_trans_in_cmd_width_adapter_src_startofpacket;                 // width_trans_in_cmd_width_adapter:out_startofpacket -> width_trans_in_burst_adapter:sink0_startofpacket
	wire         width_trans_in_cmd_width_adapter_src_endofpacket;                   // width_trans_in_cmd_width_adapter:out_endofpacket -> width_trans_in_burst_adapter:sink0_endofpacket
	wire         cmd_mux_002_src_valid;                                              // cmd_mux_002:src_valid -> sound_io_cmd_width_adapter:in_valid
	wire  [93:0] cmd_mux_002_src_data;                                               // cmd_mux_002:src_data -> sound_io_cmd_width_adapter:in_data
	wire         cmd_mux_002_src_ready;                                              // sound_io_cmd_width_adapter:in_ready -> cmd_mux_002:src_ready
	wire  [19:0] cmd_mux_002_src_channel;                                            // cmd_mux_002:src_channel -> sound_io_cmd_width_adapter:in_channel
	wire         cmd_mux_002_src_startofpacket;                                      // cmd_mux_002:src_startofpacket -> sound_io_cmd_width_adapter:in_startofpacket
	wire         cmd_mux_002_src_endofpacket;                                        // cmd_mux_002:src_endofpacket -> sound_io_cmd_width_adapter:in_endofpacket
	wire         sound_io_cmd_width_adapter_src_valid;                               // sound_io_cmd_width_adapter:out_valid -> sound_io_burst_adapter:sink0_valid
	wire  [66:0] sound_io_cmd_width_adapter_src_data;                                // sound_io_cmd_width_adapter:out_data -> sound_io_burst_adapter:sink0_data
	wire         sound_io_cmd_width_adapter_src_ready;                               // sound_io_burst_adapter:sink0_ready -> sound_io_cmd_width_adapter:out_ready
	wire  [19:0] sound_io_cmd_width_adapter_src_channel;                             // sound_io_cmd_width_adapter:out_channel -> sound_io_burst_adapter:sink0_channel
	wire         sound_io_cmd_width_adapter_src_startofpacket;                       // sound_io_cmd_width_adapter:out_startofpacket -> sound_io_burst_adapter:sink0_startofpacket
	wire         sound_io_cmd_width_adapter_src_endofpacket;                         // sound_io_cmd_width_adapter:out_endofpacket -> sound_io_burst_adapter:sink0_endofpacket
	wire         cmd_mux_003_src_valid;                                              // cmd_mux_003:src_valid -> rtc_io_cmd_width_adapter:in_valid
	wire  [93:0] cmd_mux_003_src_data;                                               // cmd_mux_003:src_data -> rtc_io_cmd_width_adapter:in_data
	wire         cmd_mux_003_src_ready;                                              // rtc_io_cmd_width_adapter:in_ready -> cmd_mux_003:src_ready
	wire  [19:0] cmd_mux_003_src_channel;                                            // cmd_mux_003:src_channel -> rtc_io_cmd_width_adapter:in_channel
	wire         cmd_mux_003_src_startofpacket;                                      // cmd_mux_003:src_startofpacket -> rtc_io_cmd_width_adapter:in_startofpacket
	wire         cmd_mux_003_src_endofpacket;                                        // cmd_mux_003:src_endofpacket -> rtc_io_cmd_width_adapter:in_endofpacket
	wire         rtc_io_cmd_width_adapter_src_valid;                                 // rtc_io_cmd_width_adapter:out_valid -> rtc_io_burst_adapter:sink0_valid
	wire  [66:0] rtc_io_cmd_width_adapter_src_data;                                  // rtc_io_cmd_width_adapter:out_data -> rtc_io_burst_adapter:sink0_data
	wire         rtc_io_cmd_width_adapter_src_ready;                                 // rtc_io_burst_adapter:sink0_ready -> rtc_io_cmd_width_adapter:out_ready
	wire  [19:0] rtc_io_cmd_width_adapter_src_channel;                               // rtc_io_cmd_width_adapter:out_channel -> rtc_io_burst_adapter:sink0_channel
	wire         rtc_io_cmd_width_adapter_src_startofpacket;                         // rtc_io_cmd_width_adapter:out_startofpacket -> rtc_io_burst_adapter:sink0_startofpacket
	wire         rtc_io_cmd_width_adapter_src_endofpacket;                           // rtc_io_cmd_width_adapter:out_endofpacket -> rtc_io_burst_adapter:sink0_endofpacket
	wire         cmd_mux_004_src_valid;                                              // cmd_mux_004:src_valid -> pit_io_cmd_width_adapter:in_valid
	wire  [93:0] cmd_mux_004_src_data;                                               // cmd_mux_004:src_data -> pit_io_cmd_width_adapter:in_data
	wire         cmd_mux_004_src_ready;                                              // pit_io_cmd_width_adapter:in_ready -> cmd_mux_004:src_ready
	wire  [19:0] cmd_mux_004_src_channel;                                            // cmd_mux_004:src_channel -> pit_io_cmd_width_adapter:in_channel
	wire         cmd_mux_004_src_startofpacket;                                      // cmd_mux_004:src_startofpacket -> pit_io_cmd_width_adapter:in_startofpacket
	wire         cmd_mux_004_src_endofpacket;                                        // cmd_mux_004:src_endofpacket -> pit_io_cmd_width_adapter:in_endofpacket
	wire         pit_io_cmd_width_adapter_src_valid;                                 // pit_io_cmd_width_adapter:out_valid -> pit_io_burst_adapter:sink0_valid
	wire  [66:0] pit_io_cmd_width_adapter_src_data;                                  // pit_io_cmd_width_adapter:out_data -> pit_io_burst_adapter:sink0_data
	wire         pit_io_cmd_width_adapter_src_ready;                                 // pit_io_burst_adapter:sink0_ready -> pit_io_cmd_width_adapter:out_ready
	wire  [19:0] pit_io_cmd_width_adapter_src_channel;                               // pit_io_cmd_width_adapter:out_channel -> pit_io_burst_adapter:sink0_channel
	wire         pit_io_cmd_width_adapter_src_startofpacket;                         // pit_io_cmd_width_adapter:out_startofpacket -> pit_io_burst_adapter:sink0_startofpacket
	wire         pit_io_cmd_width_adapter_src_endofpacket;                           // pit_io_cmd_width_adapter:out_endofpacket -> pit_io_burst_adapter:sink0_endofpacket
	wire         cmd_mux_006_src_valid;                                              // cmd_mux_006:src_valid -> floppy0_io_cmd_width_adapter:in_valid
	wire  [93:0] cmd_mux_006_src_data;                                               // cmd_mux_006:src_data -> floppy0_io_cmd_width_adapter:in_data
	wire         cmd_mux_006_src_ready;                                              // floppy0_io_cmd_width_adapter:in_ready -> cmd_mux_006:src_ready
	wire  [19:0] cmd_mux_006_src_channel;                                            // cmd_mux_006:src_channel -> floppy0_io_cmd_width_adapter:in_channel
	wire         cmd_mux_006_src_startofpacket;                                      // cmd_mux_006:src_startofpacket -> floppy0_io_cmd_width_adapter:in_startofpacket
	wire         cmd_mux_006_src_endofpacket;                                        // cmd_mux_006:src_endofpacket -> floppy0_io_cmd_width_adapter:in_endofpacket
	wire         floppy0_io_cmd_width_adapter_src_valid;                             // floppy0_io_cmd_width_adapter:out_valid -> floppy0_io_burst_adapter:sink0_valid
	wire  [66:0] floppy0_io_cmd_width_adapter_src_data;                              // floppy0_io_cmd_width_adapter:out_data -> floppy0_io_burst_adapter:sink0_data
	wire         floppy0_io_cmd_width_adapter_src_ready;                             // floppy0_io_burst_adapter:sink0_ready -> floppy0_io_cmd_width_adapter:out_ready
	wire  [19:0] floppy0_io_cmd_width_adapter_src_channel;                           // floppy0_io_cmd_width_adapter:out_channel -> floppy0_io_burst_adapter:sink0_channel
	wire         floppy0_io_cmd_width_adapter_src_startofpacket;                     // floppy0_io_cmd_width_adapter:out_startofpacket -> floppy0_io_burst_adapter:sink0_startofpacket
	wire         floppy0_io_cmd_width_adapter_src_endofpacket;                       // floppy0_io_cmd_width_adapter:out_endofpacket -> floppy0_io_burst_adapter:sink0_endofpacket
	wire         cmd_mux_007_src_valid;                                              // cmd_mux_007:src_valid -> ps2_io_cmd_width_adapter:in_valid
	wire  [93:0] cmd_mux_007_src_data;                                               // cmd_mux_007:src_data -> ps2_io_cmd_width_adapter:in_data
	wire         cmd_mux_007_src_ready;                                              // ps2_io_cmd_width_adapter:in_ready -> cmd_mux_007:src_ready
	wire  [19:0] cmd_mux_007_src_channel;                                            // cmd_mux_007:src_channel -> ps2_io_cmd_width_adapter:in_channel
	wire         cmd_mux_007_src_startofpacket;                                      // cmd_mux_007:src_startofpacket -> ps2_io_cmd_width_adapter:in_startofpacket
	wire         cmd_mux_007_src_endofpacket;                                        // cmd_mux_007:src_endofpacket -> ps2_io_cmd_width_adapter:in_endofpacket
	wire         ps2_io_cmd_width_adapter_src_valid;                                 // ps2_io_cmd_width_adapter:out_valid -> ps2_io_burst_adapter:sink0_valid
	wire  [66:0] ps2_io_cmd_width_adapter_src_data;                                  // ps2_io_cmd_width_adapter:out_data -> ps2_io_burst_adapter:sink0_data
	wire         ps2_io_cmd_width_adapter_src_ready;                                 // ps2_io_burst_adapter:sink0_ready -> ps2_io_cmd_width_adapter:out_ready
	wire  [19:0] ps2_io_cmd_width_adapter_src_channel;                               // ps2_io_cmd_width_adapter:out_channel -> ps2_io_burst_adapter:sink0_channel
	wire         ps2_io_cmd_width_adapter_src_startofpacket;                         // ps2_io_cmd_width_adapter:out_startofpacket -> ps2_io_burst_adapter:sink0_startofpacket
	wire         ps2_io_cmd_width_adapter_src_endofpacket;                           // ps2_io_cmd_width_adapter:out_endofpacket -> ps2_io_burst_adapter:sink0_endofpacket
	wire         cmd_mux_009_src_valid;                                              // cmd_mux_009:src_valid -> hddext_0x370_io_cmd_width_adapter:in_valid
	wire  [93:0] cmd_mux_009_src_data;                                               // cmd_mux_009:src_data -> hddext_0x370_io_cmd_width_adapter:in_data
	wire         cmd_mux_009_src_ready;                                              // hddext_0x370_io_cmd_width_adapter:in_ready -> cmd_mux_009:src_ready
	wire  [19:0] cmd_mux_009_src_channel;                                            // cmd_mux_009:src_channel -> hddext_0x370_io_cmd_width_adapter:in_channel
	wire         cmd_mux_009_src_startofpacket;                                      // cmd_mux_009:src_startofpacket -> hddext_0x370_io_cmd_width_adapter:in_startofpacket
	wire         cmd_mux_009_src_endofpacket;                                        // cmd_mux_009:src_endofpacket -> hddext_0x370_io_cmd_width_adapter:in_endofpacket
	wire         hddext_0x370_io_cmd_width_adapter_src_valid;                        // hddext_0x370_io_cmd_width_adapter:out_valid -> hddext_0x370_io_burst_adapter:sink0_valid
	wire  [66:0] hddext_0x370_io_cmd_width_adapter_src_data;                         // hddext_0x370_io_cmd_width_adapter:out_data -> hddext_0x370_io_burst_adapter:sink0_data
	wire         hddext_0x370_io_cmd_width_adapter_src_ready;                        // hddext_0x370_io_burst_adapter:sink0_ready -> hddext_0x370_io_cmd_width_adapter:out_ready
	wire  [19:0] hddext_0x370_io_cmd_width_adapter_src_channel;                      // hddext_0x370_io_cmd_width_adapter:out_channel -> hddext_0x370_io_burst_adapter:sink0_channel
	wire         hddext_0x370_io_cmd_width_adapter_src_startofpacket;                // hddext_0x370_io_cmd_width_adapter:out_startofpacket -> hddext_0x370_io_burst_adapter:sink0_startofpacket
	wire         hddext_0x370_io_cmd_width_adapter_src_endofpacket;                  // hddext_0x370_io_cmd_width_adapter:out_endofpacket -> hddext_0x370_io_burst_adapter:sink0_endofpacket
	wire         cmd_mux_010_src_valid;                                              // cmd_mux_010:src_valid -> vga_io_b_cmd_width_adapter:in_valid
	wire  [93:0] cmd_mux_010_src_data;                                               // cmd_mux_010:src_data -> vga_io_b_cmd_width_adapter:in_data
	wire         cmd_mux_010_src_ready;                                              // vga_io_b_cmd_width_adapter:in_ready -> cmd_mux_010:src_ready
	wire  [19:0] cmd_mux_010_src_channel;                                            // cmd_mux_010:src_channel -> vga_io_b_cmd_width_adapter:in_channel
	wire         cmd_mux_010_src_startofpacket;                                      // cmd_mux_010:src_startofpacket -> vga_io_b_cmd_width_adapter:in_startofpacket
	wire         cmd_mux_010_src_endofpacket;                                        // cmd_mux_010:src_endofpacket -> vga_io_b_cmd_width_adapter:in_endofpacket
	wire         vga_io_b_cmd_width_adapter_src_valid;                               // vga_io_b_cmd_width_adapter:out_valid -> vga_io_b_burst_adapter:sink0_valid
	wire  [66:0] vga_io_b_cmd_width_adapter_src_data;                                // vga_io_b_cmd_width_adapter:out_data -> vga_io_b_burst_adapter:sink0_data
	wire         vga_io_b_cmd_width_adapter_src_ready;                               // vga_io_b_burst_adapter:sink0_ready -> vga_io_b_cmd_width_adapter:out_ready
	wire  [19:0] vga_io_b_cmd_width_adapter_src_channel;                             // vga_io_b_cmd_width_adapter:out_channel -> vga_io_b_burst_adapter:sink0_channel
	wire         vga_io_b_cmd_width_adapter_src_startofpacket;                       // vga_io_b_cmd_width_adapter:out_startofpacket -> vga_io_b_burst_adapter:sink0_startofpacket
	wire         vga_io_b_cmd_width_adapter_src_endofpacket;                         // vga_io_b_cmd_width_adapter:out_endofpacket -> vga_io_b_burst_adapter:sink0_endofpacket
	wire         cmd_mux_011_src_valid;                                              // cmd_mux_011:src_valid -> vga_io_c_cmd_width_adapter:in_valid
	wire  [93:0] cmd_mux_011_src_data;                                               // cmd_mux_011:src_data -> vga_io_c_cmd_width_adapter:in_data
	wire         cmd_mux_011_src_ready;                                              // vga_io_c_cmd_width_adapter:in_ready -> cmd_mux_011:src_ready
	wire  [19:0] cmd_mux_011_src_channel;                                            // cmd_mux_011:src_channel -> vga_io_c_cmd_width_adapter:in_channel
	wire         cmd_mux_011_src_startofpacket;                                      // cmd_mux_011:src_startofpacket -> vga_io_c_cmd_width_adapter:in_startofpacket
	wire         cmd_mux_011_src_endofpacket;                                        // cmd_mux_011:src_endofpacket -> vga_io_c_cmd_width_adapter:in_endofpacket
	wire         vga_io_c_cmd_width_adapter_src_valid;                               // vga_io_c_cmd_width_adapter:out_valid -> vga_io_c_burst_adapter:sink0_valid
	wire  [66:0] vga_io_c_cmd_width_adapter_src_data;                                // vga_io_c_cmd_width_adapter:out_data -> vga_io_c_burst_adapter:sink0_data
	wire         vga_io_c_cmd_width_adapter_src_ready;                               // vga_io_c_burst_adapter:sink0_ready -> vga_io_c_cmd_width_adapter:out_ready
	wire  [19:0] vga_io_c_cmd_width_adapter_src_channel;                             // vga_io_c_cmd_width_adapter:out_channel -> vga_io_c_burst_adapter:sink0_channel
	wire         vga_io_c_cmd_width_adapter_src_startofpacket;                       // vga_io_c_cmd_width_adapter:out_startofpacket -> vga_io_c_burst_adapter:sink0_startofpacket
	wire         vga_io_c_cmd_width_adapter_src_endofpacket;                         // vga_io_c_cmd_width_adapter:out_endofpacket -> vga_io_c_burst_adapter:sink0_endofpacket
	wire         cmd_mux_012_src_valid;                                              // cmd_mux_012:src_valid -> vga_io_d_cmd_width_adapter:in_valid
	wire  [93:0] cmd_mux_012_src_data;                                               // cmd_mux_012:src_data -> vga_io_d_cmd_width_adapter:in_data
	wire         cmd_mux_012_src_ready;                                              // vga_io_d_cmd_width_adapter:in_ready -> cmd_mux_012:src_ready
	wire  [19:0] cmd_mux_012_src_channel;                                            // cmd_mux_012:src_channel -> vga_io_d_cmd_width_adapter:in_channel
	wire         cmd_mux_012_src_startofpacket;                                      // cmd_mux_012:src_startofpacket -> vga_io_d_cmd_width_adapter:in_startofpacket
	wire         cmd_mux_012_src_endofpacket;                                        // cmd_mux_012:src_endofpacket -> vga_io_d_cmd_width_adapter:in_endofpacket
	wire         vga_io_d_cmd_width_adapter_src_valid;                               // vga_io_d_cmd_width_adapter:out_valid -> vga_io_d_burst_adapter:sink0_valid
	wire  [66:0] vga_io_d_cmd_width_adapter_src_data;                                // vga_io_d_cmd_width_adapter:out_data -> vga_io_d_burst_adapter:sink0_data
	wire         vga_io_d_cmd_width_adapter_src_ready;                               // vga_io_d_burst_adapter:sink0_ready -> vga_io_d_cmd_width_adapter:out_ready
	wire  [19:0] vga_io_d_cmd_width_adapter_src_channel;                             // vga_io_d_cmd_width_adapter:out_channel -> vga_io_d_burst_adapter:sink0_channel
	wire         vga_io_d_cmd_width_adapter_src_startofpacket;                       // vga_io_d_cmd_width_adapter:out_startofpacket -> vga_io_d_burst_adapter:sink0_startofpacket
	wire         vga_io_d_cmd_width_adapter_src_endofpacket;                         // vga_io_d_cmd_width_adapter:out_endofpacket -> vga_io_d_burst_adapter:sink0_endofpacket
	wire         cmd_mux_013_src_valid;                                              // cmd_mux_013:src_valid -> pc_dma_master_cmd_width_adapter:in_valid
	wire  [93:0] cmd_mux_013_src_data;                                               // cmd_mux_013:src_data -> pc_dma_master_cmd_width_adapter:in_data
	wire         cmd_mux_013_src_ready;                                              // pc_dma_master_cmd_width_adapter:in_ready -> cmd_mux_013:src_ready
	wire  [19:0] cmd_mux_013_src_channel;                                            // cmd_mux_013:src_channel -> pc_dma_master_cmd_width_adapter:in_channel
	wire         cmd_mux_013_src_startofpacket;                                      // cmd_mux_013:src_startofpacket -> pc_dma_master_cmd_width_adapter:in_startofpacket
	wire         cmd_mux_013_src_endofpacket;                                        // cmd_mux_013:src_endofpacket -> pc_dma_master_cmd_width_adapter:in_endofpacket
	wire         pc_dma_master_cmd_width_adapter_src_valid;                          // pc_dma_master_cmd_width_adapter:out_valid -> pc_dma_master_burst_adapter:sink0_valid
	wire  [66:0] pc_dma_master_cmd_width_adapter_src_data;                           // pc_dma_master_cmd_width_adapter:out_data -> pc_dma_master_burst_adapter:sink0_data
	wire         pc_dma_master_cmd_width_adapter_src_ready;                          // pc_dma_master_burst_adapter:sink0_ready -> pc_dma_master_cmd_width_adapter:out_ready
	wire  [19:0] pc_dma_master_cmd_width_adapter_src_channel;                        // pc_dma_master_cmd_width_adapter:out_channel -> pc_dma_master_burst_adapter:sink0_channel
	wire         pc_dma_master_cmd_width_adapter_src_startofpacket;                  // pc_dma_master_cmd_width_adapter:out_startofpacket -> pc_dma_master_burst_adapter:sink0_startofpacket
	wire         pc_dma_master_cmd_width_adapter_src_endofpacket;                    // pc_dma_master_cmd_width_adapter:out_endofpacket -> pc_dma_master_burst_adapter:sink0_endofpacket
	wire         cmd_mux_014_src_valid;                                              // cmd_mux_014:src_valid -> pic_master_cmd_width_adapter:in_valid
	wire  [93:0] cmd_mux_014_src_data;                                               // cmd_mux_014:src_data -> pic_master_cmd_width_adapter:in_data
	wire         cmd_mux_014_src_ready;                                              // pic_master_cmd_width_adapter:in_ready -> cmd_mux_014:src_ready
	wire  [19:0] cmd_mux_014_src_channel;                                            // cmd_mux_014:src_channel -> pic_master_cmd_width_adapter:in_channel
	wire         cmd_mux_014_src_startofpacket;                                      // cmd_mux_014:src_startofpacket -> pic_master_cmd_width_adapter:in_startofpacket
	wire         cmd_mux_014_src_endofpacket;                                        // cmd_mux_014:src_endofpacket -> pic_master_cmd_width_adapter:in_endofpacket
	wire         pic_master_cmd_width_adapter_src_valid;                             // pic_master_cmd_width_adapter:out_valid -> pic_master_burst_adapter:sink0_valid
	wire  [66:0] pic_master_cmd_width_adapter_src_data;                              // pic_master_cmd_width_adapter:out_data -> pic_master_burst_adapter:sink0_data
	wire         pic_master_cmd_width_adapter_src_ready;                             // pic_master_burst_adapter:sink0_ready -> pic_master_cmd_width_adapter:out_ready
	wire  [19:0] pic_master_cmd_width_adapter_src_channel;                           // pic_master_cmd_width_adapter:out_channel -> pic_master_burst_adapter:sink0_channel
	wire         pic_master_cmd_width_adapter_src_startofpacket;                     // pic_master_cmd_width_adapter:out_startofpacket -> pic_master_burst_adapter:sink0_startofpacket
	wire         pic_master_cmd_width_adapter_src_endofpacket;                       // pic_master_cmd_width_adapter:out_endofpacket -> pic_master_burst_adapter:sink0_endofpacket
	wire         cmd_mux_015_src_valid;                                              // cmd_mux_015:src_valid -> sound_mpu_cmd_width_adapter:in_valid
	wire  [93:0] cmd_mux_015_src_data;                                               // cmd_mux_015:src_data -> sound_mpu_cmd_width_adapter:in_data
	wire         cmd_mux_015_src_ready;                                              // sound_mpu_cmd_width_adapter:in_ready -> cmd_mux_015:src_ready
	wire  [19:0] cmd_mux_015_src_channel;                                            // cmd_mux_015:src_channel -> sound_mpu_cmd_width_adapter:in_channel
	wire         cmd_mux_015_src_startofpacket;                                      // cmd_mux_015:src_startofpacket -> sound_mpu_cmd_width_adapter:in_startofpacket
	wire         cmd_mux_015_src_endofpacket;                                        // cmd_mux_015:src_endofpacket -> sound_mpu_cmd_width_adapter:in_endofpacket
	wire         sound_mpu_cmd_width_adapter_src_valid;                              // sound_mpu_cmd_width_adapter:out_valid -> sound_mpu_burst_adapter:sink0_valid
	wire  [66:0] sound_mpu_cmd_width_adapter_src_data;                               // sound_mpu_cmd_width_adapter:out_data -> sound_mpu_burst_adapter:sink0_data
	wire         sound_mpu_cmd_width_adapter_src_ready;                              // sound_mpu_burst_adapter:sink0_ready -> sound_mpu_cmd_width_adapter:out_ready
	wire  [19:0] sound_mpu_cmd_width_adapter_src_channel;                            // sound_mpu_cmd_width_adapter:out_channel -> sound_mpu_burst_adapter:sink0_channel
	wire         sound_mpu_cmd_width_adapter_src_startofpacket;                      // sound_mpu_cmd_width_adapter:out_startofpacket -> sound_mpu_burst_adapter:sink0_startofpacket
	wire         sound_mpu_cmd_width_adapter_src_endofpacket;                        // sound_mpu_cmd_width_adapter:out_endofpacket -> sound_mpu_burst_adapter:sink0_endofpacket
	wire         cmd_mux_016_src_valid;                                              // cmd_mux_016:src_valid -> pc_dma_page_cmd_width_adapter:in_valid
	wire  [93:0] cmd_mux_016_src_data;                                               // cmd_mux_016:src_data -> pc_dma_page_cmd_width_adapter:in_data
	wire         cmd_mux_016_src_ready;                                              // pc_dma_page_cmd_width_adapter:in_ready -> cmd_mux_016:src_ready
	wire  [19:0] cmd_mux_016_src_channel;                                            // cmd_mux_016:src_channel -> pc_dma_page_cmd_width_adapter:in_channel
	wire         cmd_mux_016_src_startofpacket;                                      // cmd_mux_016:src_startofpacket -> pc_dma_page_cmd_width_adapter:in_startofpacket
	wire         cmd_mux_016_src_endofpacket;                                        // cmd_mux_016:src_endofpacket -> pc_dma_page_cmd_width_adapter:in_endofpacket
	wire         pc_dma_page_cmd_width_adapter_src_valid;                            // pc_dma_page_cmd_width_adapter:out_valid -> pc_dma_page_burst_adapter:sink0_valid
	wire  [66:0] pc_dma_page_cmd_width_adapter_src_data;                             // pc_dma_page_cmd_width_adapter:out_data -> pc_dma_page_burst_adapter:sink0_data
	wire         pc_dma_page_cmd_width_adapter_src_ready;                            // pc_dma_page_burst_adapter:sink0_ready -> pc_dma_page_cmd_width_adapter:out_ready
	wire  [19:0] pc_dma_page_cmd_width_adapter_src_channel;                          // pc_dma_page_cmd_width_adapter:out_channel -> pc_dma_page_burst_adapter:sink0_channel
	wire         pc_dma_page_cmd_width_adapter_src_startofpacket;                    // pc_dma_page_cmd_width_adapter:out_startofpacket -> pc_dma_page_burst_adapter:sink0_startofpacket
	wire         pc_dma_page_cmd_width_adapter_src_endofpacket;                      // pc_dma_page_cmd_width_adapter:out_endofpacket -> pc_dma_page_burst_adapter:sink0_endofpacket
	wire         cmd_mux_017_src_valid;                                              // cmd_mux_017:src_valid -> pc_dma_slave_cmd_width_adapter:in_valid
	wire  [93:0] cmd_mux_017_src_data;                                               // cmd_mux_017:src_data -> pc_dma_slave_cmd_width_adapter:in_data
	wire         cmd_mux_017_src_ready;                                              // pc_dma_slave_cmd_width_adapter:in_ready -> cmd_mux_017:src_ready
	wire  [19:0] cmd_mux_017_src_channel;                                            // cmd_mux_017:src_channel -> pc_dma_slave_cmd_width_adapter:in_channel
	wire         cmd_mux_017_src_startofpacket;                                      // cmd_mux_017:src_startofpacket -> pc_dma_slave_cmd_width_adapter:in_startofpacket
	wire         cmd_mux_017_src_endofpacket;                                        // cmd_mux_017:src_endofpacket -> pc_dma_slave_cmd_width_adapter:in_endofpacket
	wire         pc_dma_slave_cmd_width_adapter_src_valid;                           // pc_dma_slave_cmd_width_adapter:out_valid -> pc_dma_slave_burst_adapter:sink0_valid
	wire  [66:0] pc_dma_slave_cmd_width_adapter_src_data;                            // pc_dma_slave_cmd_width_adapter:out_data -> pc_dma_slave_burst_adapter:sink0_data
	wire         pc_dma_slave_cmd_width_adapter_src_ready;                           // pc_dma_slave_burst_adapter:sink0_ready -> pc_dma_slave_cmd_width_adapter:out_ready
	wire  [19:0] pc_dma_slave_cmd_width_adapter_src_channel;                         // pc_dma_slave_cmd_width_adapter:out_channel -> pc_dma_slave_burst_adapter:sink0_channel
	wire         pc_dma_slave_cmd_width_adapter_src_startofpacket;                   // pc_dma_slave_cmd_width_adapter:out_startofpacket -> pc_dma_slave_burst_adapter:sink0_startofpacket
	wire         pc_dma_slave_cmd_width_adapter_src_endofpacket;                     // pc_dma_slave_cmd_width_adapter:out_endofpacket -> pc_dma_slave_burst_adapter:sink0_endofpacket
	wire         cmd_mux_018_src_valid;                                              // cmd_mux_018:src_valid -> pic_slave_cmd_width_adapter:in_valid
	wire  [93:0] cmd_mux_018_src_data;                                               // cmd_mux_018:src_data -> pic_slave_cmd_width_adapter:in_data
	wire         cmd_mux_018_src_ready;                                              // pic_slave_cmd_width_adapter:in_ready -> cmd_mux_018:src_ready
	wire  [19:0] cmd_mux_018_src_channel;                                            // cmd_mux_018:src_channel -> pic_slave_cmd_width_adapter:in_channel
	wire         cmd_mux_018_src_startofpacket;                                      // cmd_mux_018:src_startofpacket -> pic_slave_cmd_width_adapter:in_startofpacket
	wire         cmd_mux_018_src_endofpacket;                                        // cmd_mux_018:src_endofpacket -> pic_slave_cmd_width_adapter:in_endofpacket
	wire         pic_slave_cmd_width_adapter_src_valid;                              // pic_slave_cmd_width_adapter:out_valid -> pic_slave_burst_adapter:sink0_valid
	wire  [66:0] pic_slave_cmd_width_adapter_src_data;                               // pic_slave_cmd_width_adapter:out_data -> pic_slave_burst_adapter:sink0_data
	wire         pic_slave_cmd_width_adapter_src_ready;                              // pic_slave_burst_adapter:sink0_ready -> pic_slave_cmd_width_adapter:out_ready
	wire  [19:0] pic_slave_cmd_width_adapter_src_channel;                            // pic_slave_cmd_width_adapter:out_channel -> pic_slave_burst_adapter:sink0_channel
	wire         pic_slave_cmd_width_adapter_src_startofpacket;                      // pic_slave_cmd_width_adapter:out_startofpacket -> pic_slave_burst_adapter:sink0_startofpacket
	wire         pic_slave_cmd_width_adapter_src_endofpacket;                        // pic_slave_cmd_width_adapter:out_endofpacket -> pic_slave_burst_adapter:sink0_endofpacket
	wire         cmd_mux_019_src_valid;                                              // cmd_mux_019:src_valid -> ps2_sysctl_cmd_width_adapter:in_valid
	wire  [93:0] cmd_mux_019_src_data;                                               // cmd_mux_019:src_data -> ps2_sysctl_cmd_width_adapter:in_data
	wire         cmd_mux_019_src_ready;                                              // ps2_sysctl_cmd_width_adapter:in_ready -> cmd_mux_019:src_ready
	wire  [19:0] cmd_mux_019_src_channel;                                            // cmd_mux_019:src_channel -> ps2_sysctl_cmd_width_adapter:in_channel
	wire         cmd_mux_019_src_startofpacket;                                      // cmd_mux_019:src_startofpacket -> ps2_sysctl_cmd_width_adapter:in_startofpacket
	wire         cmd_mux_019_src_endofpacket;                                        // cmd_mux_019:src_endofpacket -> ps2_sysctl_cmd_width_adapter:in_endofpacket
	wire         ps2_sysctl_cmd_width_adapter_src_valid;                             // ps2_sysctl_cmd_width_adapter:out_valid -> ps2_sysctl_burst_adapter:sink0_valid
	wire  [66:0] ps2_sysctl_cmd_width_adapter_src_data;                              // ps2_sysctl_cmd_width_adapter:out_data -> ps2_sysctl_burst_adapter:sink0_data
	wire         ps2_sysctl_cmd_width_adapter_src_ready;                             // ps2_sysctl_burst_adapter:sink0_ready -> ps2_sysctl_cmd_width_adapter:out_ready
	wire  [19:0] ps2_sysctl_cmd_width_adapter_src_channel;                           // ps2_sysctl_cmd_width_adapter:out_channel -> ps2_sysctl_burst_adapter:sink0_channel
	wire         ps2_sysctl_cmd_width_adapter_src_startofpacket;                     // ps2_sysctl_cmd_width_adapter:out_startofpacket -> ps2_sysctl_burst_adapter:sink0_startofpacket
	wire         ps2_sysctl_cmd_width_adapter_src_endofpacket;                       // ps2_sysctl_cmd_width_adapter:out_endofpacket -> ps2_sysctl_burst_adapter:sink0_endofpacket
	wire         cmd_demux_src1_valid;                                               // cmd_demux:src1_valid -> crosser:in_valid
	wire  [93:0] cmd_demux_src1_data;                                                // cmd_demux:src1_data -> crosser:in_data
	wire         cmd_demux_src1_ready;                                               // crosser:in_ready -> cmd_demux:src1_ready
	wire  [19:0] cmd_demux_src1_channel;                                             // cmd_demux:src1_channel -> crosser:in_channel
	wire         cmd_demux_src1_startofpacket;                                       // cmd_demux:src1_startofpacket -> crosser:in_startofpacket
	wire         cmd_demux_src1_endofpacket;                                         // cmd_demux:src1_endofpacket -> crosser:in_endofpacket
	wire         crosser_out_valid;                                                  // crosser:out_valid -> cmd_mux_001:sink0_valid
	wire  [93:0] crosser_out_data;                                                   // crosser:out_data -> cmd_mux_001:sink0_data
	wire         crosser_out_ready;                                                  // cmd_mux_001:sink0_ready -> crosser:out_ready
	wire  [19:0] crosser_out_channel;                                                // crosser:out_channel -> cmd_mux_001:sink0_channel
	wire         crosser_out_startofpacket;                                          // crosser:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire         crosser_out_endofpacket;                                            // crosser:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         rsp_demux_001_src0_valid;                                           // rsp_demux_001:src0_valid -> crosser_001:in_valid
	wire  [93:0] rsp_demux_001_src0_data;                                            // rsp_demux_001:src0_data -> crosser_001:in_data
	wire         rsp_demux_001_src0_ready;                                           // crosser_001:in_ready -> rsp_demux_001:src0_ready
	wire  [19:0] rsp_demux_001_src0_channel;                                         // rsp_demux_001:src0_channel -> crosser_001:in_channel
	wire         rsp_demux_001_src0_startofpacket;                                   // rsp_demux_001:src0_startofpacket -> crosser_001:in_startofpacket
	wire         rsp_demux_001_src0_endofpacket;                                     // rsp_demux_001:src0_endofpacket -> crosser_001:in_endofpacket
	wire         crosser_001_out_valid;                                              // crosser_001:out_valid -> rsp_mux:sink1_valid
	wire  [93:0] crosser_001_out_data;                                               // crosser_001:out_data -> rsp_mux:sink1_data
	wire         crosser_001_out_ready;                                              // rsp_mux:sink1_ready -> crosser_001:out_ready
	wire  [19:0] crosser_001_out_channel;                                            // crosser_001:out_channel -> rsp_mux:sink1_channel
	wire         crosser_001_out_startofpacket;                                      // crosser_001:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire         crosser_001_out_endofpacket;                                        // crosser_001:out_endofpacket -> rsp_mux:sink1_endofpacket
	wire  [19:0] ao486_avalon_io_limiter_cmd_valid_data;                             // ao486_avalon_io_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire         sound_fm_agent_rdata_fifo_src_valid;                                // sound_fm_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [9:0] sound_fm_agent_rdata_fifo_src_data;                                 // sound_fm_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire         sound_fm_agent_rdata_fifo_src_ready;                                // avalon_st_adapter:in_0_ready -> sound_fm_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_out_0_valid;                                      // avalon_st_adapter:out_0_valid -> sound_fm_agent:rdata_fifo_sink_valid
	wire   [9:0] avalon_st_adapter_out_0_data;                                       // avalon_st_adapter:out_0_data -> sound_fm_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_out_0_ready;                                      // sound_fm_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire   [0:0] avalon_st_adapter_out_0_error;                                      // avalon_st_adapter:out_0_error -> sound_fm_agent:rdata_fifo_sink_error
	wire         width_trans_in_agent_rdata_fifo_out_valid;                          // width_trans_in_agent_rdata_fifo:out_valid -> avalon_st_adapter_001:in_0_valid
	wire   [9:0] width_trans_in_agent_rdata_fifo_out_data;                           // width_trans_in_agent_rdata_fifo:out_data -> avalon_st_adapter_001:in_0_data
	wire         width_trans_in_agent_rdata_fifo_out_ready;                          // avalon_st_adapter_001:in_0_ready -> width_trans_in_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_001_out_0_valid;                                  // avalon_st_adapter_001:out_0_valid -> width_trans_in_agent:rdata_fifo_sink_valid
	wire   [9:0] avalon_st_adapter_001_out_0_data;                                   // avalon_st_adapter_001:out_0_data -> width_trans_in_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_001_out_0_ready;                                  // width_trans_in_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire   [0:0] avalon_st_adapter_001_out_0_error;                                  // avalon_st_adapter_001:out_0_error -> width_trans_in_agent:rdata_fifo_sink_error
	wire         sound_io_agent_rdata_fifo_src_valid;                                // sound_io_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [9:0] sound_io_agent_rdata_fifo_src_data;                                 // sound_io_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire         sound_io_agent_rdata_fifo_src_ready;                                // avalon_st_adapter_002:in_0_ready -> sound_io_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_002_out_0_valid;                                  // avalon_st_adapter_002:out_0_valid -> sound_io_agent:rdata_fifo_sink_valid
	wire   [9:0] avalon_st_adapter_002_out_0_data;                                   // avalon_st_adapter_002:out_0_data -> sound_io_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_002_out_0_ready;                                  // sound_io_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire   [0:0] avalon_st_adapter_002_out_0_error;                                  // avalon_st_adapter_002:out_0_error -> sound_io_agent:rdata_fifo_sink_error
	wire         rtc_io_agent_rdata_fifo_src_valid;                                  // rtc_io_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [9:0] rtc_io_agent_rdata_fifo_src_data;                                   // rtc_io_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire         rtc_io_agent_rdata_fifo_src_ready;                                  // avalon_st_adapter_003:in_0_ready -> rtc_io_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_003_out_0_valid;                                  // avalon_st_adapter_003:out_0_valid -> rtc_io_agent:rdata_fifo_sink_valid
	wire   [9:0] avalon_st_adapter_003_out_0_data;                                   // avalon_st_adapter_003:out_0_data -> rtc_io_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_003_out_0_ready;                                  // rtc_io_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire   [0:0] avalon_st_adapter_003_out_0_error;                                  // avalon_st_adapter_003:out_0_error -> rtc_io_agent:rdata_fifo_sink_error
	wire         pit_io_agent_rdata_fifo_src_valid;                                  // pit_io_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [9:0] pit_io_agent_rdata_fifo_src_data;                                   // pit_io_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire         pit_io_agent_rdata_fifo_src_ready;                                  // avalon_st_adapter_004:in_0_ready -> pit_io_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_004_out_0_valid;                                  // avalon_st_adapter_004:out_0_valid -> pit_io_agent:rdata_fifo_sink_valid
	wire   [9:0] avalon_st_adapter_004_out_0_data;                                   // avalon_st_adapter_004:out_0_data -> pit_io_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_004_out_0_ready;                                  // pit_io_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire   [0:0] avalon_st_adapter_004_out_0_error;                                  // avalon_st_adapter_004:out_0_error -> pit_io_agent:rdata_fifo_sink_error
	wire         hdd0_io_agent_rdata_fifo_src_valid;                                 // hdd0_io_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire  [33:0] hdd0_io_agent_rdata_fifo_src_data;                                  // hdd0_io_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire         hdd0_io_agent_rdata_fifo_src_ready;                                 // avalon_st_adapter_005:in_0_ready -> hdd0_io_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_005_out_0_valid;                                  // avalon_st_adapter_005:out_0_valid -> hdd0_io_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_005_out_0_data;                                   // avalon_st_adapter_005:out_0_data -> hdd0_io_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_005_out_0_ready;                                  // hdd0_io_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire   [0:0] avalon_st_adapter_005_out_0_error;                                  // avalon_st_adapter_005:out_0_error -> hdd0_io_agent:rdata_fifo_sink_error
	wire         floppy0_io_agent_rdata_fifo_src_valid;                              // floppy0_io_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire   [9:0] floppy0_io_agent_rdata_fifo_src_data;                               // floppy0_io_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire         floppy0_io_agent_rdata_fifo_src_ready;                              // avalon_st_adapter_006:in_0_ready -> floppy0_io_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_006_out_0_valid;                                  // avalon_st_adapter_006:out_0_valid -> floppy0_io_agent:rdata_fifo_sink_valid
	wire   [9:0] avalon_st_adapter_006_out_0_data;                                   // avalon_st_adapter_006:out_0_data -> floppy0_io_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_006_out_0_ready;                                  // floppy0_io_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire   [0:0] avalon_st_adapter_006_out_0_error;                                  // avalon_st_adapter_006:out_0_error -> floppy0_io_agent:rdata_fifo_sink_error
	wire         ps2_io_agent_rdata_fifo_src_valid;                                  // ps2_io_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire   [9:0] ps2_io_agent_rdata_fifo_src_data;                                   // ps2_io_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire         ps2_io_agent_rdata_fifo_src_ready;                                  // avalon_st_adapter_007:in_0_ready -> ps2_io_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_007_out_0_valid;                                  // avalon_st_adapter_007:out_0_valid -> ps2_io_agent:rdata_fifo_sink_valid
	wire   [9:0] avalon_st_adapter_007_out_0_data;                                   // avalon_st_adapter_007:out_0_data -> ps2_io_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_007_out_0_ready;                                  // ps2_io_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire   [0:0] avalon_st_adapter_007_out_0_error;                                  // avalon_st_adapter_007:out_0_error -> ps2_io_agent:rdata_fifo_sink_error
	wire         hdd1_io_agent_rdata_fifo_src_valid;                                 // hdd1_io_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire  [33:0] hdd1_io_agent_rdata_fifo_src_data;                                  // hdd1_io_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire         hdd1_io_agent_rdata_fifo_src_ready;                                 // avalon_st_adapter_008:in_0_ready -> hdd1_io_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_008_out_0_valid;                                  // avalon_st_adapter_008:out_0_valid -> hdd1_io_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_008_out_0_data;                                   // avalon_st_adapter_008:out_0_data -> hdd1_io_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_008_out_0_ready;                                  // hdd1_io_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire   [0:0] avalon_st_adapter_008_out_0_error;                                  // avalon_st_adapter_008:out_0_error -> hdd1_io_agent:rdata_fifo_sink_error
	wire         hddext_0x370_io_agent_rdata_fifo_src_valid;                         // hddext_0x370_io_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire   [9:0] hddext_0x370_io_agent_rdata_fifo_src_data;                          // hddext_0x370_io_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire         hddext_0x370_io_agent_rdata_fifo_src_ready;                         // avalon_st_adapter_009:in_0_ready -> hddext_0x370_io_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_009_out_0_valid;                                  // avalon_st_adapter_009:out_0_valid -> hddext_0x370_io_agent:rdata_fifo_sink_valid
	wire   [9:0] avalon_st_adapter_009_out_0_data;                                   // avalon_st_adapter_009:out_0_data -> hddext_0x370_io_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_009_out_0_ready;                                  // hddext_0x370_io_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire   [0:0] avalon_st_adapter_009_out_0_error;                                  // avalon_st_adapter_009:out_0_error -> hddext_0x370_io_agent:rdata_fifo_sink_error
	wire         vga_io_b_agent_rdata_fifo_src_valid;                                // vga_io_b_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire   [9:0] vga_io_b_agent_rdata_fifo_src_data;                                 // vga_io_b_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire         vga_io_b_agent_rdata_fifo_src_ready;                                // avalon_st_adapter_010:in_0_ready -> vga_io_b_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_010_out_0_valid;                                  // avalon_st_adapter_010:out_0_valid -> vga_io_b_agent:rdata_fifo_sink_valid
	wire   [9:0] avalon_st_adapter_010_out_0_data;                                   // avalon_st_adapter_010:out_0_data -> vga_io_b_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_010_out_0_ready;                                  // vga_io_b_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire   [0:0] avalon_st_adapter_010_out_0_error;                                  // avalon_st_adapter_010:out_0_error -> vga_io_b_agent:rdata_fifo_sink_error
	wire         vga_io_c_agent_rdata_fifo_src_valid;                                // vga_io_c_agent:rdata_fifo_src_valid -> avalon_st_adapter_011:in_0_valid
	wire   [9:0] vga_io_c_agent_rdata_fifo_src_data;                                 // vga_io_c_agent:rdata_fifo_src_data -> avalon_st_adapter_011:in_0_data
	wire         vga_io_c_agent_rdata_fifo_src_ready;                                // avalon_st_adapter_011:in_0_ready -> vga_io_c_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_011_out_0_valid;                                  // avalon_st_adapter_011:out_0_valid -> vga_io_c_agent:rdata_fifo_sink_valid
	wire   [9:0] avalon_st_adapter_011_out_0_data;                                   // avalon_st_adapter_011:out_0_data -> vga_io_c_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_011_out_0_ready;                                  // vga_io_c_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire   [0:0] avalon_st_adapter_011_out_0_error;                                  // avalon_st_adapter_011:out_0_error -> vga_io_c_agent:rdata_fifo_sink_error
	wire         vga_io_d_agent_rdata_fifo_src_valid;                                // vga_io_d_agent:rdata_fifo_src_valid -> avalon_st_adapter_012:in_0_valid
	wire   [9:0] vga_io_d_agent_rdata_fifo_src_data;                                 // vga_io_d_agent:rdata_fifo_src_data -> avalon_st_adapter_012:in_0_data
	wire         vga_io_d_agent_rdata_fifo_src_ready;                                // avalon_st_adapter_012:in_0_ready -> vga_io_d_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_012_out_0_valid;                                  // avalon_st_adapter_012:out_0_valid -> vga_io_d_agent:rdata_fifo_sink_valid
	wire   [9:0] avalon_st_adapter_012_out_0_data;                                   // avalon_st_adapter_012:out_0_data -> vga_io_d_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_012_out_0_ready;                                  // vga_io_d_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire   [0:0] avalon_st_adapter_012_out_0_error;                                  // avalon_st_adapter_012:out_0_error -> vga_io_d_agent:rdata_fifo_sink_error
	wire         pc_dma_master_agent_rdata_fifo_src_valid;                           // pc_dma_master_agent:rdata_fifo_src_valid -> avalon_st_adapter_013:in_0_valid
	wire   [9:0] pc_dma_master_agent_rdata_fifo_src_data;                            // pc_dma_master_agent:rdata_fifo_src_data -> avalon_st_adapter_013:in_0_data
	wire         pc_dma_master_agent_rdata_fifo_src_ready;                           // avalon_st_adapter_013:in_0_ready -> pc_dma_master_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_013_out_0_valid;                                  // avalon_st_adapter_013:out_0_valid -> pc_dma_master_agent:rdata_fifo_sink_valid
	wire   [9:0] avalon_st_adapter_013_out_0_data;                                   // avalon_st_adapter_013:out_0_data -> pc_dma_master_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_013_out_0_ready;                                  // pc_dma_master_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire   [0:0] avalon_st_adapter_013_out_0_error;                                  // avalon_st_adapter_013:out_0_error -> pc_dma_master_agent:rdata_fifo_sink_error
	wire         pic_master_agent_rdata_fifo_src_valid;                              // pic_master_agent:rdata_fifo_src_valid -> avalon_st_adapter_014:in_0_valid
	wire   [9:0] pic_master_agent_rdata_fifo_src_data;                               // pic_master_agent:rdata_fifo_src_data -> avalon_st_adapter_014:in_0_data
	wire         pic_master_agent_rdata_fifo_src_ready;                              // avalon_st_adapter_014:in_0_ready -> pic_master_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_014_out_0_valid;                                  // avalon_st_adapter_014:out_0_valid -> pic_master_agent:rdata_fifo_sink_valid
	wire   [9:0] avalon_st_adapter_014_out_0_data;                                   // avalon_st_adapter_014:out_0_data -> pic_master_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_014_out_0_ready;                                  // pic_master_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire   [0:0] avalon_st_adapter_014_out_0_error;                                  // avalon_st_adapter_014:out_0_error -> pic_master_agent:rdata_fifo_sink_error
	wire         sound_mpu_agent_rdata_fifo_src_valid;                               // sound_mpu_agent:rdata_fifo_src_valid -> avalon_st_adapter_015:in_0_valid
	wire   [9:0] sound_mpu_agent_rdata_fifo_src_data;                                // sound_mpu_agent:rdata_fifo_src_data -> avalon_st_adapter_015:in_0_data
	wire         sound_mpu_agent_rdata_fifo_src_ready;                               // avalon_st_adapter_015:in_0_ready -> sound_mpu_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_015_out_0_valid;                                  // avalon_st_adapter_015:out_0_valid -> sound_mpu_agent:rdata_fifo_sink_valid
	wire   [9:0] avalon_st_adapter_015_out_0_data;                                   // avalon_st_adapter_015:out_0_data -> sound_mpu_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_015_out_0_ready;                                  // sound_mpu_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire   [0:0] avalon_st_adapter_015_out_0_error;                                  // avalon_st_adapter_015:out_0_error -> sound_mpu_agent:rdata_fifo_sink_error
	wire         pc_dma_page_agent_rdata_fifo_src_valid;                             // pc_dma_page_agent:rdata_fifo_src_valid -> avalon_st_adapter_016:in_0_valid
	wire   [9:0] pc_dma_page_agent_rdata_fifo_src_data;                              // pc_dma_page_agent:rdata_fifo_src_data -> avalon_st_adapter_016:in_0_data
	wire         pc_dma_page_agent_rdata_fifo_src_ready;                             // avalon_st_adapter_016:in_0_ready -> pc_dma_page_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_016_out_0_valid;                                  // avalon_st_adapter_016:out_0_valid -> pc_dma_page_agent:rdata_fifo_sink_valid
	wire   [9:0] avalon_st_adapter_016_out_0_data;                                   // avalon_st_adapter_016:out_0_data -> pc_dma_page_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_016_out_0_ready;                                  // pc_dma_page_agent:rdata_fifo_sink_ready -> avalon_st_adapter_016:out_0_ready
	wire   [0:0] avalon_st_adapter_016_out_0_error;                                  // avalon_st_adapter_016:out_0_error -> pc_dma_page_agent:rdata_fifo_sink_error
	wire         pc_dma_slave_agent_rdata_fifo_src_valid;                            // pc_dma_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_017:in_0_valid
	wire   [9:0] pc_dma_slave_agent_rdata_fifo_src_data;                             // pc_dma_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_017:in_0_data
	wire         pc_dma_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_017:in_0_ready -> pc_dma_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_017_out_0_valid;                                  // avalon_st_adapter_017:out_0_valid -> pc_dma_slave_agent:rdata_fifo_sink_valid
	wire   [9:0] avalon_st_adapter_017_out_0_data;                                   // avalon_st_adapter_017:out_0_data -> pc_dma_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_017_out_0_ready;                                  // pc_dma_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_017:out_0_ready
	wire   [0:0] avalon_st_adapter_017_out_0_error;                                  // avalon_st_adapter_017:out_0_error -> pc_dma_slave_agent:rdata_fifo_sink_error
	wire         pic_slave_agent_rdata_fifo_src_valid;                               // pic_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_018:in_0_valid
	wire   [9:0] pic_slave_agent_rdata_fifo_src_data;                                // pic_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_018:in_0_data
	wire         pic_slave_agent_rdata_fifo_src_ready;                               // avalon_st_adapter_018:in_0_ready -> pic_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_018_out_0_valid;                                  // avalon_st_adapter_018:out_0_valid -> pic_slave_agent:rdata_fifo_sink_valid
	wire   [9:0] avalon_st_adapter_018_out_0_data;                                   // avalon_st_adapter_018:out_0_data -> pic_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_018_out_0_ready;                                  // pic_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_018:out_0_ready
	wire   [0:0] avalon_st_adapter_018_out_0_error;                                  // avalon_st_adapter_018:out_0_error -> pic_slave_agent:rdata_fifo_sink_error
	wire         ps2_sysctl_agent_rdata_fifo_src_valid;                              // ps2_sysctl_agent:rdata_fifo_src_valid -> avalon_st_adapter_019:in_0_valid
	wire   [9:0] ps2_sysctl_agent_rdata_fifo_src_data;                               // ps2_sysctl_agent:rdata_fifo_src_data -> avalon_st_adapter_019:in_0_data
	wire         ps2_sysctl_agent_rdata_fifo_src_ready;                              // avalon_st_adapter_019:in_0_ready -> ps2_sysctl_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_019_out_0_valid;                                  // avalon_st_adapter_019:out_0_valid -> ps2_sysctl_agent:rdata_fifo_sink_valid
	wire   [9:0] avalon_st_adapter_019_out_0_data;                                   // avalon_st_adapter_019:out_0_data -> ps2_sysctl_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_019_out_0_ready;                                  // ps2_sysctl_agent:rdata_fifo_sink_ready -> avalon_st_adapter_019:out_0_ready
	wire   [0:0] avalon_st_adapter_019_out_0_error;                                  // avalon_st_adapter_019:out_0_error -> ps2_sysctl_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (16),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (16),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) ao486_avalon_io_translator (
		.clk                    (pll_0_outclk0_clk),                                                  //                       clk.clk
		.reset                  (ao486_reset_sink_reset_bridge_in_reset_reset),                       //                     reset.reset
		.uav_address            (ao486_avalon_io_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (ao486_avalon_io_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (ao486_avalon_io_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (ao486_avalon_io_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (ao486_avalon_io_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (ao486_avalon_io_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (ao486_avalon_io_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (ao486_avalon_io_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (ao486_avalon_io_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (ao486_avalon_io_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (ao486_avalon_io_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (ao486_avalon_io_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (ao486_avalon_io_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (ao486_avalon_io_byteenable),                                         //                          .byteenable
		.av_read                (ao486_avalon_io_read),                                               //                          .read
		.av_readdata            (ao486_avalon_io_readdata),                                           //                          .readdata
		.av_readdatavalid       (ao486_avalon_io_readdatavalid),                                      //                          .readdatavalid
		.av_write               (ao486_avalon_io_write),                                              //                          .write
		.av_writedata           (ao486_avalon_io_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                               //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                               //               (terminated)
		.av_lock                (1'b0),                                                               //               (terminated)
		.av_debugaccess         (1'b0),                                                               //               (terminated)
		.uav_clken              (),                                                                   //               (terminated)
		.av_clken               (1'b1),                                                               //               (terminated)
		.uav_response           (2'b00),                                                              //               (terminated)
		.av_response            (),                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                    //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sound_fm_translator (
		.clk                    (pll_0_outclk0_clk),                            //                      clk.clk
		.reset                  (sound_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sound_fm_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (sound_fm_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (sound_fm_agent_m0_read),                       //                         .read
		.uav_write              (sound_fm_agent_m0_write),                      //                         .write
		.uav_waitrequest        (sound_fm_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (sound_fm_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (sound_fm_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (sound_fm_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (sound_fm_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (sound_fm_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (sound_fm_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (sound_fm_address),                             //      avalon_anti_slave_0.address
		.av_write               (sound_fm_write),                               //                         .write
		.av_read                (sound_fm_read),                                //                         .read
		.av_readdata            (sound_fm_readdata),                            //                         .readdata
		.av_writedata           (sound_fm_writedata),                           //                         .writedata
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) width_trans_in_translator (
		.clk                    (pll_0_outclk2_clk),                             //                      clk.clk
		.reset                  (width_trans_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (width_trans_in_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (width_trans_in_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (width_trans_in_agent_m0_read),                  //                         .read
		.uav_write              (width_trans_in_agent_m0_write),                 //                         .write
		.uav_waitrequest        (width_trans_in_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (width_trans_in_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (width_trans_in_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (width_trans_in_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (width_trans_in_agent_m0_writedata),             //                         .writedata
		.uav_lock               (width_trans_in_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (width_trans_in_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (width_trans_in_address),                        //      avalon_anti_slave_0.address
		.av_write               (width_trans_in_write),                          //                         .write
		.av_read                (width_trans_in_read),                           //                         .read
		.av_readdata            (width_trans_in_readdata),                       //                         .readdata
		.av_writedata           (width_trans_in_writedata),                      //                         .writedata
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_waitrequest         (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_chipselect          (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sound_io_translator (
		.clk                    (pll_0_outclk0_clk),                            //                      clk.clk
		.reset                  (sound_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sound_io_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (sound_io_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (sound_io_agent_m0_read),                       //                         .read
		.uav_write              (sound_io_agent_m0_write),                      //                         .write
		.uav_waitrequest        (sound_io_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (sound_io_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (sound_io_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (sound_io_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (sound_io_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (sound_io_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (sound_io_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (sound_io_address),                             //      avalon_anti_slave_0.address
		.av_write               (sound_io_write),                               //                         .write
		.av_read                (sound_io_read),                                //                         .read
		.av_readdata            (sound_io_readdata),                            //                         .readdata
		.av_writedata           (sound_io_writedata),                           //                         .writedata
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) rtc_io_translator (
		.clk                    (pll_0_outclk0_clk),                            //                      clk.clk
		.reset                  (sound_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (rtc_io_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (rtc_io_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (rtc_io_agent_m0_read),                         //                         .read
		.uav_write              (rtc_io_agent_m0_write),                        //                         .write
		.uav_waitrequest        (rtc_io_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (rtc_io_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (rtc_io_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (rtc_io_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (rtc_io_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (rtc_io_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (rtc_io_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (rtc_io_address),                               //      avalon_anti_slave_0.address
		.av_write               (rtc_io_write),                                 //                         .write
		.av_read                (rtc_io_read),                                  //                         .read
		.av_readdata            (rtc_io_readdata),                              //                         .readdata
		.av_writedata           (rtc_io_writedata),                             //                         .writedata
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pit_io_translator (
		.clk                    (pll_0_outclk0_clk),                            //                      clk.clk
		.reset                  (sound_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pit_io_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (pit_io_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (pit_io_agent_m0_read),                         //                         .read
		.uav_write              (pit_io_agent_m0_write),                        //                         .write
		.uav_waitrequest        (pit_io_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (pit_io_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (pit_io_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (pit_io_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (pit_io_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (pit_io_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (pit_io_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (pit_io_address),                               //      avalon_anti_slave_0.address
		.av_write               (pit_io_write),                                 //                         .write
		.av_read                (pit_io_read),                                  //                         .read
		.av_readdata            (pit_io_readdata),                              //                         .readdata
		.av_writedata           (pit_io_writedata),                             //                         .writedata
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hdd0_io_translator (
		.clk                    (pll_0_outclk0_clk),                            //                      clk.clk
		.reset                  (sound_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hdd0_io_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (hdd0_io_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (hdd0_io_agent_m0_read),                        //                         .read
		.uav_write              (hdd0_io_agent_m0_write),                       //                         .write
		.uav_waitrequest        (hdd0_io_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (hdd0_io_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (hdd0_io_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (hdd0_io_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (hdd0_io_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (hdd0_io_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (hdd0_io_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (hdd0_io_address),                              //      avalon_anti_slave_0.address
		.av_write               (hdd0_io_write),                                //                         .write
		.av_read                (hdd0_io_read),                                 //                         .read
		.av_readdata            (hdd0_io_readdata),                             //                         .readdata
		.av_writedata           (hdd0_io_writedata),                            //                         .writedata
		.av_byteenable          (hdd0_io_byteenable),                           //                         .byteenable
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) floppy0_io_translator (
		.clk                    (pll_0_outclk0_clk),                            //                      clk.clk
		.reset                  (sound_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (floppy0_io_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (floppy0_io_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (floppy0_io_agent_m0_read),                     //                         .read
		.uav_write              (floppy0_io_agent_m0_write),                    //                         .write
		.uav_waitrequest        (floppy0_io_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (floppy0_io_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (floppy0_io_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (floppy0_io_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (floppy0_io_agent_m0_writedata),                //                         .writedata
		.uav_lock               (floppy0_io_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (floppy0_io_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (floppy0_io_address),                           //      avalon_anti_slave_0.address
		.av_write               (floppy0_io_write),                             //                         .write
		.av_read                (floppy0_io_read),                              //                         .read
		.av_readdata            (floppy0_io_readdata),                          //                         .readdata
		.av_writedata           (floppy0_io_writedata),                         //                         .writedata
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ps2_io_translator (
		.clk                    (pll_0_outclk0_clk),                            //                      clk.clk
		.reset                  (sound_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ps2_io_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (ps2_io_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (ps2_io_agent_m0_read),                         //                         .read
		.uav_write              (ps2_io_agent_m0_write),                        //                         .write
		.uav_waitrequest        (ps2_io_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (ps2_io_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (ps2_io_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (ps2_io_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (ps2_io_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (ps2_io_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (ps2_io_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (ps2_io_address),                               //      avalon_anti_slave_0.address
		.av_write               (ps2_io_write),                                 //                         .write
		.av_read                (ps2_io_read),                                  //                         .read
		.av_readdata            (ps2_io_readdata),                              //                         .readdata
		.av_writedata           (ps2_io_writedata),                             //                         .writedata
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hdd1_io_translator (
		.clk                    (pll_0_outclk0_clk),                            //                      clk.clk
		.reset                  (sound_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hdd1_io_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (hdd1_io_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (hdd1_io_agent_m0_read),                        //                         .read
		.uav_write              (hdd1_io_agent_m0_write),                       //                         .write
		.uav_waitrequest        (hdd1_io_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (hdd1_io_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (hdd1_io_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (hdd1_io_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (hdd1_io_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (hdd1_io_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (hdd1_io_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (hdd1_io_address),                              //      avalon_anti_slave_0.address
		.av_write               (hdd1_io_write),                                //                         .write
		.av_read                (hdd1_io_read),                                 //                         .read
		.av_readdata            (hdd1_io_readdata),                             //                         .readdata
		.av_writedata           (hdd1_io_writedata),                            //                         .writedata
		.av_byteenable          (hdd1_io_byteenable),                           //                         .byteenable
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hddext_0x370_io_translator (
		.clk                    (pll_0_outclk0_clk),                            //                      clk.clk
		.reset                  (sound_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hddext_0x370_io_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (hddext_0x370_io_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (hddext_0x370_io_agent_m0_read),                //                         .read
		.uav_write              (hddext_0x370_io_agent_m0_write),               //                         .write
		.uav_waitrequest        (hddext_0x370_io_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (hddext_0x370_io_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (hddext_0x370_io_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (hddext_0x370_io_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (hddext_0x370_io_agent_m0_writedata),           //                         .writedata
		.uav_lock               (hddext_0x370_io_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (hddext_0x370_io_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (hddext_0x370_io_address),                      //      avalon_anti_slave_0.address
		.av_write               (hddext_0x370_io_write),                        //                         .write
		.av_read                (hddext_0x370_io_read),                         //                         .read
		.av_readdata            (hddext_0x370_io_readdata),                     //                         .readdata
		.av_writedata           (hddext_0x370_io_writedata),                    //                         .writedata
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vga_io_b_translator (
		.clk                    (pll_0_outclk0_clk),                            //                      clk.clk
		.reset                  (sound_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (vga_io_b_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (vga_io_b_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (vga_io_b_agent_m0_read),                       //                         .read
		.uav_write              (vga_io_b_agent_m0_write),                      //                         .write
		.uav_waitrequest        (vga_io_b_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (vga_io_b_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (vga_io_b_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (vga_io_b_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (vga_io_b_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (vga_io_b_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (vga_io_b_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (vga_io_b_address),                             //      avalon_anti_slave_0.address
		.av_write               (vga_io_b_write),                               //                         .write
		.av_read                (vga_io_b_read),                                //                         .read
		.av_readdata            (vga_io_b_readdata),                            //                         .readdata
		.av_writedata           (vga_io_b_writedata),                           //                         .writedata
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vga_io_c_translator (
		.clk                    (pll_0_outclk0_clk),                            //                      clk.clk
		.reset                  (sound_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (vga_io_c_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (vga_io_c_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (vga_io_c_agent_m0_read),                       //                         .read
		.uav_write              (vga_io_c_agent_m0_write),                      //                         .write
		.uav_waitrequest        (vga_io_c_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (vga_io_c_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (vga_io_c_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (vga_io_c_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (vga_io_c_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (vga_io_c_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (vga_io_c_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (vga_io_c_address),                             //      avalon_anti_slave_0.address
		.av_write               (vga_io_c_write),                               //                         .write
		.av_read                (vga_io_c_read),                                //                         .read
		.av_readdata            (vga_io_c_readdata),                            //                         .readdata
		.av_writedata           (vga_io_c_writedata),                           //                         .writedata
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) vga_io_d_translator (
		.clk                    (pll_0_outclk0_clk),                            //                      clk.clk
		.reset                  (sound_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (vga_io_d_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (vga_io_d_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (vga_io_d_agent_m0_read),                       //                         .read
		.uav_write              (vga_io_d_agent_m0_write),                      //                         .write
		.uav_waitrequest        (vga_io_d_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (vga_io_d_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (vga_io_d_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (vga_io_d_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (vga_io_d_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (vga_io_d_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (vga_io_d_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (vga_io_d_address),                             //      avalon_anti_slave_0.address
		.av_write               (vga_io_d_write),                               //                         .write
		.av_read                (vga_io_d_read),                                //                         .read
		.av_readdata            (vga_io_d_readdata),                            //                         .readdata
		.av_writedata           (vga_io_d_writedata),                           //                         .writedata
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (5),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pc_dma_master_translator (
		.clk                    (pll_0_outclk0_clk),                            //                      clk.clk
		.reset                  (sound_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pc_dma_master_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (pc_dma_master_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (pc_dma_master_agent_m0_read),                  //                         .read
		.uav_write              (pc_dma_master_agent_m0_write),                 //                         .write
		.uav_waitrequest        (pc_dma_master_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (pc_dma_master_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (pc_dma_master_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (pc_dma_master_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (pc_dma_master_agent_m0_writedata),             //                         .writedata
		.uav_lock               (pc_dma_master_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (pc_dma_master_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (pc_dma_master_address),                        //      avalon_anti_slave_0.address
		.av_write               (pc_dma_master_write),                          //                         .write
		.av_read                (pc_dma_master_read),                           //                         .read
		.av_readdata            (pc_dma_master_readdata),                       //                         .readdata
		.av_writedata           (pc_dma_master_writedata),                      //                         .writedata
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pic_master_translator (
		.clk                    (pll_0_outclk0_clk),                            //                      clk.clk
		.reset                  (sound_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pic_master_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (pic_master_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (pic_master_agent_m0_read),                     //                         .read
		.uav_write              (pic_master_agent_m0_write),                    //                         .write
		.uav_waitrequest        (pic_master_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (pic_master_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (pic_master_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (pic_master_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (pic_master_agent_m0_writedata),                //                         .writedata
		.uav_lock               (pic_master_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (pic_master_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (pic_master_address),                           //      avalon_anti_slave_0.address
		.av_write               (pic_master_write),                             //                         .write
		.av_read                (pic_master_read),                              //                         .read
		.av_readdata            (pic_master_readdata),                          //                         .readdata
		.av_writedata           (pic_master_writedata),                         //                         .writedata
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sound_mpu_translator (
		.clk                    (pll_0_outclk0_clk),                            //                      clk.clk
		.reset                  (sound_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sound_mpu_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (sound_mpu_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (sound_mpu_agent_m0_read),                      //                         .read
		.uav_write              (sound_mpu_agent_m0_write),                     //                         .write
		.uav_waitrequest        (sound_mpu_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (sound_mpu_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (sound_mpu_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (sound_mpu_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (sound_mpu_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (sound_mpu_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (sound_mpu_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (sound_mpu_address),                            //      avalon_anti_slave_0.address
		.av_write               (sound_mpu_write),                              //                         .write
		.av_read                (sound_mpu_read),                               //                         .read
		.av_readdata            (sound_mpu_readdata),                           //                         .readdata
		.av_writedata           (sound_mpu_writedata),                          //                         .writedata
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pc_dma_page_translator (
		.clk                    (pll_0_outclk0_clk),                            //                      clk.clk
		.reset                  (sound_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pc_dma_page_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (pc_dma_page_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (pc_dma_page_agent_m0_read),                    //                         .read
		.uav_write              (pc_dma_page_agent_m0_write),                   //                         .write
		.uav_waitrequest        (pc_dma_page_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (pc_dma_page_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (pc_dma_page_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (pc_dma_page_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (pc_dma_page_agent_m0_writedata),               //                         .writedata
		.uav_lock               (pc_dma_page_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (pc_dma_page_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (pc_dma_page_address),                          //      avalon_anti_slave_0.address
		.av_write               (pc_dma_page_write),                            //                         .write
		.av_read                (pc_dma_page_read),                             //                         .read
		.av_readdata            (pc_dma_page_readdata),                         //                         .readdata
		.av_writedata           (pc_dma_page_writedata),                        //                         .writedata
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pc_dma_slave_translator (
		.clk                    (pll_0_outclk0_clk),                            //                      clk.clk
		.reset                  (sound_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pc_dma_slave_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount         (pc_dma_slave_agent_m0_burstcount),             //                         .burstcount
		.uav_read               (pc_dma_slave_agent_m0_read),                   //                         .read
		.uav_write              (pc_dma_slave_agent_m0_write),                  //                         .write
		.uav_waitrequest        (pc_dma_slave_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid      (pc_dma_slave_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable         (pc_dma_slave_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata           (pc_dma_slave_agent_m0_readdata),               //                         .readdata
		.uav_writedata          (pc_dma_slave_agent_m0_writedata),              //                         .writedata
		.uav_lock               (pc_dma_slave_agent_m0_lock),                   //                         .lock
		.uav_debugaccess        (pc_dma_slave_agent_m0_debugaccess),            //                         .debugaccess
		.av_address             (pc_dma_slave_address),                         //      avalon_anti_slave_0.address
		.av_write               (pc_dma_slave_write),                           //                         .write
		.av_read                (pc_dma_slave_read),                            //                         .read
		.av_readdata            (pc_dma_slave_readdata),                        //                         .readdata
		.av_writedata           (pc_dma_slave_writedata),                       //                         .writedata
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pic_slave_translator (
		.clk                    (pll_0_outclk0_clk),                            //                      clk.clk
		.reset                  (sound_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pic_slave_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (pic_slave_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (pic_slave_agent_m0_read),                      //                         .read
		.uav_write              (pic_slave_agent_m0_write),                     //                         .write
		.uav_waitrequest        (pic_slave_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (pic_slave_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (pic_slave_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (pic_slave_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (pic_slave_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (pic_slave_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (pic_slave_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (pic_slave_address),                            //      avalon_anti_slave_0.address
		.av_write               (pic_slave_write),                              //                         .write
		.av_read                (pic_slave_read),                               //                         .read
		.av_readdata            (pic_slave_readdata),                           //                         .readdata
		.av_writedata           (pic_slave_writedata),                          //                         .writedata
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ps2_sysctl_translator (
		.clk                    (pll_0_outclk0_clk),                            //                      clk.clk
		.reset                  (sound_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ps2_sysctl_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (ps2_sysctl_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (ps2_sysctl_agent_m0_read),                     //                         .read
		.uav_write              (ps2_sysctl_agent_m0_write),                    //                         .write
		.uav_waitrequest        (ps2_sysctl_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (ps2_sysctl_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (ps2_sysctl_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (ps2_sysctl_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (ps2_sysctl_agent_m0_writedata),                //                         .writedata
		.uav_lock               (ps2_sysctl_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (ps2_sysctl_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (ps2_sysctl_address),                           //      avalon_anti_slave_0.address
		.av_write               (ps2_sysctl_write),                             //                         .write
		.av_read                (ps2_sysctl_read),                              //                         .read
		.av_readdata            (ps2_sysctl_readdata),                          //                         .readdata
		.av_writedata           (ps2_sysctl_writedata),                         //                         .writedata
		.av_begintransfer       (),                                             //              (terminated)
		.av_beginbursttransfer  (),                                             //              (terminated)
		.av_burstcount          (),                                             //              (terminated)
		.av_byteenable          (),                                             //              (terminated)
		.av_readdatavalid       (1'b0),                                         //              (terminated)
		.av_waitrequest         (1'b0),                                         //              (terminated)
		.av_writebyteenable     (),                                             //              (terminated)
		.av_lock                (),                                             //              (terminated)
		.av_chipselect          (),                                             //              (terminated)
		.av_clken               (),                                             //              (terminated)
		.uav_clken              (1'b0),                                         //              (terminated)
		.av_debugaccess         (),                                             //              (terminated)
		.av_outputenable        (),                                             //              (terminated)
		.uav_response           (),                                             //              (terminated)
		.av_response            (2'b00),                                        //              (terminated)
		.uav_writeresponsevalid (),                                             //              (terminated)
		.av_writeresponsevalid  (1'b0)                                          //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_QOS_H                 (70),
		.PKT_QOS_L                 (70),
		.PKT_DATA_SIDEBAND_H       (68),
		.PKT_DATA_SIDEBAND_L       (68),
		.PKT_ADDR_SIDEBAND_H       (67),
		.PKT_ADDR_SIDEBAND_L       (67),
		.PKT_BURST_TYPE_H          (66),
		.PKT_BURST_TYPE_L          (65),
		.PKT_CACHE_H               (88),
		.PKT_CACHE_L               (85),
		.PKT_THREAD_ID_H           (81),
		.PKT_THREAD_ID_L           (81),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_EXCLUSIVE       (57),
		.PKT_TRANS_LOCK            (56),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.ST_DATA_W                 (94),
		.ST_CHANNEL_W              (20),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) ao486_avalon_io_agent (
		.clk                   (pll_0_outclk0_clk),                                                  //       clk.clk
		.reset                 (ao486_reset_sink_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.av_address            (ao486_avalon_io_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (ao486_avalon_io_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (ao486_avalon_io_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (ao486_avalon_io_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (ao486_avalon_io_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (ao486_avalon_io_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (ao486_avalon_io_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (ao486_avalon_io_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (ao486_avalon_io_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (ao486_avalon_io_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (ao486_avalon_io_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (ao486_avalon_io_agent_cp_valid),                                     //        cp.valid
		.cp_data               (ao486_avalon_io_agent_cp_data),                                      //          .data
		.cp_startofpacket      (ao486_avalon_io_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (ao486_avalon_io_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (ao486_avalon_io_agent_cp_ready),                                     //          .ready
		.rp_valid              (ao486_avalon_io_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (ao486_avalon_io_limiter_rsp_src_data),                               //          .data
		.rp_channel            (ao486_avalon_io_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (ao486_avalon_io_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (ao486_avalon_io_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (ao486_avalon_io_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (66),
		.PKT_ORI_BURST_SIZE_L      (64),
		.PKT_RESPONSE_STATUS_H     (63),
		.PKT_RESPONSE_STATUS_L     (62),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_TRANS_LOCK            (29),
		.PKT_BEGIN_BURST           (42),
		.PKT_PROTECTION_H          (57),
		.PKT_PROTECTION_L          (55),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_POSTED          (26),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (48),
		.PKT_SRC_ID_L              (44),
		.PKT_DEST_ID_H             (53),
		.PKT_DEST_ID_L             (49),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (67),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sound_fm_agent (
		.clk                     (pll_0_outclk0_clk),                            //             clk.clk
		.reset                   (sound_reset_sink_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sound_fm_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sound_fm_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sound_fm_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sound_fm_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sound_fm_agent_m0_lock),                       //                .lock
		.m0_readdata             (sound_fm_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sound_fm_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sound_fm_agent_m0_read),                       //                .read
		.m0_waitrequest          (sound_fm_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sound_fm_agent_m0_writedata),                  //                .writedata
		.m0_write                (sound_fm_agent_m0_write),                      //                .write
		.rp_endofpacket          (sound_fm_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sound_fm_agent_rp_ready),                      //                .ready
		.rp_valid                (sound_fm_agent_rp_valid),                      //                .valid
		.rp_data                 (sound_fm_agent_rp_data),                       //                .data
		.rp_startofpacket        (sound_fm_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sound_fm_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sound_fm_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sound_fm_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sound_fm_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sound_fm_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sound_fm_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sound_fm_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sound_fm_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sound_fm_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sound_fm_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sound_fm_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sound_fm_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sound_fm_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sound_fm_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sound_fm_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sound_fm_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                //                .error
		.rdata_fifo_src_ready    (sound_fm_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sound_fm_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sound_fm_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (68),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sound_fm_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                            //       clk.clk
		.reset             (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sound_fm_agent_rf_source_data),                //        in.data
		.in_valid          (sound_fm_agent_rf_source_valid),               //          .valid
		.in_ready          (sound_fm_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (sound_fm_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (sound_fm_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (sound_fm_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (sound_fm_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (sound_fm_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (sound_fm_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (sound_fm_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (66),
		.PKT_ORI_BURST_SIZE_L      (64),
		.PKT_RESPONSE_STATUS_H     (63),
		.PKT_RESPONSE_STATUS_L     (62),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_TRANS_LOCK            (29),
		.PKT_BEGIN_BURST           (42),
		.PKT_PROTECTION_H          (57),
		.PKT_PROTECTION_L          (55),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_POSTED          (26),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (48),
		.PKT_SRC_ID_L              (44),
		.PKT_DEST_ID_H             (53),
		.PKT_DEST_ID_L             (49),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (67),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) width_trans_in_agent (
		.clk                     (pll_0_outclk2_clk),                                  //             clk.clk
		.reset                   (width_trans_reset_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (width_trans_in_agent_m0_address),                    //              m0.address
		.m0_burstcount           (width_trans_in_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (width_trans_in_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (width_trans_in_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (width_trans_in_agent_m0_lock),                       //                .lock
		.m0_readdata             (width_trans_in_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (width_trans_in_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (width_trans_in_agent_m0_read),                       //                .read
		.m0_waitrequest          (width_trans_in_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (width_trans_in_agent_m0_writedata),                  //                .writedata
		.m0_write                (width_trans_in_agent_m0_write),                      //                .write
		.rp_endofpacket          (width_trans_in_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (width_trans_in_agent_rp_ready),                      //                .ready
		.rp_valid                (width_trans_in_agent_rp_valid),                      //                .valid
		.rp_data                 (width_trans_in_agent_rp_data),                       //                .data
		.rp_startofpacket        (width_trans_in_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (width_trans_in_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (width_trans_in_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (width_trans_in_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (width_trans_in_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (width_trans_in_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (width_trans_in_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (width_trans_in_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (width_trans_in_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (width_trans_in_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (width_trans_in_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (width_trans_in_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (width_trans_in_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (width_trans_in_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (width_trans_in_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (width_trans_in_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (width_trans_in_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (width_trans_in_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (width_trans_in_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (width_trans_in_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (68),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) width_trans_in_agent_rsp_fifo (
		.clk               (pll_0_outclk2_clk),                               //       clk.clk
		.reset             (width_trans_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (width_trans_in_agent_rf_source_data),             //        in.data
		.in_valid          (width_trans_in_agent_rf_source_valid),            //          .valid
		.in_ready          (width_trans_in_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (width_trans_in_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (width_trans_in_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (width_trans_in_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (width_trans_in_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (width_trans_in_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (width_trans_in_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (width_trans_in_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (10),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) width_trans_in_agent_rdata_fifo (
		.clk               (pll_0_outclk2_clk),                             //       clk.clk
		.reset             (width_trans_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (width_trans_in_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (width_trans_in_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (width_trans_in_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (width_trans_in_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (width_trans_in_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (width_trans_in_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_startofpacket  (1'b0),                                          // (terminated)
		.in_endofpacket    (1'b0),                                          // (terminated)
		.out_startofpacket (),                                              // (terminated)
		.out_endofpacket   (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (66),
		.PKT_ORI_BURST_SIZE_L      (64),
		.PKT_RESPONSE_STATUS_H     (63),
		.PKT_RESPONSE_STATUS_L     (62),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_TRANS_LOCK            (29),
		.PKT_BEGIN_BURST           (42),
		.PKT_PROTECTION_H          (57),
		.PKT_PROTECTION_L          (55),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_POSTED          (26),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (48),
		.PKT_SRC_ID_L              (44),
		.PKT_DEST_ID_H             (53),
		.PKT_DEST_ID_L             (49),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (67),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sound_io_agent (
		.clk                     (pll_0_outclk0_clk),                            //             clk.clk
		.reset                   (sound_reset_sink_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sound_io_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sound_io_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sound_io_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sound_io_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sound_io_agent_m0_lock),                       //                .lock
		.m0_readdata             (sound_io_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sound_io_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sound_io_agent_m0_read),                       //                .read
		.m0_waitrequest          (sound_io_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sound_io_agent_m0_writedata),                  //                .writedata
		.m0_write                (sound_io_agent_m0_write),                      //                .write
		.rp_endofpacket          (sound_io_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sound_io_agent_rp_ready),                      //                .ready
		.rp_valid                (sound_io_agent_rp_valid),                      //                .valid
		.rp_data                 (sound_io_agent_rp_data),                       //                .data
		.rp_startofpacket        (sound_io_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sound_io_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sound_io_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sound_io_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sound_io_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sound_io_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sound_io_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sound_io_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sound_io_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sound_io_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sound_io_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sound_io_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sound_io_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sound_io_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sound_io_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sound_io_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sound_io_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),            //                .error
		.rdata_fifo_src_ready    (sound_io_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sound_io_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sound_io_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (68),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sound_io_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                            //       clk.clk
		.reset             (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sound_io_agent_rf_source_data),                //        in.data
		.in_valid          (sound_io_agent_rf_source_valid),               //          .valid
		.in_ready          (sound_io_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (sound_io_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (sound_io_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (sound_io_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (sound_io_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (sound_io_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (sound_io_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (sound_io_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (66),
		.PKT_ORI_BURST_SIZE_L      (64),
		.PKT_RESPONSE_STATUS_H     (63),
		.PKT_RESPONSE_STATUS_L     (62),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_TRANS_LOCK            (29),
		.PKT_BEGIN_BURST           (42),
		.PKT_PROTECTION_H          (57),
		.PKT_PROTECTION_L          (55),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_POSTED          (26),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (48),
		.PKT_SRC_ID_L              (44),
		.PKT_DEST_ID_H             (53),
		.PKT_DEST_ID_L             (49),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (67),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) rtc_io_agent (
		.clk                     (pll_0_outclk0_clk),                            //             clk.clk
		.reset                   (sound_reset_sink_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (rtc_io_agent_m0_address),                      //              m0.address
		.m0_burstcount           (rtc_io_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (rtc_io_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (rtc_io_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (rtc_io_agent_m0_lock),                         //                .lock
		.m0_readdata             (rtc_io_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (rtc_io_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (rtc_io_agent_m0_read),                         //                .read
		.m0_waitrequest          (rtc_io_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (rtc_io_agent_m0_writedata),                    //                .writedata
		.m0_write                (rtc_io_agent_m0_write),                        //                .write
		.rp_endofpacket          (rtc_io_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (rtc_io_agent_rp_ready),                        //                .ready
		.rp_valid                (rtc_io_agent_rp_valid),                        //                .valid
		.rp_data                 (rtc_io_agent_rp_data),                         //                .data
		.rp_startofpacket        (rtc_io_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (rtc_io_burst_adapter_source0_ready),           //              cp.ready
		.cp_valid                (rtc_io_burst_adapter_source0_valid),           //                .valid
		.cp_data                 (rtc_io_burst_adapter_source0_data),            //                .data
		.cp_startofpacket        (rtc_io_burst_adapter_source0_startofpacket),   //                .startofpacket
		.cp_endofpacket          (rtc_io_burst_adapter_source0_endofpacket),     //                .endofpacket
		.cp_channel              (rtc_io_burst_adapter_source0_channel),         //                .channel
		.rf_sink_ready           (rtc_io_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (rtc_io_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (rtc_io_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (rtc_io_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (rtc_io_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (rtc_io_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (rtc_io_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (rtc_io_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (rtc_io_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (rtc_io_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),            //                .error
		.rdata_fifo_src_ready    (rtc_io_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rtc_io_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (rtc_io_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (68),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rtc_io_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                            //       clk.clk
		.reset             (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (rtc_io_agent_rf_source_data),                  //        in.data
		.in_valid          (rtc_io_agent_rf_source_valid),                 //          .valid
		.in_ready          (rtc_io_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (rtc_io_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (rtc_io_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (rtc_io_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (rtc_io_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (rtc_io_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (rtc_io_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (rtc_io_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (66),
		.PKT_ORI_BURST_SIZE_L      (64),
		.PKT_RESPONSE_STATUS_H     (63),
		.PKT_RESPONSE_STATUS_L     (62),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_TRANS_LOCK            (29),
		.PKT_BEGIN_BURST           (42),
		.PKT_PROTECTION_H          (57),
		.PKT_PROTECTION_L          (55),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_POSTED          (26),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (48),
		.PKT_SRC_ID_L              (44),
		.PKT_DEST_ID_H             (53),
		.PKT_DEST_ID_L             (49),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (67),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pit_io_agent (
		.clk                     (pll_0_outclk0_clk),                            //             clk.clk
		.reset                   (sound_reset_sink_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pit_io_agent_m0_address),                      //              m0.address
		.m0_burstcount           (pit_io_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (pit_io_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (pit_io_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (pit_io_agent_m0_lock),                         //                .lock
		.m0_readdata             (pit_io_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (pit_io_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (pit_io_agent_m0_read),                         //                .read
		.m0_waitrequest          (pit_io_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (pit_io_agent_m0_writedata),                    //                .writedata
		.m0_write                (pit_io_agent_m0_write),                        //                .write
		.rp_endofpacket          (pit_io_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (pit_io_agent_rp_ready),                        //                .ready
		.rp_valid                (pit_io_agent_rp_valid),                        //                .valid
		.rp_data                 (pit_io_agent_rp_data),                         //                .data
		.rp_startofpacket        (pit_io_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (pit_io_burst_adapter_source0_ready),           //              cp.ready
		.cp_valid                (pit_io_burst_adapter_source0_valid),           //                .valid
		.cp_data                 (pit_io_burst_adapter_source0_data),            //                .data
		.cp_startofpacket        (pit_io_burst_adapter_source0_startofpacket),   //                .startofpacket
		.cp_endofpacket          (pit_io_burst_adapter_source0_endofpacket),     //                .endofpacket
		.cp_channel              (pit_io_burst_adapter_source0_channel),         //                .channel
		.rf_sink_ready           (pit_io_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (pit_io_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (pit_io_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (pit_io_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (pit_io_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (pit_io_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (pit_io_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (pit_io_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (pit_io_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (pit_io_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),            //                .error
		.rdata_fifo_src_ready    (pit_io_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pit_io_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (pit_io_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (68),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pit_io_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                            //       clk.clk
		.reset             (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pit_io_agent_rf_source_data),                  //        in.data
		.in_valid          (pit_io_agent_rf_source_valid),                 //          .valid
		.in_ready          (pit_io_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (pit_io_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (pit_io_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (pit_io_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (pit_io_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (pit_io_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (pit_io_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (pit_io_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (56),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hdd0_io_agent (
		.clk                     (pll_0_outclk0_clk),                            //             clk.clk
		.reset                   (sound_reset_sink_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (hdd0_io_agent_m0_address),                     //              m0.address
		.m0_burstcount           (hdd0_io_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (hdd0_io_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (hdd0_io_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (hdd0_io_agent_m0_lock),                        //                .lock
		.m0_readdata             (hdd0_io_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (hdd0_io_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (hdd0_io_agent_m0_read),                        //                .read
		.m0_waitrequest          (hdd0_io_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (hdd0_io_agent_m0_writedata),                   //                .writedata
		.m0_write                (hdd0_io_agent_m0_write),                       //                .write
		.rp_endofpacket          (hdd0_io_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (hdd0_io_agent_rp_ready),                       //                .ready
		.rp_valid                (hdd0_io_agent_rp_valid),                       //                .valid
		.rp_data                 (hdd0_io_agent_rp_data),                        //                .data
		.rp_startofpacket        (hdd0_io_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_005_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                      //                .channel
		.rf_sink_ready           (hdd0_io_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (hdd0_io_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (hdd0_io_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (hdd0_io_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (hdd0_io_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (hdd0_io_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (hdd0_io_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (hdd0_io_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (hdd0_io_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (hdd0_io_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),            //                .error
		.rdata_fifo_src_ready    (hdd0_io_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hdd0_io_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (hdd0_io_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hdd0_io_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                            //       clk.clk
		.reset             (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hdd0_io_agent_rf_source_data),                 //        in.data
		.in_valid          (hdd0_io_agent_rf_source_valid),                //          .valid
		.in_ready          (hdd0_io_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (hdd0_io_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (hdd0_io_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (hdd0_io_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (hdd0_io_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (hdd0_io_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (hdd0_io_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (hdd0_io_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (66),
		.PKT_ORI_BURST_SIZE_L      (64),
		.PKT_RESPONSE_STATUS_H     (63),
		.PKT_RESPONSE_STATUS_L     (62),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_TRANS_LOCK            (29),
		.PKT_BEGIN_BURST           (42),
		.PKT_PROTECTION_H          (57),
		.PKT_PROTECTION_L          (55),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_POSTED          (26),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (48),
		.PKT_SRC_ID_L              (44),
		.PKT_DEST_ID_H             (53),
		.PKT_DEST_ID_L             (49),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (67),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) floppy0_io_agent (
		.clk                     (pll_0_outclk0_clk),                              //             clk.clk
		.reset                   (sound_reset_sink_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (floppy0_io_agent_m0_address),                    //              m0.address
		.m0_burstcount           (floppy0_io_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (floppy0_io_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (floppy0_io_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (floppy0_io_agent_m0_lock),                       //                .lock
		.m0_readdata             (floppy0_io_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (floppy0_io_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (floppy0_io_agent_m0_read),                       //                .read
		.m0_waitrequest          (floppy0_io_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (floppy0_io_agent_m0_writedata),                  //                .writedata
		.m0_write                (floppy0_io_agent_m0_write),                      //                .write
		.rp_endofpacket          (floppy0_io_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (floppy0_io_agent_rp_ready),                      //                .ready
		.rp_valid                (floppy0_io_agent_rp_valid),                      //                .valid
		.rp_data                 (floppy0_io_agent_rp_data),                       //                .data
		.rp_startofpacket        (floppy0_io_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (floppy0_io_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (floppy0_io_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (floppy0_io_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (floppy0_io_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (floppy0_io_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (floppy0_io_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (floppy0_io_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (floppy0_io_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (floppy0_io_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (floppy0_io_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (floppy0_io_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (floppy0_io_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (floppy0_io_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (floppy0_io_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (floppy0_io_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (floppy0_io_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),              //                .error
		.rdata_fifo_src_ready    (floppy0_io_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (floppy0_io_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (floppy0_io_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (68),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) floppy0_io_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                            //       clk.clk
		.reset             (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (floppy0_io_agent_rf_source_data),              //        in.data
		.in_valid          (floppy0_io_agent_rf_source_valid),             //          .valid
		.in_ready          (floppy0_io_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (floppy0_io_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (floppy0_io_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (floppy0_io_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (floppy0_io_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (floppy0_io_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (floppy0_io_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (floppy0_io_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (66),
		.PKT_ORI_BURST_SIZE_L      (64),
		.PKT_RESPONSE_STATUS_H     (63),
		.PKT_RESPONSE_STATUS_L     (62),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_TRANS_LOCK            (29),
		.PKT_BEGIN_BURST           (42),
		.PKT_PROTECTION_H          (57),
		.PKT_PROTECTION_L          (55),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_POSTED          (26),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (48),
		.PKT_SRC_ID_L              (44),
		.PKT_DEST_ID_H             (53),
		.PKT_DEST_ID_L             (49),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (67),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ps2_io_agent (
		.clk                     (pll_0_outclk0_clk),                            //             clk.clk
		.reset                   (sound_reset_sink_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (ps2_io_agent_m0_address),                      //              m0.address
		.m0_burstcount           (ps2_io_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (ps2_io_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (ps2_io_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (ps2_io_agent_m0_lock),                         //                .lock
		.m0_readdata             (ps2_io_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (ps2_io_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (ps2_io_agent_m0_read),                         //                .read
		.m0_waitrequest          (ps2_io_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (ps2_io_agent_m0_writedata),                    //                .writedata
		.m0_write                (ps2_io_agent_m0_write),                        //                .write
		.rp_endofpacket          (ps2_io_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (ps2_io_agent_rp_ready),                        //                .ready
		.rp_valid                (ps2_io_agent_rp_valid),                        //                .valid
		.rp_data                 (ps2_io_agent_rp_data),                         //                .data
		.rp_startofpacket        (ps2_io_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (ps2_io_burst_adapter_source0_ready),           //              cp.ready
		.cp_valid                (ps2_io_burst_adapter_source0_valid),           //                .valid
		.cp_data                 (ps2_io_burst_adapter_source0_data),            //                .data
		.cp_startofpacket        (ps2_io_burst_adapter_source0_startofpacket),   //                .startofpacket
		.cp_endofpacket          (ps2_io_burst_adapter_source0_endofpacket),     //                .endofpacket
		.cp_channel              (ps2_io_burst_adapter_source0_channel),         //                .channel
		.rf_sink_ready           (ps2_io_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (ps2_io_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (ps2_io_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (ps2_io_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (ps2_io_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (ps2_io_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (ps2_io_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (ps2_io_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (ps2_io_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (ps2_io_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),            //                .error
		.rdata_fifo_src_ready    (ps2_io_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ps2_io_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (ps2_io_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (68),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ps2_io_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                            //       clk.clk
		.reset             (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ps2_io_agent_rf_source_data),                  //        in.data
		.in_valid          (ps2_io_agent_rf_source_valid),                 //          .valid
		.in_ready          (ps2_io_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (ps2_io_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (ps2_io_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (ps2_io_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (ps2_io_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (ps2_io_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (ps2_io_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (ps2_io_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (56),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hdd1_io_agent (
		.clk                     (pll_0_outclk0_clk),                            //             clk.clk
		.reset                   (sound_reset_sink_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (hdd1_io_agent_m0_address),                     //              m0.address
		.m0_burstcount           (hdd1_io_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (hdd1_io_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (hdd1_io_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (hdd1_io_agent_m0_lock),                        //                .lock
		.m0_readdata             (hdd1_io_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (hdd1_io_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (hdd1_io_agent_m0_read),                        //                .read
		.m0_waitrequest          (hdd1_io_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (hdd1_io_agent_m0_writedata),                   //                .writedata
		.m0_write                (hdd1_io_agent_m0_write),                       //                .write
		.rp_endofpacket          (hdd1_io_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (hdd1_io_agent_rp_ready),                       //                .ready
		.rp_valid                (hdd1_io_agent_rp_valid),                       //                .valid
		.rp_data                 (hdd1_io_agent_rp_data),                        //                .data
		.rp_startofpacket        (hdd1_io_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_008_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                      //                .channel
		.rf_sink_ready           (hdd1_io_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (hdd1_io_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (hdd1_io_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (hdd1_io_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (hdd1_io_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (hdd1_io_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (hdd1_io_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (hdd1_io_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (hdd1_io_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (hdd1_io_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),            //                .error
		.rdata_fifo_src_ready    (hdd1_io_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hdd1_io_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (hdd1_io_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hdd1_io_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                            //       clk.clk
		.reset             (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hdd1_io_agent_rf_source_data),                 //        in.data
		.in_valid          (hdd1_io_agent_rf_source_valid),                //          .valid
		.in_ready          (hdd1_io_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (hdd1_io_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (hdd1_io_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (hdd1_io_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (hdd1_io_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (hdd1_io_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (hdd1_io_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (hdd1_io_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (66),
		.PKT_ORI_BURST_SIZE_L      (64),
		.PKT_RESPONSE_STATUS_H     (63),
		.PKT_RESPONSE_STATUS_L     (62),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_TRANS_LOCK            (29),
		.PKT_BEGIN_BURST           (42),
		.PKT_PROTECTION_H          (57),
		.PKT_PROTECTION_L          (55),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_POSTED          (26),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (48),
		.PKT_SRC_ID_L              (44),
		.PKT_DEST_ID_H             (53),
		.PKT_DEST_ID_L             (49),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (67),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hddext_0x370_io_agent (
		.clk                     (pll_0_outclk0_clk),                                   //             clk.clk
		.reset                   (sound_reset_sink_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (hddext_0x370_io_agent_m0_address),                    //              m0.address
		.m0_burstcount           (hddext_0x370_io_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (hddext_0x370_io_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (hddext_0x370_io_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (hddext_0x370_io_agent_m0_lock),                       //                .lock
		.m0_readdata             (hddext_0x370_io_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (hddext_0x370_io_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (hddext_0x370_io_agent_m0_read),                       //                .read
		.m0_waitrequest          (hddext_0x370_io_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (hddext_0x370_io_agent_m0_writedata),                  //                .writedata
		.m0_write                (hddext_0x370_io_agent_m0_write),                      //                .write
		.rp_endofpacket          (hddext_0x370_io_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (hddext_0x370_io_agent_rp_ready),                      //                .ready
		.rp_valid                (hddext_0x370_io_agent_rp_valid),                      //                .valid
		.rp_data                 (hddext_0x370_io_agent_rp_data),                       //                .data
		.rp_startofpacket        (hddext_0x370_io_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (hddext_0x370_io_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (hddext_0x370_io_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (hddext_0x370_io_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (hddext_0x370_io_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (hddext_0x370_io_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (hddext_0x370_io_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (hddext_0x370_io_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (hddext_0x370_io_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (hddext_0x370_io_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (hddext_0x370_io_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (hddext_0x370_io_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (hddext_0x370_io_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (hddext_0x370_io_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (hddext_0x370_io_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (hddext_0x370_io_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (hddext_0x370_io_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                   // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                   //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                    //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                   //                .error
		.rdata_fifo_src_ready    (hddext_0x370_io_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hddext_0x370_io_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (hddext_0x370_io_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (68),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hddext_0x370_io_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                //       clk.clk
		.reset             (sound_reset_sink_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (hddext_0x370_io_agent_rf_source_data),             //        in.data
		.in_valid          (hddext_0x370_io_agent_rf_source_valid),            //          .valid
		.in_ready          (hddext_0x370_io_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hddext_0x370_io_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hddext_0x370_io_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hddext_0x370_io_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hddext_0x370_io_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hddext_0x370_io_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hddext_0x370_io_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hddext_0x370_io_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (66),
		.PKT_ORI_BURST_SIZE_L      (64),
		.PKT_RESPONSE_STATUS_H     (63),
		.PKT_RESPONSE_STATUS_L     (62),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_TRANS_LOCK            (29),
		.PKT_BEGIN_BURST           (42),
		.PKT_PROTECTION_H          (57),
		.PKT_PROTECTION_L          (55),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_POSTED          (26),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (48),
		.PKT_SRC_ID_L              (44),
		.PKT_DEST_ID_H             (53),
		.PKT_DEST_ID_L             (49),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (67),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) vga_io_b_agent (
		.clk                     (pll_0_outclk0_clk),                            //             clk.clk
		.reset                   (sound_reset_sink_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (vga_io_b_agent_m0_address),                    //              m0.address
		.m0_burstcount           (vga_io_b_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (vga_io_b_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (vga_io_b_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (vga_io_b_agent_m0_lock),                       //                .lock
		.m0_readdata             (vga_io_b_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (vga_io_b_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (vga_io_b_agent_m0_read),                       //                .read
		.m0_waitrequest          (vga_io_b_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (vga_io_b_agent_m0_writedata),                  //                .writedata
		.m0_write                (vga_io_b_agent_m0_write),                      //                .write
		.rp_endofpacket          (vga_io_b_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (vga_io_b_agent_rp_ready),                      //                .ready
		.rp_valid                (vga_io_b_agent_rp_valid),                      //                .valid
		.rp_data                 (vga_io_b_agent_rp_data),                       //                .data
		.rp_startofpacket        (vga_io_b_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (vga_io_b_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (vga_io_b_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (vga_io_b_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (vga_io_b_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (vga_io_b_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (vga_io_b_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (vga_io_b_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (vga_io_b_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (vga_io_b_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (vga_io_b_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (vga_io_b_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (vga_io_b_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (vga_io_b_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (vga_io_b_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (vga_io_b_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (vga_io_b_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),            //                .error
		.rdata_fifo_src_ready    (vga_io_b_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vga_io_b_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (vga_io_b_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (68),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_io_b_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                            //       clk.clk
		.reset             (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (vga_io_b_agent_rf_source_data),                //        in.data
		.in_valid          (vga_io_b_agent_rf_source_valid),               //          .valid
		.in_ready          (vga_io_b_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (vga_io_b_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (vga_io_b_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (vga_io_b_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (vga_io_b_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (vga_io_b_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (vga_io_b_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (vga_io_b_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (66),
		.PKT_ORI_BURST_SIZE_L      (64),
		.PKT_RESPONSE_STATUS_H     (63),
		.PKT_RESPONSE_STATUS_L     (62),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_TRANS_LOCK            (29),
		.PKT_BEGIN_BURST           (42),
		.PKT_PROTECTION_H          (57),
		.PKT_PROTECTION_L          (55),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_POSTED          (26),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (48),
		.PKT_SRC_ID_L              (44),
		.PKT_DEST_ID_H             (53),
		.PKT_DEST_ID_L             (49),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (67),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) vga_io_c_agent (
		.clk                     (pll_0_outclk0_clk),                            //             clk.clk
		.reset                   (sound_reset_sink_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (vga_io_c_agent_m0_address),                    //              m0.address
		.m0_burstcount           (vga_io_c_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (vga_io_c_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (vga_io_c_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (vga_io_c_agent_m0_lock),                       //                .lock
		.m0_readdata             (vga_io_c_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (vga_io_c_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (vga_io_c_agent_m0_read),                       //                .read
		.m0_waitrequest          (vga_io_c_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (vga_io_c_agent_m0_writedata),                  //                .writedata
		.m0_write                (vga_io_c_agent_m0_write),                      //                .write
		.rp_endofpacket          (vga_io_c_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (vga_io_c_agent_rp_ready),                      //                .ready
		.rp_valid                (vga_io_c_agent_rp_valid),                      //                .valid
		.rp_data                 (vga_io_c_agent_rp_data),                       //                .data
		.rp_startofpacket        (vga_io_c_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (vga_io_c_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (vga_io_c_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (vga_io_c_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (vga_io_c_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (vga_io_c_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (vga_io_c_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (vga_io_c_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (vga_io_c_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (vga_io_c_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (vga_io_c_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (vga_io_c_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (vga_io_c_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (vga_io_c_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (vga_io_c_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (vga_io_c_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (vga_io_c_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),            //                .error
		.rdata_fifo_src_ready    (vga_io_c_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vga_io_c_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (vga_io_c_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (68),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_io_c_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                            //       clk.clk
		.reset             (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (vga_io_c_agent_rf_source_data),                //        in.data
		.in_valid          (vga_io_c_agent_rf_source_valid),               //          .valid
		.in_ready          (vga_io_c_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (vga_io_c_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (vga_io_c_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (vga_io_c_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (vga_io_c_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (vga_io_c_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (vga_io_c_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (vga_io_c_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (66),
		.PKT_ORI_BURST_SIZE_L      (64),
		.PKT_RESPONSE_STATUS_H     (63),
		.PKT_RESPONSE_STATUS_L     (62),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_TRANS_LOCK            (29),
		.PKT_BEGIN_BURST           (42),
		.PKT_PROTECTION_H          (57),
		.PKT_PROTECTION_L          (55),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_POSTED          (26),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (48),
		.PKT_SRC_ID_L              (44),
		.PKT_DEST_ID_H             (53),
		.PKT_DEST_ID_L             (49),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (67),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) vga_io_d_agent (
		.clk                     (pll_0_outclk0_clk),                            //             clk.clk
		.reset                   (sound_reset_sink_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (vga_io_d_agent_m0_address),                    //              m0.address
		.m0_burstcount           (vga_io_d_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (vga_io_d_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (vga_io_d_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (vga_io_d_agent_m0_lock),                       //                .lock
		.m0_readdata             (vga_io_d_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (vga_io_d_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (vga_io_d_agent_m0_read),                       //                .read
		.m0_waitrequest          (vga_io_d_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (vga_io_d_agent_m0_writedata),                  //                .writedata
		.m0_write                (vga_io_d_agent_m0_write),                      //                .write
		.rp_endofpacket          (vga_io_d_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (vga_io_d_agent_rp_ready),                      //                .ready
		.rp_valid                (vga_io_d_agent_rp_valid),                      //                .valid
		.rp_data                 (vga_io_d_agent_rp_data),                       //                .data
		.rp_startofpacket        (vga_io_d_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (vga_io_d_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (vga_io_d_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (vga_io_d_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (vga_io_d_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (vga_io_d_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (vga_io_d_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (vga_io_d_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (vga_io_d_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (vga_io_d_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (vga_io_d_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (vga_io_d_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (vga_io_d_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (vga_io_d_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (vga_io_d_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (vga_io_d_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (vga_io_d_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),            //                .error
		.rdata_fifo_src_ready    (vga_io_d_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (vga_io_d_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (vga_io_d_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (68),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) vga_io_d_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                            //       clk.clk
		.reset             (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (vga_io_d_agent_rf_source_data),                //        in.data
		.in_valid          (vga_io_d_agent_rf_source_valid),               //          .valid
		.in_ready          (vga_io_d_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (vga_io_d_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (vga_io_d_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (vga_io_d_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (vga_io_d_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (vga_io_d_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (vga_io_d_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (vga_io_d_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (66),
		.PKT_ORI_BURST_SIZE_L      (64),
		.PKT_RESPONSE_STATUS_H     (63),
		.PKT_RESPONSE_STATUS_L     (62),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_TRANS_LOCK            (29),
		.PKT_BEGIN_BURST           (42),
		.PKT_PROTECTION_H          (57),
		.PKT_PROTECTION_L          (55),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_POSTED          (26),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (48),
		.PKT_SRC_ID_L              (44),
		.PKT_DEST_ID_H             (53),
		.PKT_DEST_ID_L             (49),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (67),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pc_dma_master_agent (
		.clk                     (pll_0_outclk0_clk),                                 //             clk.clk
		.reset                   (sound_reset_sink_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (pc_dma_master_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pc_dma_master_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pc_dma_master_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pc_dma_master_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pc_dma_master_agent_m0_lock),                       //                .lock
		.m0_readdata             (pc_dma_master_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pc_dma_master_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pc_dma_master_agent_m0_read),                       //                .read
		.m0_waitrequest          (pc_dma_master_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pc_dma_master_agent_m0_writedata),                  //                .writedata
		.m0_write                (pc_dma_master_agent_m0_write),                      //                .write
		.rp_endofpacket          (pc_dma_master_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pc_dma_master_agent_rp_ready),                      //                .ready
		.rp_valid                (pc_dma_master_agent_rp_valid),                      //                .valid
		.rp_data                 (pc_dma_master_agent_rp_data),                       //                .data
		.rp_startofpacket        (pc_dma_master_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pc_dma_master_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pc_dma_master_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pc_dma_master_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pc_dma_master_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pc_dma_master_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pc_dma_master_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pc_dma_master_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pc_dma_master_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pc_dma_master_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pc_dma_master_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pc_dma_master_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pc_dma_master_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pc_dma_master_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pc_dma_master_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pc_dma_master_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pc_dma_master_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (pc_dma_master_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pc_dma_master_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pc_dma_master_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (68),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pc_dma_master_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                              //       clk.clk
		.reset             (sound_reset_sink_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (pc_dma_master_agent_rf_source_data),             //        in.data
		.in_valid          (pc_dma_master_agent_rf_source_valid),            //          .valid
		.in_ready          (pc_dma_master_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pc_dma_master_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pc_dma_master_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pc_dma_master_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pc_dma_master_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pc_dma_master_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pc_dma_master_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pc_dma_master_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (66),
		.PKT_ORI_BURST_SIZE_L      (64),
		.PKT_RESPONSE_STATUS_H     (63),
		.PKT_RESPONSE_STATUS_L     (62),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_TRANS_LOCK            (29),
		.PKT_BEGIN_BURST           (42),
		.PKT_PROTECTION_H          (57),
		.PKT_PROTECTION_L          (55),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_POSTED          (26),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (48),
		.PKT_SRC_ID_L              (44),
		.PKT_DEST_ID_H             (53),
		.PKT_DEST_ID_L             (49),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (67),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pic_master_agent (
		.clk                     (pll_0_outclk0_clk),                              //             clk.clk
		.reset                   (sound_reset_sink_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (pic_master_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pic_master_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pic_master_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pic_master_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pic_master_agent_m0_lock),                       //                .lock
		.m0_readdata             (pic_master_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pic_master_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pic_master_agent_m0_read),                       //                .read
		.m0_waitrequest          (pic_master_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pic_master_agent_m0_writedata),                  //                .writedata
		.m0_write                (pic_master_agent_m0_write),                      //                .write
		.rp_endofpacket          (pic_master_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pic_master_agent_rp_ready),                      //                .ready
		.rp_valid                (pic_master_agent_rp_valid),                      //                .valid
		.rp_data                 (pic_master_agent_rp_data),                       //                .data
		.rp_startofpacket        (pic_master_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pic_master_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pic_master_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pic_master_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pic_master_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pic_master_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pic_master_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pic_master_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pic_master_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pic_master_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pic_master_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pic_master_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pic_master_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pic_master_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pic_master_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pic_master_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pic_master_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),              //                .error
		.rdata_fifo_src_ready    (pic_master_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pic_master_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pic_master_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (68),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pic_master_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                            //       clk.clk
		.reset             (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pic_master_agent_rf_source_data),              //        in.data
		.in_valid          (pic_master_agent_rf_source_valid),             //          .valid
		.in_ready          (pic_master_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (pic_master_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (pic_master_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (pic_master_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (pic_master_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (pic_master_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (pic_master_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (pic_master_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (66),
		.PKT_ORI_BURST_SIZE_L      (64),
		.PKT_RESPONSE_STATUS_H     (63),
		.PKT_RESPONSE_STATUS_L     (62),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_TRANS_LOCK            (29),
		.PKT_BEGIN_BURST           (42),
		.PKT_PROTECTION_H          (57),
		.PKT_PROTECTION_L          (55),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_POSTED          (26),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (48),
		.PKT_SRC_ID_L              (44),
		.PKT_DEST_ID_H             (53),
		.PKT_DEST_ID_L             (49),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (67),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sound_mpu_agent (
		.clk                     (pll_0_outclk0_clk),                             //             clk.clk
		.reset                   (sound_reset_sink_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (sound_mpu_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sound_mpu_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sound_mpu_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sound_mpu_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sound_mpu_agent_m0_lock),                       //                .lock
		.m0_readdata             (sound_mpu_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sound_mpu_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sound_mpu_agent_m0_read),                       //                .read
		.m0_waitrequest          (sound_mpu_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sound_mpu_agent_m0_writedata),                  //                .writedata
		.m0_write                (sound_mpu_agent_m0_write),                      //                .write
		.rp_endofpacket          (sound_mpu_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sound_mpu_agent_rp_ready),                      //                .ready
		.rp_valid                (sound_mpu_agent_rp_valid),                      //                .valid
		.rp_data                 (sound_mpu_agent_rp_data),                       //                .data
		.rp_startofpacket        (sound_mpu_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (sound_mpu_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (sound_mpu_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (sound_mpu_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (sound_mpu_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (sound_mpu_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (sound_mpu_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (sound_mpu_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sound_mpu_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sound_mpu_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sound_mpu_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sound_mpu_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sound_mpu_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sound_mpu_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sound_mpu_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sound_mpu_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sound_mpu_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),             //                .error
		.rdata_fifo_src_ready    (sound_mpu_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sound_mpu_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sound_mpu_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (68),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sound_mpu_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                            //       clk.clk
		.reset             (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sound_mpu_agent_rf_source_data),               //        in.data
		.in_valid          (sound_mpu_agent_rf_source_valid),              //          .valid
		.in_ready          (sound_mpu_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (sound_mpu_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (sound_mpu_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (sound_mpu_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (sound_mpu_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (sound_mpu_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (sound_mpu_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (sound_mpu_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (66),
		.PKT_ORI_BURST_SIZE_L      (64),
		.PKT_RESPONSE_STATUS_H     (63),
		.PKT_RESPONSE_STATUS_L     (62),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_TRANS_LOCK            (29),
		.PKT_BEGIN_BURST           (42),
		.PKT_PROTECTION_H          (57),
		.PKT_PROTECTION_L          (55),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_POSTED          (26),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (48),
		.PKT_SRC_ID_L              (44),
		.PKT_DEST_ID_H             (53),
		.PKT_DEST_ID_L             (49),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (67),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pc_dma_page_agent (
		.clk                     (pll_0_outclk0_clk),                               //             clk.clk
		.reset                   (sound_reset_sink_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (pc_dma_page_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pc_dma_page_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pc_dma_page_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pc_dma_page_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pc_dma_page_agent_m0_lock),                       //                .lock
		.m0_readdata             (pc_dma_page_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pc_dma_page_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pc_dma_page_agent_m0_read),                       //                .read
		.m0_waitrequest          (pc_dma_page_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pc_dma_page_agent_m0_writedata),                  //                .writedata
		.m0_write                (pc_dma_page_agent_m0_write),                      //                .write
		.rp_endofpacket          (pc_dma_page_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pc_dma_page_agent_rp_ready),                      //                .ready
		.rp_valid                (pc_dma_page_agent_rp_valid),                      //                .valid
		.rp_data                 (pc_dma_page_agent_rp_data),                       //                .data
		.rp_startofpacket        (pc_dma_page_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pc_dma_page_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pc_dma_page_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pc_dma_page_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pc_dma_page_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pc_dma_page_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pc_dma_page_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pc_dma_page_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pc_dma_page_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pc_dma_page_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pc_dma_page_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pc_dma_page_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pc_dma_page_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pc_dma_page_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pc_dma_page_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pc_dma_page_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pc_dma_page_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_016_out_0_ready),               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_016_out_0_valid),               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_016_out_0_data),                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_016_out_0_error),               //                .error
		.rdata_fifo_src_ready    (pc_dma_page_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pc_dma_page_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pc_dma_page_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (68),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pc_dma_page_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                            //       clk.clk
		.reset             (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pc_dma_page_agent_rf_source_data),             //        in.data
		.in_valid          (pc_dma_page_agent_rf_source_valid),            //          .valid
		.in_ready          (pc_dma_page_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pc_dma_page_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pc_dma_page_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pc_dma_page_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pc_dma_page_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pc_dma_page_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pc_dma_page_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pc_dma_page_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (66),
		.PKT_ORI_BURST_SIZE_L      (64),
		.PKT_RESPONSE_STATUS_H     (63),
		.PKT_RESPONSE_STATUS_L     (62),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_TRANS_LOCK            (29),
		.PKT_BEGIN_BURST           (42),
		.PKT_PROTECTION_H          (57),
		.PKT_PROTECTION_L          (55),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_POSTED          (26),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (48),
		.PKT_SRC_ID_L              (44),
		.PKT_DEST_ID_H             (53),
		.PKT_DEST_ID_L             (49),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (67),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pc_dma_slave_agent (
		.clk                     (pll_0_outclk0_clk),                                //             clk.clk
		.reset                   (sound_reset_sink_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (pc_dma_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pc_dma_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pc_dma_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pc_dma_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pc_dma_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (pc_dma_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pc_dma_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pc_dma_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (pc_dma_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pc_dma_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (pc_dma_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (pc_dma_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pc_dma_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (pc_dma_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (pc_dma_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (pc_dma_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pc_dma_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pc_dma_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pc_dma_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pc_dma_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pc_dma_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pc_dma_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pc_dma_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pc_dma_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pc_dma_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pc_dma_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pc_dma_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pc_dma_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pc_dma_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pc_dma_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pc_dma_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pc_dma_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_017_out_0_ready),                // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_017_out_0_valid),                //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_017_out_0_data),                 //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_017_out_0_error),                //                .error
		.rdata_fifo_src_ready    (pc_dma_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pc_dma_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pc_dma_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (68),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pc_dma_slave_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                             //       clk.clk
		.reset             (sound_reset_sink_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (pc_dma_slave_agent_rf_source_data),             //        in.data
		.in_valid          (pc_dma_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (pc_dma_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pc_dma_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pc_dma_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pc_dma_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pc_dma_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pc_dma_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pc_dma_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pc_dma_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (66),
		.PKT_ORI_BURST_SIZE_L      (64),
		.PKT_RESPONSE_STATUS_H     (63),
		.PKT_RESPONSE_STATUS_L     (62),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_TRANS_LOCK            (29),
		.PKT_BEGIN_BURST           (42),
		.PKT_PROTECTION_H          (57),
		.PKT_PROTECTION_L          (55),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_POSTED          (26),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (48),
		.PKT_SRC_ID_L              (44),
		.PKT_DEST_ID_H             (53),
		.PKT_DEST_ID_L             (49),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (67),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pic_slave_agent (
		.clk                     (pll_0_outclk0_clk),                             //             clk.clk
		.reset                   (sound_reset_sink_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (pic_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (pic_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (pic_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (pic_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (pic_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (pic_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (pic_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (pic_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (pic_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (pic_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (pic_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (pic_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (pic_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (pic_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (pic_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (pic_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (pic_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (pic_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (pic_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (pic_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (pic_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (pic_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (pic_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (pic_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (pic_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (pic_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (pic_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (pic_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (pic_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (pic_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (pic_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (pic_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_018_out_0_ready),             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_018_out_0_valid),             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_018_out_0_data),              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_018_out_0_error),             //                .error
		.rdata_fifo_src_ready    (pic_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pic_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (pic_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (68),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pic_slave_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                            //       clk.clk
		.reset             (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pic_slave_agent_rf_source_data),               //        in.data
		.in_valid          (pic_slave_agent_rf_source_valid),              //          .valid
		.in_ready          (pic_slave_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (pic_slave_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (pic_slave_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (pic_slave_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (pic_slave_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (pic_slave_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (pic_slave_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (pic_slave_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (66),
		.PKT_ORI_BURST_SIZE_L      (64),
		.PKT_RESPONSE_STATUS_H     (63),
		.PKT_RESPONSE_STATUS_L     (62),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_TRANS_LOCK            (29),
		.PKT_BEGIN_BURST           (42),
		.PKT_PROTECTION_H          (57),
		.PKT_PROTECTION_L          (55),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_POSTED          (26),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (48),
		.PKT_SRC_ID_L              (44),
		.PKT_DEST_ID_H             (53),
		.PKT_DEST_ID_L             (49),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (20),
		.ST_DATA_W                 (67),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) ps2_sysctl_agent (
		.clk                     (pll_0_outclk0_clk),                              //             clk.clk
		.reset                   (sound_reset_sink_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (ps2_sysctl_agent_m0_address),                    //              m0.address
		.m0_burstcount           (ps2_sysctl_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (ps2_sysctl_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (ps2_sysctl_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (ps2_sysctl_agent_m0_lock),                       //                .lock
		.m0_readdata             (ps2_sysctl_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (ps2_sysctl_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (ps2_sysctl_agent_m0_read),                       //                .read
		.m0_waitrequest          (ps2_sysctl_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (ps2_sysctl_agent_m0_writedata),                  //                .writedata
		.m0_write                (ps2_sysctl_agent_m0_write),                      //                .write
		.rp_endofpacket          (ps2_sysctl_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (ps2_sysctl_agent_rp_ready),                      //                .ready
		.rp_valid                (ps2_sysctl_agent_rp_valid),                      //                .valid
		.rp_data                 (ps2_sysctl_agent_rp_data),                       //                .data
		.rp_startofpacket        (ps2_sysctl_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (ps2_sysctl_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (ps2_sysctl_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (ps2_sysctl_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (ps2_sysctl_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (ps2_sysctl_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (ps2_sysctl_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (ps2_sysctl_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (ps2_sysctl_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (ps2_sysctl_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (ps2_sysctl_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (ps2_sysctl_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (ps2_sysctl_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (ps2_sysctl_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (ps2_sysctl_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (ps2_sysctl_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (ps2_sysctl_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_019_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_019_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_019_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_019_out_0_error),              //                .error
		.rdata_fifo_src_ready    (ps2_sysctl_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ps2_sysctl_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (ps2_sysctl_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (68),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ps2_sysctl_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                            //       clk.clk
		.reset             (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (ps2_sysctl_agent_rf_source_data),              //        in.data
		.in_valid          (ps2_sysctl_agent_rf_source_valid),             //          .valid
		.in_ready          (ps2_sysctl_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (ps2_sysctl_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (ps2_sysctl_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (ps2_sysctl_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (ps2_sysctl_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (ps2_sysctl_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (ps2_sysctl_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (ps2_sysctl_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	system_mm_interconnect_0_router router (
		.sink_ready         (ao486_avalon_io_agent_cp_ready),               //      sink.ready
		.sink_valid         (ao486_avalon_io_agent_cp_valid),               //          .valid
		.sink_data          (ao486_avalon_io_agent_cp_data),                //          .data
		.sink_startofpacket (ao486_avalon_io_agent_cp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (ao486_avalon_io_agent_cp_endofpacket),         //          .endofpacket
		.clk                (pll_0_outclk0_clk),                            //       clk.clk
		.reset              (ao486_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                             //       src.ready
		.src_valid          (router_src_valid),                             //          .valid
		.src_data           (router_src_data),                              //          .data
		.src_channel        (router_src_channel),                           //          .channel
		.src_startofpacket  (router_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                        //          .endofpacket
	);

	system_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (sound_fm_agent_rp_ready),                      //      sink.ready
		.sink_valid         (sound_fm_agent_rp_valid),                      //          .valid
		.sink_data          (sound_fm_agent_rp_data),                       //          .data
		.sink_startofpacket (sound_fm_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (sound_fm_agent_rp_endofpacket),                //          .endofpacket
		.clk                (pll_0_outclk0_clk),                            //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                         //       src.ready
		.src_valid          (router_001_src_valid),                         //          .valid
		.src_data           (router_001_src_data),                          //          .data
		.src_channel        (router_001_src_channel),                       //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                    //          .endofpacket
	);

	system_mm_interconnect_0_router_001 router_002 (
		.sink_ready         (width_trans_in_agent_rp_ready),                 //      sink.ready
		.sink_valid         (width_trans_in_agent_rp_valid),                 //          .valid
		.sink_data          (width_trans_in_agent_rp_data),                  //          .data
		.sink_startofpacket (width_trans_in_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (width_trans_in_agent_rp_endofpacket),           //          .endofpacket
		.clk                (pll_0_outclk2_clk),                             //       clk.clk
		.reset              (width_trans_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                          //       src.ready
		.src_valid          (router_002_src_valid),                          //          .valid
		.src_data           (router_002_src_data),                           //          .data
		.src_channel        (router_002_src_channel),                        //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                     //          .endofpacket
	);

	system_mm_interconnect_0_router_001 router_003 (
		.sink_ready         (sound_io_agent_rp_ready),                      //      sink.ready
		.sink_valid         (sound_io_agent_rp_valid),                      //          .valid
		.sink_data          (sound_io_agent_rp_data),                       //          .data
		.sink_startofpacket (sound_io_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (sound_io_agent_rp_endofpacket),                //          .endofpacket
		.clk                (pll_0_outclk0_clk),                            //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                         //       src.ready
		.src_valid          (router_003_src_valid),                         //          .valid
		.src_data           (router_003_src_data),                          //          .data
		.src_channel        (router_003_src_channel),                       //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                    //          .endofpacket
	);

	system_mm_interconnect_0_router_001 router_004 (
		.sink_ready         (rtc_io_agent_rp_ready),                        //      sink.ready
		.sink_valid         (rtc_io_agent_rp_valid),                        //          .valid
		.sink_data          (rtc_io_agent_rp_data),                         //          .data
		.sink_startofpacket (rtc_io_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (rtc_io_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (pll_0_outclk0_clk),                            //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                         //       src.ready
		.src_valid          (router_004_src_valid),                         //          .valid
		.src_data           (router_004_src_data),                          //          .data
		.src_channel        (router_004_src_channel),                       //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                    //          .endofpacket
	);

	system_mm_interconnect_0_router_001 router_005 (
		.sink_ready         (pit_io_agent_rp_ready),                        //      sink.ready
		.sink_valid         (pit_io_agent_rp_valid),                        //          .valid
		.sink_data          (pit_io_agent_rp_data),                         //          .data
		.sink_startofpacket (pit_io_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (pit_io_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (pll_0_outclk0_clk),                            //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                         //       src.ready
		.src_valid          (router_005_src_valid),                         //          .valid
		.src_data           (router_005_src_data),                          //          .data
		.src_channel        (router_005_src_channel),                       //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                    //          .endofpacket
	);

	system_mm_interconnect_0_router_006 router_006 (
		.sink_ready         (hdd0_io_agent_rp_ready),                       //      sink.ready
		.sink_valid         (hdd0_io_agent_rp_valid),                       //          .valid
		.sink_data          (hdd0_io_agent_rp_data),                        //          .data
		.sink_startofpacket (hdd0_io_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (hdd0_io_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (pll_0_outclk0_clk),                            //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                         //       src.ready
		.src_valid          (router_006_src_valid),                         //          .valid
		.src_data           (router_006_src_data),                          //          .data
		.src_channel        (router_006_src_channel),                       //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                    //          .endofpacket
	);

	system_mm_interconnect_0_router_001 router_007 (
		.sink_ready         (floppy0_io_agent_rp_ready),                    //      sink.ready
		.sink_valid         (floppy0_io_agent_rp_valid),                    //          .valid
		.sink_data          (floppy0_io_agent_rp_data),                     //          .data
		.sink_startofpacket (floppy0_io_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (floppy0_io_agent_rp_endofpacket),              //          .endofpacket
		.clk                (pll_0_outclk0_clk),                            //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                         //       src.ready
		.src_valid          (router_007_src_valid),                         //          .valid
		.src_data           (router_007_src_data),                          //          .data
		.src_channel        (router_007_src_channel),                       //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                    //          .endofpacket
	);

	system_mm_interconnect_0_router_001 router_008 (
		.sink_ready         (ps2_io_agent_rp_ready),                        //      sink.ready
		.sink_valid         (ps2_io_agent_rp_valid),                        //          .valid
		.sink_data          (ps2_io_agent_rp_data),                         //          .data
		.sink_startofpacket (ps2_io_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (ps2_io_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (pll_0_outclk0_clk),                            //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                         //       src.ready
		.src_valid          (router_008_src_valid),                         //          .valid
		.src_data           (router_008_src_data),                          //          .data
		.src_channel        (router_008_src_channel),                       //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                    //          .endofpacket
	);

	system_mm_interconnect_0_router_006 router_009 (
		.sink_ready         (hdd1_io_agent_rp_ready),                       //      sink.ready
		.sink_valid         (hdd1_io_agent_rp_valid),                       //          .valid
		.sink_data          (hdd1_io_agent_rp_data),                        //          .data
		.sink_startofpacket (hdd1_io_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (hdd1_io_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (pll_0_outclk0_clk),                            //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                         //       src.ready
		.src_valid          (router_009_src_valid),                         //          .valid
		.src_data           (router_009_src_data),                          //          .data
		.src_channel        (router_009_src_channel),                       //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                    //          .endofpacket
	);

	system_mm_interconnect_0_router_001 router_010 (
		.sink_ready         (hddext_0x370_io_agent_rp_ready),               //      sink.ready
		.sink_valid         (hddext_0x370_io_agent_rp_valid),               //          .valid
		.sink_data          (hddext_0x370_io_agent_rp_data),                //          .data
		.sink_startofpacket (hddext_0x370_io_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (hddext_0x370_io_agent_rp_endofpacket),         //          .endofpacket
		.clk                (pll_0_outclk0_clk),                            //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                         //       src.ready
		.src_valid          (router_010_src_valid),                         //          .valid
		.src_data           (router_010_src_data),                          //          .data
		.src_channel        (router_010_src_channel),                       //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                    //          .endofpacket
	);

	system_mm_interconnect_0_router_001 router_011 (
		.sink_ready         (vga_io_b_agent_rp_ready),                      //      sink.ready
		.sink_valid         (vga_io_b_agent_rp_valid),                      //          .valid
		.sink_data          (vga_io_b_agent_rp_data),                       //          .data
		.sink_startofpacket (vga_io_b_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (vga_io_b_agent_rp_endofpacket),                //          .endofpacket
		.clk                (pll_0_outclk0_clk),                            //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                         //       src.ready
		.src_valid          (router_011_src_valid),                         //          .valid
		.src_data           (router_011_src_data),                          //          .data
		.src_channel        (router_011_src_channel),                       //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                    //          .endofpacket
	);

	system_mm_interconnect_0_router_001 router_012 (
		.sink_ready         (vga_io_c_agent_rp_ready),                      //      sink.ready
		.sink_valid         (vga_io_c_agent_rp_valid),                      //          .valid
		.sink_data          (vga_io_c_agent_rp_data),                       //          .data
		.sink_startofpacket (vga_io_c_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (vga_io_c_agent_rp_endofpacket),                //          .endofpacket
		.clk                (pll_0_outclk0_clk),                            //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                         //       src.ready
		.src_valid          (router_012_src_valid),                         //          .valid
		.src_data           (router_012_src_data),                          //          .data
		.src_channel        (router_012_src_channel),                       //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                    //          .endofpacket
	);

	system_mm_interconnect_0_router_001 router_013 (
		.sink_ready         (vga_io_d_agent_rp_ready),                      //      sink.ready
		.sink_valid         (vga_io_d_agent_rp_valid),                      //          .valid
		.sink_data          (vga_io_d_agent_rp_data),                       //          .data
		.sink_startofpacket (vga_io_d_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (vga_io_d_agent_rp_endofpacket),                //          .endofpacket
		.clk                (pll_0_outclk0_clk),                            //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                         //       src.ready
		.src_valid          (router_013_src_valid),                         //          .valid
		.src_data           (router_013_src_data),                          //          .data
		.src_channel        (router_013_src_channel),                       //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                    //          .endofpacket
	);

	system_mm_interconnect_0_router_001 router_014 (
		.sink_ready         (pc_dma_master_agent_rp_ready),                 //      sink.ready
		.sink_valid         (pc_dma_master_agent_rp_valid),                 //          .valid
		.sink_data          (pc_dma_master_agent_rp_data),                  //          .data
		.sink_startofpacket (pc_dma_master_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (pc_dma_master_agent_rp_endofpacket),           //          .endofpacket
		.clk                (pll_0_outclk0_clk),                            //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                         //       src.ready
		.src_valid          (router_014_src_valid),                         //          .valid
		.src_data           (router_014_src_data),                          //          .data
		.src_channel        (router_014_src_channel),                       //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                    //          .endofpacket
	);

	system_mm_interconnect_0_router_001 router_015 (
		.sink_ready         (pic_master_agent_rp_ready),                    //      sink.ready
		.sink_valid         (pic_master_agent_rp_valid),                    //          .valid
		.sink_data          (pic_master_agent_rp_data),                     //          .data
		.sink_startofpacket (pic_master_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (pic_master_agent_rp_endofpacket),              //          .endofpacket
		.clk                (pll_0_outclk0_clk),                            //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                         //       src.ready
		.src_valid          (router_015_src_valid),                         //          .valid
		.src_data           (router_015_src_data),                          //          .data
		.src_channel        (router_015_src_channel),                       //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                    //          .endofpacket
	);

	system_mm_interconnect_0_router_001 router_016 (
		.sink_ready         (sound_mpu_agent_rp_ready),                     //      sink.ready
		.sink_valid         (sound_mpu_agent_rp_valid),                     //          .valid
		.sink_data          (sound_mpu_agent_rp_data),                      //          .data
		.sink_startofpacket (sound_mpu_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (sound_mpu_agent_rp_endofpacket),               //          .endofpacket
		.clk                (pll_0_outclk0_clk),                            //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                         //       src.ready
		.src_valid          (router_016_src_valid),                         //          .valid
		.src_data           (router_016_src_data),                          //          .data
		.src_channel        (router_016_src_channel),                       //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                    //          .endofpacket
	);

	system_mm_interconnect_0_router_001 router_017 (
		.sink_ready         (pc_dma_page_agent_rp_ready),                   //      sink.ready
		.sink_valid         (pc_dma_page_agent_rp_valid),                   //          .valid
		.sink_data          (pc_dma_page_agent_rp_data),                    //          .data
		.sink_startofpacket (pc_dma_page_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (pc_dma_page_agent_rp_endofpacket),             //          .endofpacket
		.clk                (pll_0_outclk0_clk),                            //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                         //       src.ready
		.src_valid          (router_017_src_valid),                         //          .valid
		.src_data           (router_017_src_data),                          //          .data
		.src_channel        (router_017_src_channel),                       //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                    //          .endofpacket
	);

	system_mm_interconnect_0_router_001 router_018 (
		.sink_ready         (pc_dma_slave_agent_rp_ready),                  //      sink.ready
		.sink_valid         (pc_dma_slave_agent_rp_valid),                  //          .valid
		.sink_data          (pc_dma_slave_agent_rp_data),                   //          .data
		.sink_startofpacket (pc_dma_slave_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (pc_dma_slave_agent_rp_endofpacket),            //          .endofpacket
		.clk                (pll_0_outclk0_clk),                            //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                         //       src.ready
		.src_valid          (router_018_src_valid),                         //          .valid
		.src_data           (router_018_src_data),                          //          .data
		.src_channel        (router_018_src_channel),                       //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                    //          .endofpacket
	);

	system_mm_interconnect_0_router_001 router_019 (
		.sink_ready         (pic_slave_agent_rp_ready),                     //      sink.ready
		.sink_valid         (pic_slave_agent_rp_valid),                     //          .valid
		.sink_data          (pic_slave_agent_rp_data),                      //          .data
		.sink_startofpacket (pic_slave_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (pic_slave_agent_rp_endofpacket),               //          .endofpacket
		.clk                (pll_0_outclk0_clk),                            //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                         //       src.ready
		.src_valid          (router_019_src_valid),                         //          .valid
		.src_data           (router_019_src_data),                          //          .data
		.src_channel        (router_019_src_channel),                       //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                    //          .endofpacket
	);

	system_mm_interconnect_0_router_001 router_020 (
		.sink_ready         (ps2_sysctl_agent_rp_ready),                    //      sink.ready
		.sink_valid         (ps2_sysctl_agent_rp_valid),                    //          .valid
		.sink_data          (ps2_sysctl_agent_rp_data),                     //          .data
		.sink_startofpacket (ps2_sysctl_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (ps2_sysctl_agent_rp_endofpacket),              //          .endofpacket
		.clk                (pll_0_outclk0_clk),                            //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                         //       src.ready
		.src_valid          (router_020_src_valid),                         //          .valid
		.src_data           (router_020_src_data),                          //          .data
		.src_channel        (router_020_src_channel),                       //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                    //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (76),
		.PKT_SRC_ID_H              (75),
		.PKT_SRC_ID_L              (71),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.MAX_OUTSTANDING_RESPONSES (7),
		.PIPELINED                 (0),
		.ST_DATA_W                 (94),
		.ST_CHANNEL_W              (20),
		.VALID_WIDTH               (20),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) ao486_avalon_io_limiter (
		.clk                    (pll_0_outclk0_clk),                             //       clk.clk
		.reset                  (ao486_reset_sink_reset_bridge_in_reset_reset),  // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                              //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                              //          .valid
		.cmd_sink_data          (router_src_data),                               //          .data
		.cmd_sink_channel       (router_src_channel),                            //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                      //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                        //          .endofpacket
		.cmd_src_ready          (ao486_avalon_io_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (ao486_avalon_io_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (ao486_avalon_io_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (ao486_avalon_io_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (ao486_avalon_io_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                             //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                             //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                           //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                              //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                     //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                       //          .endofpacket
		.rsp_src_ready          (ao486_avalon_io_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (ao486_avalon_io_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (ao486_avalon_io_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (ao486_avalon_io_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (ao486_avalon_io_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (ao486_avalon_io_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (ao486_avalon_io_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (42),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_BURST_TYPE_H          (39),
		.PKT_BURST_TYPE_L          (38),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (67),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (31),
		.OUT_BURSTWRAP_H           (34),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) sound_fm_burst_adapter (
		.clk                   (pll_0_outclk0_clk),                            //       cr0.clk
		.reset                 (sound_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (sound_fm_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sound_fm_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sound_fm_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sound_fm_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sound_fm_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sound_fm_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sound_fm_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sound_fm_burst_adapter_source0_data),          //          .data
		.source0_channel       (sound_fm_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sound_fm_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sound_fm_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sound_fm_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (42),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_BURST_TYPE_H          (39),
		.PKT_BURST_TYPE_L          (38),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (67),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (31),
		.OUT_BURSTWRAP_H           (34),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) width_trans_in_burst_adapter (
		.clk                   (pll_0_outclk2_clk),                                  //       cr0.clk
		.reset                 (width_trans_reset_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (width_trans_in_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (width_trans_in_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (width_trans_in_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (width_trans_in_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (width_trans_in_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (width_trans_in_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (width_trans_in_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (width_trans_in_burst_adapter_source0_data),          //          .data
		.source0_channel       (width_trans_in_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (width_trans_in_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (width_trans_in_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (width_trans_in_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (42),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_BURST_TYPE_H          (39),
		.PKT_BURST_TYPE_L          (38),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (67),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (31),
		.OUT_BURSTWRAP_H           (34),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) sound_io_burst_adapter (
		.clk                   (pll_0_outclk0_clk),                            //       cr0.clk
		.reset                 (sound_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (sound_io_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sound_io_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sound_io_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sound_io_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sound_io_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sound_io_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sound_io_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sound_io_burst_adapter_source0_data),          //          .data
		.source0_channel       (sound_io_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sound_io_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sound_io_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sound_io_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (42),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_BURST_TYPE_H          (39),
		.PKT_BURST_TYPE_L          (38),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (67),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (31),
		.OUT_BURSTWRAP_H           (34),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) rtc_io_burst_adapter (
		.clk                   (pll_0_outclk0_clk),                            //       cr0.clk
		.reset                 (sound_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (rtc_io_cmd_width_adapter_src_valid),           //     sink0.valid
		.sink0_data            (rtc_io_cmd_width_adapter_src_data),            //          .data
		.sink0_channel         (rtc_io_cmd_width_adapter_src_channel),         //          .channel
		.sink0_startofpacket   (rtc_io_cmd_width_adapter_src_startofpacket),   //          .startofpacket
		.sink0_endofpacket     (rtc_io_cmd_width_adapter_src_endofpacket),     //          .endofpacket
		.sink0_ready           (rtc_io_cmd_width_adapter_src_ready),           //          .ready
		.source0_valid         (rtc_io_burst_adapter_source0_valid),           //   source0.valid
		.source0_data          (rtc_io_burst_adapter_source0_data),            //          .data
		.source0_channel       (rtc_io_burst_adapter_source0_channel),         //          .channel
		.source0_startofpacket (rtc_io_burst_adapter_source0_startofpacket),   //          .startofpacket
		.source0_endofpacket   (rtc_io_burst_adapter_source0_endofpacket),     //          .endofpacket
		.source0_ready         (rtc_io_burst_adapter_source0_ready)            //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (42),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_BURST_TYPE_H          (39),
		.PKT_BURST_TYPE_L          (38),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (67),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (31),
		.OUT_BURSTWRAP_H           (34),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) pit_io_burst_adapter (
		.clk                   (pll_0_outclk0_clk),                            //       cr0.clk
		.reset                 (sound_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (pit_io_cmd_width_adapter_src_valid),           //     sink0.valid
		.sink0_data            (pit_io_cmd_width_adapter_src_data),            //          .data
		.sink0_channel         (pit_io_cmd_width_adapter_src_channel),         //          .channel
		.sink0_startofpacket   (pit_io_cmd_width_adapter_src_startofpacket),   //          .startofpacket
		.sink0_endofpacket     (pit_io_cmd_width_adapter_src_endofpacket),     //          .endofpacket
		.sink0_ready           (pit_io_cmd_width_adapter_src_ready),           //          .ready
		.source0_valid         (pit_io_burst_adapter_source0_valid),           //   source0.valid
		.source0_data          (pit_io_burst_adapter_source0_data),            //          .data
		.source0_channel       (pit_io_burst_adapter_source0_channel),         //          .channel
		.source0_startofpacket (pit_io_burst_adapter_source0_startofpacket),   //          .startofpacket
		.source0_endofpacket   (pit_io_burst_adapter_source0_endofpacket),     //          .endofpacket
		.source0_ready         (pit_io_burst_adapter_source0_ready)            //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (42),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_BURST_TYPE_H          (39),
		.PKT_BURST_TYPE_L          (38),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (67),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (31),
		.OUT_BURSTWRAP_H           (34),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) floppy0_io_burst_adapter (
		.clk                   (pll_0_outclk0_clk),                              //       cr0.clk
		.reset                 (sound_reset_sink_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.sink0_valid           (floppy0_io_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (floppy0_io_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (floppy0_io_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (floppy0_io_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (floppy0_io_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (floppy0_io_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (floppy0_io_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (floppy0_io_burst_adapter_source0_data),          //          .data
		.source0_channel       (floppy0_io_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (floppy0_io_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (floppy0_io_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (floppy0_io_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (42),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_BURST_TYPE_H          (39),
		.PKT_BURST_TYPE_L          (38),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (67),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (31),
		.OUT_BURSTWRAP_H           (34),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) ps2_io_burst_adapter (
		.clk                   (pll_0_outclk0_clk),                            //       cr0.clk
		.reset                 (sound_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (ps2_io_cmd_width_adapter_src_valid),           //     sink0.valid
		.sink0_data            (ps2_io_cmd_width_adapter_src_data),            //          .data
		.sink0_channel         (ps2_io_cmd_width_adapter_src_channel),         //          .channel
		.sink0_startofpacket   (ps2_io_cmd_width_adapter_src_startofpacket),   //          .startofpacket
		.sink0_endofpacket     (ps2_io_cmd_width_adapter_src_endofpacket),     //          .endofpacket
		.sink0_ready           (ps2_io_cmd_width_adapter_src_ready),           //          .ready
		.source0_valid         (ps2_io_burst_adapter_source0_valid),           //   source0.valid
		.source0_data          (ps2_io_burst_adapter_source0_data),            //          .data
		.source0_channel       (ps2_io_burst_adapter_source0_channel),         //          .channel
		.source0_startofpacket (ps2_io_burst_adapter_source0_startofpacket),   //          .startofpacket
		.source0_endofpacket   (ps2_io_burst_adapter_source0_endofpacket),     //          .endofpacket
		.source0_ready         (ps2_io_burst_adapter_source0_ready)            //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (42),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_BURST_TYPE_H          (39),
		.PKT_BURST_TYPE_L          (38),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (67),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (31),
		.OUT_BURSTWRAP_H           (34),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) hddext_0x370_io_burst_adapter (
		.clk                   (pll_0_outclk0_clk),                                   //       cr0.clk
		.reset                 (sound_reset_sink_reset_bridge_in_reset_reset),        // cr0_reset.reset
		.sink0_valid           (hddext_0x370_io_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (hddext_0x370_io_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (hddext_0x370_io_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (hddext_0x370_io_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (hddext_0x370_io_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (hddext_0x370_io_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (hddext_0x370_io_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (hddext_0x370_io_burst_adapter_source0_data),          //          .data
		.source0_channel       (hddext_0x370_io_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (hddext_0x370_io_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (hddext_0x370_io_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (hddext_0x370_io_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (42),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_BURST_TYPE_H          (39),
		.PKT_BURST_TYPE_L          (38),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (67),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (31),
		.OUT_BURSTWRAP_H           (34),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) vga_io_b_burst_adapter (
		.clk                   (pll_0_outclk0_clk),                            //       cr0.clk
		.reset                 (sound_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (vga_io_b_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (vga_io_b_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (vga_io_b_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (vga_io_b_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (vga_io_b_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (vga_io_b_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (vga_io_b_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (vga_io_b_burst_adapter_source0_data),          //          .data
		.source0_channel       (vga_io_b_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (vga_io_b_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (vga_io_b_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (vga_io_b_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (42),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_BURST_TYPE_H          (39),
		.PKT_BURST_TYPE_L          (38),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (67),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (31),
		.OUT_BURSTWRAP_H           (34),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) vga_io_c_burst_adapter (
		.clk                   (pll_0_outclk0_clk),                            //       cr0.clk
		.reset                 (sound_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (vga_io_c_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (vga_io_c_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (vga_io_c_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (vga_io_c_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (vga_io_c_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (vga_io_c_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (vga_io_c_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (vga_io_c_burst_adapter_source0_data),          //          .data
		.source0_channel       (vga_io_c_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (vga_io_c_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (vga_io_c_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (vga_io_c_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (42),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_BURST_TYPE_H          (39),
		.PKT_BURST_TYPE_L          (38),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (67),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (31),
		.OUT_BURSTWRAP_H           (34),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) vga_io_d_burst_adapter (
		.clk                   (pll_0_outclk0_clk),                            //       cr0.clk
		.reset                 (sound_reset_sink_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (vga_io_d_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (vga_io_d_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (vga_io_d_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (vga_io_d_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (vga_io_d_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (vga_io_d_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (vga_io_d_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (vga_io_d_burst_adapter_source0_data),          //          .data
		.source0_channel       (vga_io_d_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (vga_io_d_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (vga_io_d_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (vga_io_d_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (42),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_BURST_TYPE_H          (39),
		.PKT_BURST_TYPE_L          (38),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (67),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (31),
		.OUT_BURSTWRAP_H           (34),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) pc_dma_master_burst_adapter (
		.clk                   (pll_0_outclk0_clk),                                 //       cr0.clk
		.reset                 (sound_reset_sink_reset_bridge_in_reset_reset),      // cr0_reset.reset
		.sink0_valid           (pc_dma_master_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (pc_dma_master_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (pc_dma_master_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (pc_dma_master_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (pc_dma_master_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (pc_dma_master_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (pc_dma_master_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pc_dma_master_burst_adapter_source0_data),          //          .data
		.source0_channel       (pc_dma_master_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pc_dma_master_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pc_dma_master_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pc_dma_master_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (42),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_BURST_TYPE_H          (39),
		.PKT_BURST_TYPE_L          (38),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (67),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (31),
		.OUT_BURSTWRAP_H           (34),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) pic_master_burst_adapter (
		.clk                   (pll_0_outclk0_clk),                              //       cr0.clk
		.reset                 (sound_reset_sink_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.sink0_valid           (pic_master_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (pic_master_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (pic_master_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (pic_master_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (pic_master_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (pic_master_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (pic_master_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pic_master_burst_adapter_source0_data),          //          .data
		.source0_channel       (pic_master_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pic_master_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pic_master_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pic_master_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (42),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_BURST_TYPE_H          (39),
		.PKT_BURST_TYPE_L          (38),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (67),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (31),
		.OUT_BURSTWRAP_H           (34),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) sound_mpu_burst_adapter (
		.clk                   (pll_0_outclk0_clk),                             //       cr0.clk
		.reset                 (sound_reset_sink_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (sound_mpu_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (sound_mpu_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (sound_mpu_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (sound_mpu_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (sound_mpu_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (sound_mpu_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (sound_mpu_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (sound_mpu_burst_adapter_source0_data),          //          .data
		.source0_channel       (sound_mpu_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (sound_mpu_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (sound_mpu_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (sound_mpu_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (42),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_BURST_TYPE_H          (39),
		.PKT_BURST_TYPE_L          (38),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (67),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (31),
		.OUT_BURSTWRAP_H           (34),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) pc_dma_page_burst_adapter (
		.clk                   (pll_0_outclk0_clk),                               //       cr0.clk
		.reset                 (sound_reset_sink_reset_bridge_in_reset_reset),    // cr0_reset.reset
		.sink0_valid           (pc_dma_page_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (pc_dma_page_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (pc_dma_page_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (pc_dma_page_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (pc_dma_page_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (pc_dma_page_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (pc_dma_page_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pc_dma_page_burst_adapter_source0_data),          //          .data
		.source0_channel       (pc_dma_page_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pc_dma_page_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pc_dma_page_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pc_dma_page_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (42),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_BURST_TYPE_H          (39),
		.PKT_BURST_TYPE_L          (38),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (67),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (31),
		.OUT_BURSTWRAP_H           (34),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) pc_dma_slave_burst_adapter (
		.clk                   (pll_0_outclk0_clk),                                //       cr0.clk
		.reset                 (sound_reset_sink_reset_bridge_in_reset_reset),     // cr0_reset.reset
		.sink0_valid           (pc_dma_slave_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (pc_dma_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (pc_dma_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (pc_dma_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (pc_dma_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (pc_dma_slave_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (pc_dma_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pc_dma_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (pc_dma_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pc_dma_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pc_dma_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pc_dma_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (42),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_BURST_TYPE_H          (39),
		.PKT_BURST_TYPE_L          (38),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (67),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (31),
		.OUT_BURSTWRAP_H           (34),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) pic_slave_burst_adapter (
		.clk                   (pll_0_outclk0_clk),                             //       cr0.clk
		.reset                 (sound_reset_sink_reset_bridge_in_reset_reset),  // cr0_reset.reset
		.sink0_valid           (pic_slave_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (pic_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (pic_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (pic_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (pic_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (pic_slave_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (pic_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (pic_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (pic_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (pic_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (pic_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (pic_slave_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (24),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (42),
		.PKT_BYTE_CNT_H            (33),
		.PKT_BYTE_CNT_L            (31),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (37),
		.PKT_BURST_SIZE_L          (35),
		.PKT_BURST_TYPE_H          (39),
		.PKT_BURST_TYPE_L          (38),
		.PKT_BURSTWRAP_H           (34),
		.PKT_BURSTWRAP_L           (34),
		.PKT_TRANS_COMPRESSED_READ (25),
		.PKT_TRANS_WRITE           (27),
		.PKT_TRANS_READ            (28),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (67),
		.ST_CHANNEL_W              (20),
		.OUT_BYTE_CNT_H            (31),
		.OUT_BURSTWRAP_H           (34),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) ps2_sysctl_burst_adapter (
		.clk                   (pll_0_outclk0_clk),                              //       cr0.clk
		.reset                 (sound_reset_sink_reset_bridge_in_reset_reset),   // cr0_reset.reset
		.sink0_valid           (ps2_sysctl_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (ps2_sysctl_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (ps2_sysctl_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (ps2_sysctl_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (ps2_sysctl_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (ps2_sysctl_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (ps2_sysctl_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (ps2_sysctl_burst_adapter_source0_data),          //          .data
		.source0_channel       (ps2_sysctl_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (ps2_sysctl_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (ps2_sysctl_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (ps2_sysctl_burst_adapter_source0_ready)          //          .ready
	);

	system_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (pll_0_outclk0_clk),                             //        clk.clk
		.reset               (ao486_reset_sink_reset_bridge_in_reset_reset),  //  clk_reset.reset
		.sink_ready          (ao486_avalon_io_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel        (ao486_avalon_io_limiter_cmd_src_channel),       //           .channel
		.sink_data           (ao486_avalon_io_limiter_cmd_src_data),          //           .data
		.sink_startofpacket  (ao486_avalon_io_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket    (ao486_avalon_io_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid          (ao486_avalon_io_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready          (cmd_demux_src0_ready),                          //       src0.ready
		.src0_valid          (cmd_demux_src0_valid),                          //           .valid
		.src0_data           (cmd_demux_src0_data),                           //           .data
		.src0_channel        (cmd_demux_src0_channel),                        //           .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                  //           .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                    //           .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                          //       src1.ready
		.src1_valid          (cmd_demux_src1_valid),                          //           .valid
		.src1_data           (cmd_demux_src1_data),                           //           .data
		.src1_channel        (cmd_demux_src1_channel),                        //           .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                  //           .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                    //           .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                          //       src2.ready
		.src2_valid          (cmd_demux_src2_valid),                          //           .valid
		.src2_data           (cmd_demux_src2_data),                           //           .data
		.src2_channel        (cmd_demux_src2_channel),                        //           .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                  //           .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                    //           .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                          //       src3.ready
		.src3_valid          (cmd_demux_src3_valid),                          //           .valid
		.src3_data           (cmd_demux_src3_data),                           //           .data
		.src3_channel        (cmd_demux_src3_channel),                        //           .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                  //           .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                    //           .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                          //       src4.ready
		.src4_valid          (cmd_demux_src4_valid),                          //           .valid
		.src4_data           (cmd_demux_src4_data),                           //           .data
		.src4_channel        (cmd_demux_src4_channel),                        //           .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                  //           .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                    //           .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                          //       src5.ready
		.src5_valid          (cmd_demux_src5_valid),                          //           .valid
		.src5_data           (cmd_demux_src5_data),                           //           .data
		.src5_channel        (cmd_demux_src5_channel),                        //           .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                  //           .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                    //           .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                          //       src6.ready
		.src6_valid          (cmd_demux_src6_valid),                          //           .valid
		.src6_data           (cmd_demux_src6_data),                           //           .data
		.src6_channel        (cmd_demux_src6_channel),                        //           .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                  //           .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                    //           .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                          //       src7.ready
		.src7_valid          (cmd_demux_src7_valid),                          //           .valid
		.src7_data           (cmd_demux_src7_data),                           //           .data
		.src7_channel        (cmd_demux_src7_channel),                        //           .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                  //           .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                    //           .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                          //       src8.ready
		.src8_valid          (cmd_demux_src8_valid),                          //           .valid
		.src8_data           (cmd_demux_src8_data),                           //           .data
		.src8_channel        (cmd_demux_src8_channel),                        //           .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                  //           .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                    //           .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                          //       src9.ready
		.src9_valid          (cmd_demux_src9_valid),                          //           .valid
		.src9_data           (cmd_demux_src9_data),                           //           .data
		.src9_channel        (cmd_demux_src9_channel),                        //           .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                  //           .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                    //           .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                         //      src10.ready
		.src10_valid         (cmd_demux_src10_valid),                         //           .valid
		.src10_data          (cmd_demux_src10_data),                          //           .data
		.src10_channel       (cmd_demux_src10_channel),                       //           .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                 //           .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                   //           .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                         //      src11.ready
		.src11_valid         (cmd_demux_src11_valid),                         //           .valid
		.src11_data          (cmd_demux_src11_data),                          //           .data
		.src11_channel       (cmd_demux_src11_channel),                       //           .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                 //           .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                   //           .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                         //      src12.ready
		.src12_valid         (cmd_demux_src12_valid),                         //           .valid
		.src12_data          (cmd_demux_src12_data),                          //           .data
		.src12_channel       (cmd_demux_src12_channel),                       //           .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                 //           .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                   //           .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                         //      src13.ready
		.src13_valid         (cmd_demux_src13_valid),                         //           .valid
		.src13_data          (cmd_demux_src13_data),                          //           .data
		.src13_channel       (cmd_demux_src13_channel),                       //           .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),                 //           .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),                   //           .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                         //      src14.ready
		.src14_valid         (cmd_demux_src14_valid),                         //           .valid
		.src14_data          (cmd_demux_src14_data),                          //           .data
		.src14_channel       (cmd_demux_src14_channel),                       //           .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),                 //           .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),                   //           .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                         //      src15.ready
		.src15_valid         (cmd_demux_src15_valid),                         //           .valid
		.src15_data          (cmd_demux_src15_data),                          //           .data
		.src15_channel       (cmd_demux_src15_channel),                       //           .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),                 //           .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket),                   //           .endofpacket
		.src16_ready         (cmd_demux_src16_ready),                         //      src16.ready
		.src16_valid         (cmd_demux_src16_valid),                         //           .valid
		.src16_data          (cmd_demux_src16_data),                          //           .data
		.src16_channel       (cmd_demux_src16_channel),                       //           .channel
		.src16_startofpacket (cmd_demux_src16_startofpacket),                 //           .startofpacket
		.src16_endofpacket   (cmd_demux_src16_endofpacket),                   //           .endofpacket
		.src17_ready         (cmd_demux_src17_ready),                         //      src17.ready
		.src17_valid         (cmd_demux_src17_valid),                         //           .valid
		.src17_data          (cmd_demux_src17_data),                          //           .data
		.src17_channel       (cmd_demux_src17_channel),                       //           .channel
		.src17_startofpacket (cmd_demux_src17_startofpacket),                 //           .startofpacket
		.src17_endofpacket   (cmd_demux_src17_endofpacket),                   //           .endofpacket
		.src18_ready         (cmd_demux_src18_ready),                         //      src18.ready
		.src18_valid         (cmd_demux_src18_valid),                         //           .valid
		.src18_data          (cmd_demux_src18_data),                          //           .data
		.src18_channel       (cmd_demux_src18_channel),                       //           .channel
		.src18_startofpacket (cmd_demux_src18_startofpacket),                 //           .startofpacket
		.src18_endofpacket   (cmd_demux_src18_endofpacket),                   //           .endofpacket
		.src19_ready         (cmd_demux_src19_ready),                         //      src19.ready
		.src19_valid         (cmd_demux_src19_valid),                         //           .valid
		.src19_data          (cmd_demux_src19_data),                          //           .data
		.src19_channel       (cmd_demux_src19_channel),                       //           .channel
		.src19_startofpacket (cmd_demux_src19_startofpacket),                 //           .startofpacket
		.src19_endofpacket   (cmd_demux_src19_endofpacket)                    //           .endofpacket
	);

	system_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (pll_0_outclk0_clk),                            //       clk.clk
		.reset               (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_src_valid),                            //          .valid
		.src_data            (cmd_mux_src_data),                             //          .data
		.src_channel         (cmd_mux_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                       //          .channel
		.sink0_data          (cmd_demux_src0_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                    //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (pll_0_outclk2_clk),                             //       clk.clk
		.reset               (width_trans_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                         //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                         //          .valid
		.src_data            (cmd_mux_001_src_data),                          //          .data
		.src_channel         (cmd_mux_001_src_channel),                       //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                 //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                   //          .endofpacket
		.sink0_ready         (crosser_out_ready),                             //     sink0.ready
		.sink0_valid         (crosser_out_valid),                             //          .valid
		.sink0_channel       (crosser_out_channel),                           //          .channel
		.sink0_data          (crosser_out_data),                              //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                        //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (pll_0_outclk0_clk),                            //       clk.clk
		.reset               (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                        //          .valid
		.src_data            (cmd_mux_002_src_data),                         //          .data
		.src_channel         (cmd_mux_002_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                       //          .channel
		.sink0_data          (cmd_demux_src2_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                    //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (pll_0_outclk0_clk),                            //       clk.clk
		.reset               (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                        //          .valid
		.src_data            (cmd_mux_003_src_data),                         //          .data
		.src_channel         (cmd_mux_003_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                       //          .channel
		.sink0_data          (cmd_demux_src3_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                    //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (pll_0_outclk0_clk),                            //       clk.clk
		.reset               (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                        //          .valid
		.src_data            (cmd_mux_004_src_data),                         //          .data
		.src_channel         (cmd_mux_004_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                       //          .channel
		.sink0_data          (cmd_demux_src4_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                    //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (pll_0_outclk0_clk),                            //       clk.clk
		.reset               (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                        //          .valid
		.src_data            (cmd_mux_005_src_data),                         //          .data
		.src_channel         (cmd_mux_005_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                       //          .channel
		.sink0_data          (cmd_demux_src5_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                    //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (pll_0_outclk0_clk),                            //       clk.clk
		.reset               (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                        //          .valid
		.src_data            (cmd_mux_006_src_data),                         //          .data
		.src_channel         (cmd_mux_006_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                       //          .channel
		.sink0_data          (cmd_demux_src6_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)                    //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (pll_0_outclk0_clk),                            //       clk.clk
		.reset               (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                        //          .valid
		.src_data            (cmd_mux_007_src_data),                         //          .data
		.src_channel         (cmd_mux_007_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                       //          .channel
		.sink0_data          (cmd_demux_src7_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)                    //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux cmd_mux_008 (
		.clk                 (pll_0_outclk0_clk),                            //       clk.clk
		.reset               (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                        //          .valid
		.src_data            (cmd_mux_008_src_data),                         //          .data
		.src_channel         (cmd_mux_008_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                       //          .channel
		.sink0_data          (cmd_demux_src8_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket)                    //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (pll_0_outclk0_clk),                            //       clk.clk
		.reset               (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                        //          .valid
		.src_data            (cmd_mux_009_src_data),                         //          .data
		.src_channel         (cmd_mux_009_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                         //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                         //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                       //          .channel
		.sink0_data          (cmd_demux_src9_data),                          //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket)                    //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux cmd_mux_010 (
		.clk                 (pll_0_outclk0_clk),                            //       clk.clk
		.reset               (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                        //          .valid
		.src_data            (cmd_mux_010_src_data),                         //          .data
		.src_channel         (cmd_mux_010_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                      //          .channel
		.sink0_data          (cmd_demux_src10_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket)                   //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux cmd_mux_011 (
		.clk                 (pll_0_outclk0_clk),                            //       clk.clk
		.reset               (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                        //          .valid
		.src_data            (cmd_mux_011_src_data),                         //          .data
		.src_channel         (cmd_mux_011_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                      //          .channel
		.sink0_data          (cmd_demux_src11_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket)                   //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux cmd_mux_012 (
		.clk                 (pll_0_outclk0_clk),                            //       clk.clk
		.reset               (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                        //          .valid
		.src_data            (cmd_mux_012_src_data),                         //          .data
		.src_channel         (cmd_mux_012_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src12_channel),                      //          .channel
		.sink0_data          (cmd_demux_src12_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket)                   //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux cmd_mux_013 (
		.clk                 (pll_0_outclk0_clk),                            //       clk.clk
		.reset               (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                        //          .valid
		.src_data            (cmd_mux_013_src_data),                         //          .data
		.src_channel         (cmd_mux_013_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src13_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src13_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src13_channel),                      //          .channel
		.sink0_data          (cmd_demux_src13_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src13_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src13_endofpacket)                   //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux cmd_mux_014 (
		.clk                 (pll_0_outclk0_clk),                            //       clk.clk
		.reset               (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                        //          .valid
		.src_data            (cmd_mux_014_src_data),                         //          .data
		.src_channel         (cmd_mux_014_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src14_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src14_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src14_channel),                      //          .channel
		.sink0_data          (cmd_demux_src14_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src14_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src14_endofpacket)                   //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux cmd_mux_015 (
		.clk                 (pll_0_outclk0_clk),                            //       clk.clk
		.reset               (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                        //          .valid
		.src_data            (cmd_mux_015_src_data),                         //          .data
		.src_channel         (cmd_mux_015_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src15_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src15_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src15_channel),                      //          .channel
		.sink0_data          (cmd_demux_src15_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src15_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src15_endofpacket)                   //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux cmd_mux_016 (
		.clk                 (pll_0_outclk0_clk),                            //       clk.clk
		.reset               (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                        //          .valid
		.src_data            (cmd_mux_016_src_data),                         //          .data
		.src_channel         (cmd_mux_016_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src16_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src16_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src16_channel),                      //          .channel
		.sink0_data          (cmd_demux_src16_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src16_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src16_endofpacket)                   //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux cmd_mux_017 (
		.clk                 (pll_0_outclk0_clk),                            //       clk.clk
		.reset               (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                        //          .valid
		.src_data            (cmd_mux_017_src_data),                         //          .data
		.src_channel         (cmd_mux_017_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src17_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src17_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src17_channel),                      //          .channel
		.sink0_data          (cmd_demux_src17_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src17_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src17_endofpacket)                   //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux cmd_mux_018 (
		.clk                 (pll_0_outclk0_clk),                            //       clk.clk
		.reset               (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                        //          .valid
		.src_data            (cmd_mux_018_src_data),                         //          .data
		.src_channel         (cmd_mux_018_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src18_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src18_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src18_channel),                      //          .channel
		.sink0_data          (cmd_demux_src18_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src18_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src18_endofpacket)                   //          .endofpacket
	);

	system_mm_interconnect_0_cmd_mux cmd_mux_019 (
		.clk                 (pll_0_outclk0_clk),                            //       clk.clk
		.reset               (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                        //       src.ready
		.src_valid           (cmd_mux_019_src_valid),                        //          .valid
		.src_data            (cmd_mux_019_src_data),                         //          .data
		.src_channel         (cmd_mux_019_src_channel),                      //          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),                //          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),                  //          .endofpacket
		.sink0_ready         (cmd_demux_src19_ready),                        //     sink0.ready
		.sink0_valid         (cmd_demux_src19_valid),                        //          .valid
		.sink0_channel       (cmd_demux_src19_channel),                      //          .channel
		.sink0_data          (cmd_demux_src19_data),                         //          .data
		.sink0_startofpacket (cmd_demux_src19_startofpacket),                //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src19_endofpacket)                   //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (pll_0_outclk0_clk),                            //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (sound_fm_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sound_fm_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sound_fm_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sound_fm_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sound_fm_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sound_fm_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_src0_data),                          //          .data
		.src0_channel       (rsp_demux_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                    //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (pll_0_outclk2_clk),                                  //       clk.clk
		.reset              (width_trans_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.sink_ready         (width_trans_in_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (width_trans_in_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (width_trans_in_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (width_trans_in_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (width_trans_in_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (width_trans_in_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_001_src0_data),                            //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                      //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux rsp_demux_002 (
		.clk                (pll_0_outclk0_clk),                            //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (sound_io_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sound_io_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sound_io_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sound_io_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sound_io_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sound_io_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_002_src0_data),                      //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux rsp_demux_003 (
		.clk                (pll_0_outclk0_clk),                            //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (rtc_io_rsp_width_adapter_src_ready),           //      sink.ready
		.sink_channel       (rtc_io_rsp_width_adapter_src_channel),         //          .channel
		.sink_data          (rtc_io_rsp_width_adapter_src_data),            //          .data
		.sink_startofpacket (rtc_io_rsp_width_adapter_src_startofpacket),   //          .startofpacket
		.sink_endofpacket   (rtc_io_rsp_width_adapter_src_endofpacket),     //          .endofpacket
		.sink_valid         (rtc_io_rsp_width_adapter_src_valid),           //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_003_src0_data),                      //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (pll_0_outclk0_clk),                            //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (pit_io_rsp_width_adapter_src_ready),           //      sink.ready
		.sink_channel       (pit_io_rsp_width_adapter_src_channel),         //          .channel
		.sink_data          (pit_io_rsp_width_adapter_src_data),            //          .data
		.sink_startofpacket (pit_io_rsp_width_adapter_src_startofpacket),   //          .startofpacket
		.sink_endofpacket   (pit_io_rsp_width_adapter_src_endofpacket),     //          .endofpacket
		.sink_valid         (pit_io_rsp_width_adapter_src_valid),           //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_004_src0_data),                      //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (pll_0_outclk0_clk),                            //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                         //      sink.ready
		.sink_channel       (router_006_src_channel),                       //          .channel
		.sink_data          (router_006_src_data),                          //          .data
		.sink_startofpacket (router_006_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_006_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_005_src0_data),                      //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (pll_0_outclk0_clk),                              //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset),   // clk_reset.reset
		.sink_ready         (floppy0_io_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (floppy0_io_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (floppy0_io_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (floppy0_io_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (floppy0_io_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (floppy0_io_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_006_src0_data),                        //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                  //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (pll_0_outclk0_clk),                            //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (ps2_io_rsp_width_adapter_src_ready),           //      sink.ready
		.sink_channel       (ps2_io_rsp_width_adapter_src_channel),         //          .channel
		.sink_data          (ps2_io_rsp_width_adapter_src_data),            //          .data
		.sink_startofpacket (ps2_io_rsp_width_adapter_src_startofpacket),   //          .startofpacket
		.sink_endofpacket   (ps2_io_rsp_width_adapter_src_endofpacket),     //          .endofpacket
		.sink_valid         (ps2_io_rsp_width_adapter_src_valid),           //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_007_src0_data),                      //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux rsp_demux_008 (
		.clk                (pll_0_outclk0_clk),                            //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                         //      sink.ready
		.sink_channel       (router_009_src_channel),                       //          .channel
		.sink_data          (router_009_src_data),                          //          .data
		.sink_startofpacket (router_009_src_startofpacket),                 //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                   //          .endofpacket
		.sink_valid         (router_009_src_valid),                         //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_008_src0_data),                      //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux rsp_demux_009 (
		.clk                (pll_0_outclk0_clk),                                   //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset),        // clk_reset.reset
		.sink_ready         (hddext_0x370_io_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (hddext_0x370_io_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (hddext_0x370_io_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (hddext_0x370_io_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (hddext_0x370_io_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (hddext_0x370_io_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                            //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                            //          .valid
		.src0_data          (rsp_demux_009_src0_data),                             //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                          //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                    //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                       //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux rsp_demux_010 (
		.clk                (pll_0_outclk0_clk),                            //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (vga_io_b_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (vga_io_b_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (vga_io_b_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (vga_io_b_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (vga_io_b_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (vga_io_b_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_010_src0_data),                      //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)                //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux rsp_demux_011 (
		.clk                (pll_0_outclk0_clk),                            //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (vga_io_c_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (vga_io_c_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (vga_io_c_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (vga_io_c_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (vga_io_c_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (vga_io_c_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_011_src0_data),                      //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)                //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux rsp_demux_012 (
		.clk                (pll_0_outclk0_clk),                            //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (vga_io_d_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (vga_io_d_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (vga_io_d_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (vga_io_d_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (vga_io_d_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (vga_io_d_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                     //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                     //          .valid
		.src0_data          (rsp_demux_012_src0_data),                      //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                   //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),             //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)                //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux rsp_demux_013 (
		.clk                (pll_0_outclk0_clk),                                 //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset),      // clk_reset.reset
		.sink_ready         (pc_dma_master_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (pc_dma_master_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (pc_dma_master_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (pc_dma_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (pc_dma_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (pc_dma_master_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                          //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                          //          .valid
		.src0_data          (rsp_demux_013_src0_data),                           //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                        //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),                  //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)                     //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux rsp_demux_014 (
		.clk                (pll_0_outclk0_clk),                              //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset),   // clk_reset.reset
		.sink_ready         (pic_master_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (pic_master_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (pic_master_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (pic_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (pic_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (pic_master_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_014_src0_data),                        //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)                  //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux rsp_demux_015 (
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset),  // clk_reset.reset
		.sink_ready         (sound_mpu_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (sound_mpu_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (sound_mpu_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (sound_mpu_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (sound_mpu_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (sound_mpu_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_015_src0_data),                       //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux rsp_demux_016 (
		.clk                (pll_0_outclk0_clk),                               //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset),    // clk_reset.reset
		.sink_ready         (pc_dma_page_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (pc_dma_page_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (pc_dma_page_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (pc_dma_page_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (pc_dma_page_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (pc_dma_page_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                        //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                        //          .valid
		.src0_data          (rsp_demux_016_src0_data),                         //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                      //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),                //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket)                   //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux rsp_demux_017 (
		.clk                (pll_0_outclk0_clk),                                //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset),     // clk_reset.reset
		.sink_ready         (pc_dma_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (pc_dma_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (pc_dma_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (pc_dma_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (pc_dma_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (pc_dma_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_017_src0_data),                          //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket)                    //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux rsp_demux_018 (
		.clk                (pll_0_outclk0_clk),                             //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset),  // clk_reset.reset
		.sink_ready         (pic_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (pic_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (pic_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (pic_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (pic_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (pic_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                      //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                      //          .valid
		.src0_data          (rsp_demux_018_src0_data),                       //          .data
		.src0_channel       (rsp_demux_018_src0_channel),                    //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),              //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_0_rsp_demux rsp_demux_019 (
		.clk                (pll_0_outclk0_clk),                              //       clk.clk
		.reset              (sound_reset_sink_reset_bridge_in_reset_reset),   // clk_reset.reset
		.sink_ready         (ps2_sysctl_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (ps2_sysctl_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (ps2_sysctl_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (ps2_sysctl_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (ps2_sysctl_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (ps2_sysctl_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_019_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_019_src0_data),                        //          .data
		.src0_channel       (rsp_demux_019_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket)                  //          .endofpacket
	);

	system_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (pll_0_outclk0_clk),                            //       clk.clk
		.reset                (ao486_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                            //       src.ready
		.src_valid            (rsp_mux_src_valid),                            //          .valid
		.src_data             (rsp_mux_src_data),                             //          .data
		.src_channel          (rsp_mux_src_channel),                          //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                    //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                      //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                         //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                         //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                       //          .channel
		.sink0_data           (rsp_demux_src0_data),                          //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                 //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                   //          .endofpacket
		.sink1_ready          (crosser_001_out_ready),                        //     sink1.ready
		.sink1_valid          (crosser_001_out_valid),                        //          .valid
		.sink1_channel        (crosser_001_out_channel),                      //          .channel
		.sink1_data           (crosser_001_out_data),                         //          .data
		.sink1_startofpacket  (crosser_001_out_startofpacket),                //          .startofpacket
		.sink1_endofpacket    (crosser_001_out_endofpacket),                  //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                     //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                     //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                   //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                      //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),             //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),               //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                     //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                     //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                   //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                      //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),             //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),               //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                     //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                     //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                   //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                      //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),             //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),               //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                     //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                     //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                   //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                      //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),             //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),               //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                     //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                     //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                   //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                      //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),             //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),               //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                     //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                     //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                   //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                      //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),             //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),               //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                     //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                     //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                   //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                      //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),             //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),               //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                     //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                     //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                   //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                      //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),             //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),               //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                     //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                     //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                   //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                      //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),             //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),               //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                     //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                     //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                   //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                      //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),             //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),               //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                     //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                     //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),                   //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                      //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),             //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),               //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                     //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                     //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),                   //          .channel
		.sink13_data          (rsp_demux_013_src0_data),                      //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),             //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),               //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),                     //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),                     //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),                   //          .channel
		.sink14_data          (rsp_demux_014_src0_data),                      //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),             //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket),               //          .endofpacket
		.sink15_ready         (rsp_demux_015_src0_ready),                     //    sink15.ready
		.sink15_valid         (rsp_demux_015_src0_valid),                     //          .valid
		.sink15_channel       (rsp_demux_015_src0_channel),                   //          .channel
		.sink15_data          (rsp_demux_015_src0_data),                      //          .data
		.sink15_startofpacket (rsp_demux_015_src0_startofpacket),             //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src0_endofpacket),               //          .endofpacket
		.sink16_ready         (rsp_demux_016_src0_ready),                     //    sink16.ready
		.sink16_valid         (rsp_demux_016_src0_valid),                     //          .valid
		.sink16_channel       (rsp_demux_016_src0_channel),                   //          .channel
		.sink16_data          (rsp_demux_016_src0_data),                      //          .data
		.sink16_startofpacket (rsp_demux_016_src0_startofpacket),             //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src0_endofpacket),               //          .endofpacket
		.sink17_ready         (rsp_demux_017_src0_ready),                     //    sink17.ready
		.sink17_valid         (rsp_demux_017_src0_valid),                     //          .valid
		.sink17_channel       (rsp_demux_017_src0_channel),                   //          .channel
		.sink17_data          (rsp_demux_017_src0_data),                      //          .data
		.sink17_startofpacket (rsp_demux_017_src0_startofpacket),             //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src0_endofpacket),               //          .endofpacket
		.sink18_ready         (rsp_demux_018_src0_ready),                     //    sink18.ready
		.sink18_valid         (rsp_demux_018_src0_valid),                     //          .valid
		.sink18_channel       (rsp_demux_018_src0_channel),                   //          .channel
		.sink18_data          (rsp_demux_018_src0_data),                      //          .data
		.sink18_startofpacket (rsp_demux_018_src0_startofpacket),             //          .startofpacket
		.sink18_endofpacket   (rsp_demux_018_src0_endofpacket),               //          .endofpacket
		.sink19_ready         (rsp_demux_019_src0_ready),                     //    sink19.ready
		.sink19_valid         (rsp_demux_019_src0_valid),                     //          .valid
		.sink19_channel       (rsp_demux_019_src0_channel),                   //          .channel
		.sink19_data          (rsp_demux_019_src0_data),                      //          .data
		.sink19_startofpacket (rsp_demux_019_src0_startofpacket),             //          .startofpacket
		.sink19_endofpacket   (rsp_demux_019_src0_endofpacket)                //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (24),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (33),
		.IN_PKT_BYTE_CNT_L             (31),
		.IN_PKT_TRANS_COMPRESSED_READ  (25),
		.IN_PKT_TRANS_WRITE            (27),
		.IN_PKT_BURSTWRAP_H            (34),
		.IN_PKT_BURSTWRAP_L            (34),
		.IN_PKT_BURST_SIZE_H           (37),
		.IN_PKT_BURST_SIZE_L           (35),
		.IN_PKT_RESPONSE_STATUS_H      (63),
		.IN_PKT_RESPONSE_STATUS_L      (62),
		.IN_PKT_TRANS_EXCLUSIVE        (30),
		.IN_PKT_BURST_TYPE_H           (39),
		.IN_PKT_BURST_TYPE_L           (38),
		.IN_PKT_ORI_BURST_SIZE_L       (64),
		.IN_PKT_ORI_BURST_SIZE_H       (66),
		.IN_ST_DATA_W                  (67),
		.OUT_PKT_ADDR_H                (51),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (60),
		.OUT_PKT_BYTE_CNT_L            (58),
		.OUT_PKT_TRANS_COMPRESSED_READ (52),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (90),
		.OUT_PKT_RESPONSE_STATUS_L     (89),
		.OUT_PKT_TRANS_EXCLUSIVE       (57),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (91),
		.OUT_PKT_ORI_BURST_SIZE_H      (93),
		.OUT_ST_DATA_W                 (94),
		.ST_CHANNEL_W                  (20),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sound_fm_rsp_width_adapter (
		.clk                  (pll_0_outclk0_clk),                            //       clk.clk
		.reset                (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_001_src_valid),                         //      sink.valid
		.in_channel           (router_001_src_channel),                       //          .channel
		.in_startofpacket     (router_001_src_startofpacket),                 //          .startofpacket
		.in_endofpacket       (router_001_src_endofpacket),                   //          .endofpacket
		.in_ready             (router_001_src_ready),                         //          .ready
		.in_data              (router_001_src_data),                          //          .data
		.out_endofpacket      (sound_fm_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sound_fm_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sound_fm_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sound_fm_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sound_fm_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sound_fm_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (24),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (33),
		.IN_PKT_BYTE_CNT_L             (31),
		.IN_PKT_TRANS_COMPRESSED_READ  (25),
		.IN_PKT_TRANS_WRITE            (27),
		.IN_PKT_BURSTWRAP_H            (34),
		.IN_PKT_BURSTWRAP_L            (34),
		.IN_PKT_BURST_SIZE_H           (37),
		.IN_PKT_BURST_SIZE_L           (35),
		.IN_PKT_RESPONSE_STATUS_H      (63),
		.IN_PKT_RESPONSE_STATUS_L      (62),
		.IN_PKT_TRANS_EXCLUSIVE        (30),
		.IN_PKT_BURST_TYPE_H           (39),
		.IN_PKT_BURST_TYPE_L           (38),
		.IN_PKT_ORI_BURST_SIZE_L       (64),
		.IN_PKT_ORI_BURST_SIZE_H       (66),
		.IN_ST_DATA_W                  (67),
		.OUT_PKT_ADDR_H                (51),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (60),
		.OUT_PKT_BYTE_CNT_L            (58),
		.OUT_PKT_TRANS_COMPRESSED_READ (52),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (90),
		.OUT_PKT_RESPONSE_STATUS_L     (89),
		.OUT_PKT_TRANS_EXCLUSIVE       (57),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (91),
		.OUT_PKT_ORI_BURST_SIZE_H      (93),
		.OUT_ST_DATA_W                 (94),
		.ST_CHANNEL_W                  (20),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) width_trans_in_rsp_width_adapter (
		.clk                  (pll_0_outclk2_clk),                                  //       clk.clk
		.reset                (width_trans_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_valid             (router_002_src_valid),                               //      sink.valid
		.in_channel           (router_002_src_channel),                             //          .channel
		.in_startofpacket     (router_002_src_startofpacket),                       //          .startofpacket
		.in_endofpacket       (router_002_src_endofpacket),                         //          .endofpacket
		.in_ready             (router_002_src_ready),                               //          .ready
		.in_data              (router_002_src_data),                                //          .data
		.out_endofpacket      (width_trans_in_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (width_trans_in_rsp_width_adapter_src_data),          //          .data
		.out_channel          (width_trans_in_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (width_trans_in_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (width_trans_in_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (width_trans_in_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (24),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (33),
		.IN_PKT_BYTE_CNT_L             (31),
		.IN_PKT_TRANS_COMPRESSED_READ  (25),
		.IN_PKT_TRANS_WRITE            (27),
		.IN_PKT_BURSTWRAP_H            (34),
		.IN_PKT_BURSTWRAP_L            (34),
		.IN_PKT_BURST_SIZE_H           (37),
		.IN_PKT_BURST_SIZE_L           (35),
		.IN_PKT_RESPONSE_STATUS_H      (63),
		.IN_PKT_RESPONSE_STATUS_L      (62),
		.IN_PKT_TRANS_EXCLUSIVE        (30),
		.IN_PKT_BURST_TYPE_H           (39),
		.IN_PKT_BURST_TYPE_L           (38),
		.IN_PKT_ORI_BURST_SIZE_L       (64),
		.IN_PKT_ORI_BURST_SIZE_H       (66),
		.IN_ST_DATA_W                  (67),
		.OUT_PKT_ADDR_H                (51),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (60),
		.OUT_PKT_BYTE_CNT_L            (58),
		.OUT_PKT_TRANS_COMPRESSED_READ (52),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (90),
		.OUT_PKT_RESPONSE_STATUS_L     (89),
		.OUT_PKT_TRANS_EXCLUSIVE       (57),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (91),
		.OUT_PKT_ORI_BURST_SIZE_H      (93),
		.OUT_ST_DATA_W                 (94),
		.ST_CHANNEL_W                  (20),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sound_io_rsp_width_adapter (
		.clk                  (pll_0_outclk0_clk),                            //       clk.clk
		.reset                (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_003_src_valid),                         //      sink.valid
		.in_channel           (router_003_src_channel),                       //          .channel
		.in_startofpacket     (router_003_src_startofpacket),                 //          .startofpacket
		.in_endofpacket       (router_003_src_endofpacket),                   //          .endofpacket
		.in_ready             (router_003_src_ready),                         //          .ready
		.in_data              (router_003_src_data),                          //          .data
		.out_endofpacket      (sound_io_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sound_io_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sound_io_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sound_io_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sound_io_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sound_io_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (24),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (33),
		.IN_PKT_BYTE_CNT_L             (31),
		.IN_PKT_TRANS_COMPRESSED_READ  (25),
		.IN_PKT_TRANS_WRITE            (27),
		.IN_PKT_BURSTWRAP_H            (34),
		.IN_PKT_BURSTWRAP_L            (34),
		.IN_PKT_BURST_SIZE_H           (37),
		.IN_PKT_BURST_SIZE_L           (35),
		.IN_PKT_RESPONSE_STATUS_H      (63),
		.IN_PKT_RESPONSE_STATUS_L      (62),
		.IN_PKT_TRANS_EXCLUSIVE        (30),
		.IN_PKT_BURST_TYPE_H           (39),
		.IN_PKT_BURST_TYPE_L           (38),
		.IN_PKT_ORI_BURST_SIZE_L       (64),
		.IN_PKT_ORI_BURST_SIZE_H       (66),
		.IN_ST_DATA_W                  (67),
		.OUT_PKT_ADDR_H                (51),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (60),
		.OUT_PKT_BYTE_CNT_L            (58),
		.OUT_PKT_TRANS_COMPRESSED_READ (52),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (90),
		.OUT_PKT_RESPONSE_STATUS_L     (89),
		.OUT_PKT_TRANS_EXCLUSIVE       (57),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (91),
		.OUT_PKT_ORI_BURST_SIZE_H      (93),
		.OUT_ST_DATA_W                 (94),
		.ST_CHANNEL_W                  (20),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) rtc_io_rsp_width_adapter (
		.clk                  (pll_0_outclk0_clk),                            //       clk.clk
		.reset                (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_004_src_valid),                         //      sink.valid
		.in_channel           (router_004_src_channel),                       //          .channel
		.in_startofpacket     (router_004_src_startofpacket),                 //          .startofpacket
		.in_endofpacket       (router_004_src_endofpacket),                   //          .endofpacket
		.in_ready             (router_004_src_ready),                         //          .ready
		.in_data              (router_004_src_data),                          //          .data
		.out_endofpacket      (rtc_io_rsp_width_adapter_src_endofpacket),     //       src.endofpacket
		.out_data             (rtc_io_rsp_width_adapter_src_data),            //          .data
		.out_channel          (rtc_io_rsp_width_adapter_src_channel),         //          .channel
		.out_valid            (rtc_io_rsp_width_adapter_src_valid),           //          .valid
		.out_ready            (rtc_io_rsp_width_adapter_src_ready),           //          .ready
		.out_startofpacket    (rtc_io_rsp_width_adapter_src_startofpacket),   //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (24),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (33),
		.IN_PKT_BYTE_CNT_L             (31),
		.IN_PKT_TRANS_COMPRESSED_READ  (25),
		.IN_PKT_TRANS_WRITE            (27),
		.IN_PKT_BURSTWRAP_H            (34),
		.IN_PKT_BURSTWRAP_L            (34),
		.IN_PKT_BURST_SIZE_H           (37),
		.IN_PKT_BURST_SIZE_L           (35),
		.IN_PKT_RESPONSE_STATUS_H      (63),
		.IN_PKT_RESPONSE_STATUS_L      (62),
		.IN_PKT_TRANS_EXCLUSIVE        (30),
		.IN_PKT_BURST_TYPE_H           (39),
		.IN_PKT_BURST_TYPE_L           (38),
		.IN_PKT_ORI_BURST_SIZE_L       (64),
		.IN_PKT_ORI_BURST_SIZE_H       (66),
		.IN_ST_DATA_W                  (67),
		.OUT_PKT_ADDR_H                (51),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (60),
		.OUT_PKT_BYTE_CNT_L            (58),
		.OUT_PKT_TRANS_COMPRESSED_READ (52),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (90),
		.OUT_PKT_RESPONSE_STATUS_L     (89),
		.OUT_PKT_TRANS_EXCLUSIVE       (57),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (91),
		.OUT_PKT_ORI_BURST_SIZE_H      (93),
		.OUT_ST_DATA_W                 (94),
		.ST_CHANNEL_W                  (20),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pit_io_rsp_width_adapter (
		.clk                  (pll_0_outclk0_clk),                            //       clk.clk
		.reset                (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_005_src_valid),                         //      sink.valid
		.in_channel           (router_005_src_channel),                       //          .channel
		.in_startofpacket     (router_005_src_startofpacket),                 //          .startofpacket
		.in_endofpacket       (router_005_src_endofpacket),                   //          .endofpacket
		.in_ready             (router_005_src_ready),                         //          .ready
		.in_data              (router_005_src_data),                          //          .data
		.out_endofpacket      (pit_io_rsp_width_adapter_src_endofpacket),     //       src.endofpacket
		.out_data             (pit_io_rsp_width_adapter_src_data),            //          .data
		.out_channel          (pit_io_rsp_width_adapter_src_channel),         //          .channel
		.out_valid            (pit_io_rsp_width_adapter_src_valid),           //          .valid
		.out_ready            (pit_io_rsp_width_adapter_src_ready),           //          .ready
		.out_startofpacket    (pit_io_rsp_width_adapter_src_startofpacket),   //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (24),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (33),
		.IN_PKT_BYTE_CNT_L             (31),
		.IN_PKT_TRANS_COMPRESSED_READ  (25),
		.IN_PKT_TRANS_WRITE            (27),
		.IN_PKT_BURSTWRAP_H            (34),
		.IN_PKT_BURSTWRAP_L            (34),
		.IN_PKT_BURST_SIZE_H           (37),
		.IN_PKT_BURST_SIZE_L           (35),
		.IN_PKT_RESPONSE_STATUS_H      (63),
		.IN_PKT_RESPONSE_STATUS_L      (62),
		.IN_PKT_TRANS_EXCLUSIVE        (30),
		.IN_PKT_BURST_TYPE_H           (39),
		.IN_PKT_BURST_TYPE_L           (38),
		.IN_PKT_ORI_BURST_SIZE_L       (64),
		.IN_PKT_ORI_BURST_SIZE_H       (66),
		.IN_ST_DATA_W                  (67),
		.OUT_PKT_ADDR_H                (51),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (60),
		.OUT_PKT_BYTE_CNT_L            (58),
		.OUT_PKT_TRANS_COMPRESSED_READ (52),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (90),
		.OUT_PKT_RESPONSE_STATUS_L     (89),
		.OUT_PKT_TRANS_EXCLUSIVE       (57),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (91),
		.OUT_PKT_ORI_BURST_SIZE_H      (93),
		.OUT_ST_DATA_W                 (94),
		.ST_CHANNEL_W                  (20),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) floppy0_io_rsp_width_adapter (
		.clk                  (pll_0_outclk0_clk),                              //       clk.clk
		.reset                (sound_reset_sink_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (router_007_src_valid),                           //      sink.valid
		.in_channel           (router_007_src_channel),                         //          .channel
		.in_startofpacket     (router_007_src_startofpacket),                   //          .startofpacket
		.in_endofpacket       (router_007_src_endofpacket),                     //          .endofpacket
		.in_ready             (router_007_src_ready),                           //          .ready
		.in_data              (router_007_src_data),                            //          .data
		.out_endofpacket      (floppy0_io_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (floppy0_io_rsp_width_adapter_src_data),          //          .data
		.out_channel          (floppy0_io_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (floppy0_io_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (floppy0_io_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (floppy0_io_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (24),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (33),
		.IN_PKT_BYTE_CNT_L             (31),
		.IN_PKT_TRANS_COMPRESSED_READ  (25),
		.IN_PKT_TRANS_WRITE            (27),
		.IN_PKT_BURSTWRAP_H            (34),
		.IN_PKT_BURSTWRAP_L            (34),
		.IN_PKT_BURST_SIZE_H           (37),
		.IN_PKT_BURST_SIZE_L           (35),
		.IN_PKT_RESPONSE_STATUS_H      (63),
		.IN_PKT_RESPONSE_STATUS_L      (62),
		.IN_PKT_TRANS_EXCLUSIVE        (30),
		.IN_PKT_BURST_TYPE_H           (39),
		.IN_PKT_BURST_TYPE_L           (38),
		.IN_PKT_ORI_BURST_SIZE_L       (64),
		.IN_PKT_ORI_BURST_SIZE_H       (66),
		.IN_ST_DATA_W                  (67),
		.OUT_PKT_ADDR_H                (51),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (60),
		.OUT_PKT_BYTE_CNT_L            (58),
		.OUT_PKT_TRANS_COMPRESSED_READ (52),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (90),
		.OUT_PKT_RESPONSE_STATUS_L     (89),
		.OUT_PKT_TRANS_EXCLUSIVE       (57),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (91),
		.OUT_PKT_ORI_BURST_SIZE_H      (93),
		.OUT_ST_DATA_W                 (94),
		.ST_CHANNEL_W                  (20),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ps2_io_rsp_width_adapter (
		.clk                  (pll_0_outclk0_clk),                            //       clk.clk
		.reset                (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_008_src_valid),                         //      sink.valid
		.in_channel           (router_008_src_channel),                       //          .channel
		.in_startofpacket     (router_008_src_startofpacket),                 //          .startofpacket
		.in_endofpacket       (router_008_src_endofpacket),                   //          .endofpacket
		.in_ready             (router_008_src_ready),                         //          .ready
		.in_data              (router_008_src_data),                          //          .data
		.out_endofpacket      (ps2_io_rsp_width_adapter_src_endofpacket),     //       src.endofpacket
		.out_data             (ps2_io_rsp_width_adapter_src_data),            //          .data
		.out_channel          (ps2_io_rsp_width_adapter_src_channel),         //          .channel
		.out_valid            (ps2_io_rsp_width_adapter_src_valid),           //          .valid
		.out_ready            (ps2_io_rsp_width_adapter_src_ready),           //          .ready
		.out_startofpacket    (ps2_io_rsp_width_adapter_src_startofpacket),   //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (24),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (33),
		.IN_PKT_BYTE_CNT_L             (31),
		.IN_PKT_TRANS_COMPRESSED_READ  (25),
		.IN_PKT_TRANS_WRITE            (27),
		.IN_PKT_BURSTWRAP_H            (34),
		.IN_PKT_BURSTWRAP_L            (34),
		.IN_PKT_BURST_SIZE_H           (37),
		.IN_PKT_BURST_SIZE_L           (35),
		.IN_PKT_RESPONSE_STATUS_H      (63),
		.IN_PKT_RESPONSE_STATUS_L      (62),
		.IN_PKT_TRANS_EXCLUSIVE        (30),
		.IN_PKT_BURST_TYPE_H           (39),
		.IN_PKT_BURST_TYPE_L           (38),
		.IN_PKT_ORI_BURST_SIZE_L       (64),
		.IN_PKT_ORI_BURST_SIZE_H       (66),
		.IN_ST_DATA_W                  (67),
		.OUT_PKT_ADDR_H                (51),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (60),
		.OUT_PKT_BYTE_CNT_L            (58),
		.OUT_PKT_TRANS_COMPRESSED_READ (52),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (90),
		.OUT_PKT_RESPONSE_STATUS_L     (89),
		.OUT_PKT_TRANS_EXCLUSIVE       (57),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (91),
		.OUT_PKT_ORI_BURST_SIZE_H      (93),
		.OUT_ST_DATA_W                 (94),
		.ST_CHANNEL_W                  (20),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) hddext_0x370_io_rsp_width_adapter (
		.clk                  (pll_0_outclk0_clk),                                   //       clk.clk
		.reset                (sound_reset_sink_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_valid             (router_010_src_valid),                                //      sink.valid
		.in_channel           (router_010_src_channel),                              //          .channel
		.in_startofpacket     (router_010_src_startofpacket),                        //          .startofpacket
		.in_endofpacket       (router_010_src_endofpacket),                          //          .endofpacket
		.in_ready             (router_010_src_ready),                                //          .ready
		.in_data              (router_010_src_data),                                 //          .data
		.out_endofpacket      (hddext_0x370_io_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hddext_0x370_io_rsp_width_adapter_src_data),          //          .data
		.out_channel          (hddext_0x370_io_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (hddext_0x370_io_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (hddext_0x370_io_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hddext_0x370_io_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (24),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (33),
		.IN_PKT_BYTE_CNT_L             (31),
		.IN_PKT_TRANS_COMPRESSED_READ  (25),
		.IN_PKT_TRANS_WRITE            (27),
		.IN_PKT_BURSTWRAP_H            (34),
		.IN_PKT_BURSTWRAP_L            (34),
		.IN_PKT_BURST_SIZE_H           (37),
		.IN_PKT_BURST_SIZE_L           (35),
		.IN_PKT_RESPONSE_STATUS_H      (63),
		.IN_PKT_RESPONSE_STATUS_L      (62),
		.IN_PKT_TRANS_EXCLUSIVE        (30),
		.IN_PKT_BURST_TYPE_H           (39),
		.IN_PKT_BURST_TYPE_L           (38),
		.IN_PKT_ORI_BURST_SIZE_L       (64),
		.IN_PKT_ORI_BURST_SIZE_H       (66),
		.IN_ST_DATA_W                  (67),
		.OUT_PKT_ADDR_H                (51),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (60),
		.OUT_PKT_BYTE_CNT_L            (58),
		.OUT_PKT_TRANS_COMPRESSED_READ (52),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (90),
		.OUT_PKT_RESPONSE_STATUS_L     (89),
		.OUT_PKT_TRANS_EXCLUSIVE       (57),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (91),
		.OUT_PKT_ORI_BURST_SIZE_H      (93),
		.OUT_ST_DATA_W                 (94),
		.ST_CHANNEL_W                  (20),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) vga_io_b_rsp_width_adapter (
		.clk                  (pll_0_outclk0_clk),                            //       clk.clk
		.reset                (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_011_src_valid),                         //      sink.valid
		.in_channel           (router_011_src_channel),                       //          .channel
		.in_startofpacket     (router_011_src_startofpacket),                 //          .startofpacket
		.in_endofpacket       (router_011_src_endofpacket),                   //          .endofpacket
		.in_ready             (router_011_src_ready),                         //          .ready
		.in_data              (router_011_src_data),                          //          .data
		.out_endofpacket      (vga_io_b_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (vga_io_b_rsp_width_adapter_src_data),          //          .data
		.out_channel          (vga_io_b_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (vga_io_b_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (vga_io_b_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (vga_io_b_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (24),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (33),
		.IN_PKT_BYTE_CNT_L             (31),
		.IN_PKT_TRANS_COMPRESSED_READ  (25),
		.IN_PKT_TRANS_WRITE            (27),
		.IN_PKT_BURSTWRAP_H            (34),
		.IN_PKT_BURSTWRAP_L            (34),
		.IN_PKT_BURST_SIZE_H           (37),
		.IN_PKT_BURST_SIZE_L           (35),
		.IN_PKT_RESPONSE_STATUS_H      (63),
		.IN_PKT_RESPONSE_STATUS_L      (62),
		.IN_PKT_TRANS_EXCLUSIVE        (30),
		.IN_PKT_BURST_TYPE_H           (39),
		.IN_PKT_BURST_TYPE_L           (38),
		.IN_PKT_ORI_BURST_SIZE_L       (64),
		.IN_PKT_ORI_BURST_SIZE_H       (66),
		.IN_ST_DATA_W                  (67),
		.OUT_PKT_ADDR_H                (51),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (60),
		.OUT_PKT_BYTE_CNT_L            (58),
		.OUT_PKT_TRANS_COMPRESSED_READ (52),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (90),
		.OUT_PKT_RESPONSE_STATUS_L     (89),
		.OUT_PKT_TRANS_EXCLUSIVE       (57),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (91),
		.OUT_PKT_ORI_BURST_SIZE_H      (93),
		.OUT_ST_DATA_W                 (94),
		.ST_CHANNEL_W                  (20),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) vga_io_c_rsp_width_adapter (
		.clk                  (pll_0_outclk0_clk),                            //       clk.clk
		.reset                (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_012_src_valid),                         //      sink.valid
		.in_channel           (router_012_src_channel),                       //          .channel
		.in_startofpacket     (router_012_src_startofpacket),                 //          .startofpacket
		.in_endofpacket       (router_012_src_endofpacket),                   //          .endofpacket
		.in_ready             (router_012_src_ready),                         //          .ready
		.in_data              (router_012_src_data),                          //          .data
		.out_endofpacket      (vga_io_c_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (vga_io_c_rsp_width_adapter_src_data),          //          .data
		.out_channel          (vga_io_c_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (vga_io_c_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (vga_io_c_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (vga_io_c_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (24),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (33),
		.IN_PKT_BYTE_CNT_L             (31),
		.IN_PKT_TRANS_COMPRESSED_READ  (25),
		.IN_PKT_TRANS_WRITE            (27),
		.IN_PKT_BURSTWRAP_H            (34),
		.IN_PKT_BURSTWRAP_L            (34),
		.IN_PKT_BURST_SIZE_H           (37),
		.IN_PKT_BURST_SIZE_L           (35),
		.IN_PKT_RESPONSE_STATUS_H      (63),
		.IN_PKT_RESPONSE_STATUS_L      (62),
		.IN_PKT_TRANS_EXCLUSIVE        (30),
		.IN_PKT_BURST_TYPE_H           (39),
		.IN_PKT_BURST_TYPE_L           (38),
		.IN_PKT_ORI_BURST_SIZE_L       (64),
		.IN_PKT_ORI_BURST_SIZE_H       (66),
		.IN_ST_DATA_W                  (67),
		.OUT_PKT_ADDR_H                (51),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (60),
		.OUT_PKT_BYTE_CNT_L            (58),
		.OUT_PKT_TRANS_COMPRESSED_READ (52),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (90),
		.OUT_PKT_RESPONSE_STATUS_L     (89),
		.OUT_PKT_TRANS_EXCLUSIVE       (57),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (91),
		.OUT_PKT_ORI_BURST_SIZE_H      (93),
		.OUT_ST_DATA_W                 (94),
		.ST_CHANNEL_W                  (20),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) vga_io_d_rsp_width_adapter (
		.clk                  (pll_0_outclk0_clk),                            //       clk.clk
		.reset                (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_013_src_valid),                         //      sink.valid
		.in_channel           (router_013_src_channel),                       //          .channel
		.in_startofpacket     (router_013_src_startofpacket),                 //          .startofpacket
		.in_endofpacket       (router_013_src_endofpacket),                   //          .endofpacket
		.in_ready             (router_013_src_ready),                         //          .ready
		.in_data              (router_013_src_data),                          //          .data
		.out_endofpacket      (vga_io_d_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (vga_io_d_rsp_width_adapter_src_data),          //          .data
		.out_channel          (vga_io_d_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (vga_io_d_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (vga_io_d_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (vga_io_d_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (24),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (33),
		.IN_PKT_BYTE_CNT_L             (31),
		.IN_PKT_TRANS_COMPRESSED_READ  (25),
		.IN_PKT_TRANS_WRITE            (27),
		.IN_PKT_BURSTWRAP_H            (34),
		.IN_PKT_BURSTWRAP_L            (34),
		.IN_PKT_BURST_SIZE_H           (37),
		.IN_PKT_BURST_SIZE_L           (35),
		.IN_PKT_RESPONSE_STATUS_H      (63),
		.IN_PKT_RESPONSE_STATUS_L      (62),
		.IN_PKT_TRANS_EXCLUSIVE        (30),
		.IN_PKT_BURST_TYPE_H           (39),
		.IN_PKT_BURST_TYPE_L           (38),
		.IN_PKT_ORI_BURST_SIZE_L       (64),
		.IN_PKT_ORI_BURST_SIZE_H       (66),
		.IN_ST_DATA_W                  (67),
		.OUT_PKT_ADDR_H                (51),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (60),
		.OUT_PKT_BYTE_CNT_L            (58),
		.OUT_PKT_TRANS_COMPRESSED_READ (52),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (90),
		.OUT_PKT_RESPONSE_STATUS_L     (89),
		.OUT_PKT_TRANS_EXCLUSIVE       (57),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (91),
		.OUT_PKT_ORI_BURST_SIZE_H      (93),
		.OUT_ST_DATA_W                 (94),
		.ST_CHANNEL_W                  (20),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pc_dma_master_rsp_width_adapter (
		.clk                  (pll_0_outclk0_clk),                                 //       clk.clk
		.reset                (sound_reset_sink_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_valid             (router_014_src_valid),                              //      sink.valid
		.in_channel           (router_014_src_channel),                            //          .channel
		.in_startofpacket     (router_014_src_startofpacket),                      //          .startofpacket
		.in_endofpacket       (router_014_src_endofpacket),                        //          .endofpacket
		.in_ready             (router_014_src_ready),                              //          .ready
		.in_data              (router_014_src_data),                               //          .data
		.out_endofpacket      (pc_dma_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pc_dma_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (pc_dma_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (pc_dma_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (pc_dma_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pc_dma_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (24),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (33),
		.IN_PKT_BYTE_CNT_L             (31),
		.IN_PKT_TRANS_COMPRESSED_READ  (25),
		.IN_PKT_TRANS_WRITE            (27),
		.IN_PKT_BURSTWRAP_H            (34),
		.IN_PKT_BURSTWRAP_L            (34),
		.IN_PKT_BURST_SIZE_H           (37),
		.IN_PKT_BURST_SIZE_L           (35),
		.IN_PKT_RESPONSE_STATUS_H      (63),
		.IN_PKT_RESPONSE_STATUS_L      (62),
		.IN_PKT_TRANS_EXCLUSIVE        (30),
		.IN_PKT_BURST_TYPE_H           (39),
		.IN_PKT_BURST_TYPE_L           (38),
		.IN_PKT_ORI_BURST_SIZE_L       (64),
		.IN_PKT_ORI_BURST_SIZE_H       (66),
		.IN_ST_DATA_W                  (67),
		.OUT_PKT_ADDR_H                (51),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (60),
		.OUT_PKT_BYTE_CNT_L            (58),
		.OUT_PKT_TRANS_COMPRESSED_READ (52),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (90),
		.OUT_PKT_RESPONSE_STATUS_L     (89),
		.OUT_PKT_TRANS_EXCLUSIVE       (57),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (91),
		.OUT_PKT_ORI_BURST_SIZE_H      (93),
		.OUT_ST_DATA_W                 (94),
		.ST_CHANNEL_W                  (20),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pic_master_rsp_width_adapter (
		.clk                  (pll_0_outclk0_clk),                              //       clk.clk
		.reset                (sound_reset_sink_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (router_015_src_valid),                           //      sink.valid
		.in_channel           (router_015_src_channel),                         //          .channel
		.in_startofpacket     (router_015_src_startofpacket),                   //          .startofpacket
		.in_endofpacket       (router_015_src_endofpacket),                     //          .endofpacket
		.in_ready             (router_015_src_ready),                           //          .ready
		.in_data              (router_015_src_data),                            //          .data
		.out_endofpacket      (pic_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pic_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (pic_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (pic_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (pic_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pic_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (24),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (33),
		.IN_PKT_BYTE_CNT_L             (31),
		.IN_PKT_TRANS_COMPRESSED_READ  (25),
		.IN_PKT_TRANS_WRITE            (27),
		.IN_PKT_BURSTWRAP_H            (34),
		.IN_PKT_BURSTWRAP_L            (34),
		.IN_PKT_BURST_SIZE_H           (37),
		.IN_PKT_BURST_SIZE_L           (35),
		.IN_PKT_RESPONSE_STATUS_H      (63),
		.IN_PKT_RESPONSE_STATUS_L      (62),
		.IN_PKT_TRANS_EXCLUSIVE        (30),
		.IN_PKT_BURST_TYPE_H           (39),
		.IN_PKT_BURST_TYPE_L           (38),
		.IN_PKT_ORI_BURST_SIZE_L       (64),
		.IN_PKT_ORI_BURST_SIZE_H       (66),
		.IN_ST_DATA_W                  (67),
		.OUT_PKT_ADDR_H                (51),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (60),
		.OUT_PKT_BYTE_CNT_L            (58),
		.OUT_PKT_TRANS_COMPRESSED_READ (52),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (90),
		.OUT_PKT_RESPONSE_STATUS_L     (89),
		.OUT_PKT_TRANS_EXCLUSIVE       (57),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (91),
		.OUT_PKT_ORI_BURST_SIZE_H      (93),
		.OUT_ST_DATA_W                 (94),
		.ST_CHANNEL_W                  (20),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sound_mpu_rsp_width_adapter (
		.clk                  (pll_0_outclk0_clk),                             //       clk.clk
		.reset                (sound_reset_sink_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_valid             (router_016_src_valid),                          //      sink.valid
		.in_channel           (router_016_src_channel),                        //          .channel
		.in_startofpacket     (router_016_src_startofpacket),                  //          .startofpacket
		.in_endofpacket       (router_016_src_endofpacket),                    //          .endofpacket
		.in_ready             (router_016_src_ready),                          //          .ready
		.in_data              (router_016_src_data),                           //          .data
		.out_endofpacket      (sound_mpu_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sound_mpu_rsp_width_adapter_src_data),          //          .data
		.out_channel          (sound_mpu_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (sound_mpu_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (sound_mpu_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sound_mpu_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (24),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (33),
		.IN_PKT_BYTE_CNT_L             (31),
		.IN_PKT_TRANS_COMPRESSED_READ  (25),
		.IN_PKT_TRANS_WRITE            (27),
		.IN_PKT_BURSTWRAP_H            (34),
		.IN_PKT_BURSTWRAP_L            (34),
		.IN_PKT_BURST_SIZE_H           (37),
		.IN_PKT_BURST_SIZE_L           (35),
		.IN_PKT_RESPONSE_STATUS_H      (63),
		.IN_PKT_RESPONSE_STATUS_L      (62),
		.IN_PKT_TRANS_EXCLUSIVE        (30),
		.IN_PKT_BURST_TYPE_H           (39),
		.IN_PKT_BURST_TYPE_L           (38),
		.IN_PKT_ORI_BURST_SIZE_L       (64),
		.IN_PKT_ORI_BURST_SIZE_H       (66),
		.IN_ST_DATA_W                  (67),
		.OUT_PKT_ADDR_H                (51),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (60),
		.OUT_PKT_BYTE_CNT_L            (58),
		.OUT_PKT_TRANS_COMPRESSED_READ (52),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (90),
		.OUT_PKT_RESPONSE_STATUS_L     (89),
		.OUT_PKT_TRANS_EXCLUSIVE       (57),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (91),
		.OUT_PKT_ORI_BURST_SIZE_H      (93),
		.OUT_ST_DATA_W                 (94),
		.ST_CHANNEL_W                  (20),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pc_dma_page_rsp_width_adapter (
		.clk                  (pll_0_outclk0_clk),                               //       clk.clk
		.reset                (sound_reset_sink_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_valid             (router_017_src_valid),                            //      sink.valid
		.in_channel           (router_017_src_channel),                          //          .channel
		.in_startofpacket     (router_017_src_startofpacket),                    //          .startofpacket
		.in_endofpacket       (router_017_src_endofpacket),                      //          .endofpacket
		.in_ready             (router_017_src_ready),                            //          .ready
		.in_data              (router_017_src_data),                             //          .data
		.out_endofpacket      (pc_dma_page_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pc_dma_page_rsp_width_adapter_src_data),          //          .data
		.out_channel          (pc_dma_page_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (pc_dma_page_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (pc_dma_page_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pc_dma_page_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (24),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (33),
		.IN_PKT_BYTE_CNT_L             (31),
		.IN_PKT_TRANS_COMPRESSED_READ  (25),
		.IN_PKT_TRANS_WRITE            (27),
		.IN_PKT_BURSTWRAP_H            (34),
		.IN_PKT_BURSTWRAP_L            (34),
		.IN_PKT_BURST_SIZE_H           (37),
		.IN_PKT_BURST_SIZE_L           (35),
		.IN_PKT_RESPONSE_STATUS_H      (63),
		.IN_PKT_RESPONSE_STATUS_L      (62),
		.IN_PKT_TRANS_EXCLUSIVE        (30),
		.IN_PKT_BURST_TYPE_H           (39),
		.IN_PKT_BURST_TYPE_L           (38),
		.IN_PKT_ORI_BURST_SIZE_L       (64),
		.IN_PKT_ORI_BURST_SIZE_H       (66),
		.IN_ST_DATA_W                  (67),
		.OUT_PKT_ADDR_H                (51),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (60),
		.OUT_PKT_BYTE_CNT_L            (58),
		.OUT_PKT_TRANS_COMPRESSED_READ (52),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (90),
		.OUT_PKT_RESPONSE_STATUS_L     (89),
		.OUT_PKT_TRANS_EXCLUSIVE       (57),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (91),
		.OUT_PKT_ORI_BURST_SIZE_H      (93),
		.OUT_ST_DATA_W                 (94),
		.ST_CHANNEL_W                  (20),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pc_dma_slave_rsp_width_adapter (
		.clk                  (pll_0_outclk0_clk),                                //       clk.clk
		.reset                (sound_reset_sink_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (router_018_src_valid),                             //      sink.valid
		.in_channel           (router_018_src_channel),                           //          .channel
		.in_startofpacket     (router_018_src_startofpacket),                     //          .startofpacket
		.in_endofpacket       (router_018_src_endofpacket),                       //          .endofpacket
		.in_ready             (router_018_src_ready),                             //          .ready
		.in_data              (router_018_src_data),                              //          .data
		.out_endofpacket      (pc_dma_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pc_dma_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (pc_dma_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (pc_dma_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (pc_dma_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pc_dma_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (24),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (33),
		.IN_PKT_BYTE_CNT_L             (31),
		.IN_PKT_TRANS_COMPRESSED_READ  (25),
		.IN_PKT_TRANS_WRITE            (27),
		.IN_PKT_BURSTWRAP_H            (34),
		.IN_PKT_BURSTWRAP_L            (34),
		.IN_PKT_BURST_SIZE_H           (37),
		.IN_PKT_BURST_SIZE_L           (35),
		.IN_PKT_RESPONSE_STATUS_H      (63),
		.IN_PKT_RESPONSE_STATUS_L      (62),
		.IN_PKT_TRANS_EXCLUSIVE        (30),
		.IN_PKT_BURST_TYPE_H           (39),
		.IN_PKT_BURST_TYPE_L           (38),
		.IN_PKT_ORI_BURST_SIZE_L       (64),
		.IN_PKT_ORI_BURST_SIZE_H       (66),
		.IN_ST_DATA_W                  (67),
		.OUT_PKT_ADDR_H                (51),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (60),
		.OUT_PKT_BYTE_CNT_L            (58),
		.OUT_PKT_TRANS_COMPRESSED_READ (52),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (90),
		.OUT_PKT_RESPONSE_STATUS_L     (89),
		.OUT_PKT_TRANS_EXCLUSIVE       (57),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (91),
		.OUT_PKT_ORI_BURST_SIZE_H      (93),
		.OUT_ST_DATA_W                 (94),
		.ST_CHANNEL_W                  (20),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pic_slave_rsp_width_adapter (
		.clk                  (pll_0_outclk0_clk),                             //       clk.clk
		.reset                (sound_reset_sink_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_valid             (router_019_src_valid),                          //      sink.valid
		.in_channel           (router_019_src_channel),                        //          .channel
		.in_startofpacket     (router_019_src_startofpacket),                  //          .startofpacket
		.in_endofpacket       (router_019_src_endofpacket),                    //          .endofpacket
		.in_ready             (router_019_src_ready),                          //          .ready
		.in_data              (router_019_src_data),                           //          .data
		.out_endofpacket      (pic_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pic_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (pic_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (pic_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (pic_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pic_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (24),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (33),
		.IN_PKT_BYTE_CNT_L             (31),
		.IN_PKT_TRANS_COMPRESSED_READ  (25),
		.IN_PKT_TRANS_WRITE            (27),
		.IN_PKT_BURSTWRAP_H            (34),
		.IN_PKT_BURSTWRAP_L            (34),
		.IN_PKT_BURST_SIZE_H           (37),
		.IN_PKT_BURST_SIZE_L           (35),
		.IN_PKT_RESPONSE_STATUS_H      (63),
		.IN_PKT_RESPONSE_STATUS_L      (62),
		.IN_PKT_TRANS_EXCLUSIVE        (30),
		.IN_PKT_BURST_TYPE_H           (39),
		.IN_PKT_BURST_TYPE_L           (38),
		.IN_PKT_ORI_BURST_SIZE_L       (64),
		.IN_PKT_ORI_BURST_SIZE_H       (66),
		.IN_ST_DATA_W                  (67),
		.OUT_PKT_ADDR_H                (51),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (60),
		.OUT_PKT_BYTE_CNT_L            (58),
		.OUT_PKT_TRANS_COMPRESSED_READ (52),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (90),
		.OUT_PKT_RESPONSE_STATUS_L     (89),
		.OUT_PKT_TRANS_EXCLUSIVE       (57),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (91),
		.OUT_PKT_ORI_BURST_SIZE_H      (93),
		.OUT_ST_DATA_W                 (94),
		.ST_CHANNEL_W                  (20),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ps2_sysctl_rsp_width_adapter (
		.clk                  (pll_0_outclk0_clk),                              //       clk.clk
		.reset                (sound_reset_sink_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (router_020_src_valid),                           //      sink.valid
		.in_channel           (router_020_src_channel),                         //          .channel
		.in_startofpacket     (router_020_src_startofpacket),                   //          .startofpacket
		.in_endofpacket       (router_020_src_endofpacket),                     //          .endofpacket
		.in_ready             (router_020_src_ready),                           //          .ready
		.in_data              (router_020_src_data),                            //          .data
		.out_endofpacket      (ps2_sysctl_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ps2_sysctl_rsp_width_adapter_src_data),          //          .data
		.out_channel          (ps2_sysctl_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (ps2_sysctl_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (ps2_sysctl_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ps2_sysctl_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (51),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (60),
		.IN_PKT_BYTE_CNT_L             (58),
		.IN_PKT_TRANS_COMPRESSED_READ  (52),
		.IN_PKT_TRANS_WRITE            (54),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (61),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (90),
		.IN_PKT_RESPONSE_STATUS_L      (89),
		.IN_PKT_TRANS_EXCLUSIVE        (57),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (91),
		.IN_PKT_ORI_BURST_SIZE_H       (93),
		.IN_ST_DATA_W                  (94),
		.OUT_PKT_ADDR_H                (24),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (33),
		.OUT_PKT_BYTE_CNT_L            (31),
		.OUT_PKT_TRANS_COMPRESSED_READ (25),
		.OUT_PKT_BURST_SIZE_H          (37),
		.OUT_PKT_BURST_SIZE_L          (35),
		.OUT_PKT_RESPONSE_STATUS_H     (63),
		.OUT_PKT_RESPONSE_STATUS_L     (62),
		.OUT_PKT_TRANS_EXCLUSIVE       (30),
		.OUT_PKT_BURST_TYPE_H          (39),
		.OUT_PKT_BURST_TYPE_L          (38),
		.OUT_PKT_ORI_BURST_SIZE_L      (64),
		.OUT_PKT_ORI_BURST_SIZE_H      (66),
		.OUT_ST_DATA_W                 (67),
		.ST_CHANNEL_W                  (20),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sound_fm_cmd_width_adapter (
		.clk                  (pll_0_outclk0_clk),                            //       clk.clk
		.reset                (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_src_valid),                            //      sink.valid
		.in_channel           (cmd_mux_src_channel),                          //          .channel
		.in_startofpacket     (cmd_mux_src_startofpacket),                    //          .startofpacket
		.in_endofpacket       (cmd_mux_src_endofpacket),                      //          .endofpacket
		.in_ready             (cmd_mux_src_ready),                            //          .ready
		.in_data              (cmd_mux_src_data),                             //          .data
		.out_endofpacket      (sound_fm_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sound_fm_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sound_fm_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sound_fm_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sound_fm_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sound_fm_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (51),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (60),
		.IN_PKT_BYTE_CNT_L             (58),
		.IN_PKT_TRANS_COMPRESSED_READ  (52),
		.IN_PKT_TRANS_WRITE            (54),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (61),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (90),
		.IN_PKT_RESPONSE_STATUS_L      (89),
		.IN_PKT_TRANS_EXCLUSIVE        (57),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (91),
		.IN_PKT_ORI_BURST_SIZE_H       (93),
		.IN_ST_DATA_W                  (94),
		.OUT_PKT_ADDR_H                (24),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (33),
		.OUT_PKT_BYTE_CNT_L            (31),
		.OUT_PKT_TRANS_COMPRESSED_READ (25),
		.OUT_PKT_BURST_SIZE_H          (37),
		.OUT_PKT_BURST_SIZE_L          (35),
		.OUT_PKT_RESPONSE_STATUS_H     (63),
		.OUT_PKT_RESPONSE_STATUS_L     (62),
		.OUT_PKT_TRANS_EXCLUSIVE       (30),
		.OUT_PKT_BURST_TYPE_H          (39),
		.OUT_PKT_BURST_TYPE_L          (38),
		.OUT_PKT_ORI_BURST_SIZE_L      (64),
		.OUT_PKT_ORI_BURST_SIZE_H      (66),
		.OUT_ST_DATA_W                 (67),
		.ST_CHANNEL_W                  (20),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) width_trans_in_cmd_width_adapter (
		.clk                  (pll_0_outclk2_clk),                                  //       clk.clk
		.reset                (width_trans_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                              //      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                            //          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                      //          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                        //          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                              //          .ready
		.in_data              (cmd_mux_001_src_data),                               //          .data
		.out_endofpacket      (width_trans_in_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (width_trans_in_cmd_width_adapter_src_data),          //          .data
		.out_channel          (width_trans_in_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (width_trans_in_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (width_trans_in_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (width_trans_in_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                              // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (51),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (60),
		.IN_PKT_BYTE_CNT_L             (58),
		.IN_PKT_TRANS_COMPRESSED_READ  (52),
		.IN_PKT_TRANS_WRITE            (54),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (61),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (90),
		.IN_PKT_RESPONSE_STATUS_L      (89),
		.IN_PKT_TRANS_EXCLUSIVE        (57),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (91),
		.IN_PKT_ORI_BURST_SIZE_H       (93),
		.IN_ST_DATA_W                  (94),
		.OUT_PKT_ADDR_H                (24),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (33),
		.OUT_PKT_BYTE_CNT_L            (31),
		.OUT_PKT_TRANS_COMPRESSED_READ (25),
		.OUT_PKT_BURST_SIZE_H          (37),
		.OUT_PKT_BURST_SIZE_L          (35),
		.OUT_PKT_RESPONSE_STATUS_H     (63),
		.OUT_PKT_RESPONSE_STATUS_L     (62),
		.OUT_PKT_TRANS_EXCLUSIVE       (30),
		.OUT_PKT_BURST_TYPE_H          (39),
		.OUT_PKT_BURST_TYPE_L          (38),
		.OUT_PKT_ORI_BURST_SIZE_L      (64),
		.OUT_PKT_ORI_BURST_SIZE_H      (66),
		.OUT_ST_DATA_W                 (67),
		.ST_CHANNEL_W                  (20),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sound_io_cmd_width_adapter (
		.clk                  (pll_0_outclk0_clk),                            //       clk.clk
		.reset                (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_002_src_valid),                        //      sink.valid
		.in_channel           (cmd_mux_002_src_channel),                      //          .channel
		.in_startofpacket     (cmd_mux_002_src_startofpacket),                //          .startofpacket
		.in_endofpacket       (cmd_mux_002_src_endofpacket),                  //          .endofpacket
		.in_ready             (cmd_mux_002_src_ready),                        //          .ready
		.in_data              (cmd_mux_002_src_data),                         //          .data
		.out_endofpacket      (sound_io_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sound_io_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sound_io_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sound_io_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sound_io_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sound_io_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (51),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (60),
		.IN_PKT_BYTE_CNT_L             (58),
		.IN_PKT_TRANS_COMPRESSED_READ  (52),
		.IN_PKT_TRANS_WRITE            (54),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (61),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (90),
		.IN_PKT_RESPONSE_STATUS_L      (89),
		.IN_PKT_TRANS_EXCLUSIVE        (57),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (91),
		.IN_PKT_ORI_BURST_SIZE_H       (93),
		.IN_ST_DATA_W                  (94),
		.OUT_PKT_ADDR_H                (24),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (33),
		.OUT_PKT_BYTE_CNT_L            (31),
		.OUT_PKT_TRANS_COMPRESSED_READ (25),
		.OUT_PKT_BURST_SIZE_H          (37),
		.OUT_PKT_BURST_SIZE_L          (35),
		.OUT_PKT_RESPONSE_STATUS_H     (63),
		.OUT_PKT_RESPONSE_STATUS_L     (62),
		.OUT_PKT_TRANS_EXCLUSIVE       (30),
		.OUT_PKT_BURST_TYPE_H          (39),
		.OUT_PKT_BURST_TYPE_L          (38),
		.OUT_PKT_ORI_BURST_SIZE_L      (64),
		.OUT_PKT_ORI_BURST_SIZE_H      (66),
		.OUT_ST_DATA_W                 (67),
		.ST_CHANNEL_W                  (20),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) rtc_io_cmd_width_adapter (
		.clk                  (pll_0_outclk0_clk),                            //       clk.clk
		.reset                (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_003_src_valid),                        //      sink.valid
		.in_channel           (cmd_mux_003_src_channel),                      //          .channel
		.in_startofpacket     (cmd_mux_003_src_startofpacket),                //          .startofpacket
		.in_endofpacket       (cmd_mux_003_src_endofpacket),                  //          .endofpacket
		.in_ready             (cmd_mux_003_src_ready),                        //          .ready
		.in_data              (cmd_mux_003_src_data),                         //          .data
		.out_endofpacket      (rtc_io_cmd_width_adapter_src_endofpacket),     //       src.endofpacket
		.out_data             (rtc_io_cmd_width_adapter_src_data),            //          .data
		.out_channel          (rtc_io_cmd_width_adapter_src_channel),         //          .channel
		.out_valid            (rtc_io_cmd_width_adapter_src_valid),           //          .valid
		.out_ready            (rtc_io_cmd_width_adapter_src_ready),           //          .ready
		.out_startofpacket    (rtc_io_cmd_width_adapter_src_startofpacket),   //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (51),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (60),
		.IN_PKT_BYTE_CNT_L             (58),
		.IN_PKT_TRANS_COMPRESSED_READ  (52),
		.IN_PKT_TRANS_WRITE            (54),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (61),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (90),
		.IN_PKT_RESPONSE_STATUS_L      (89),
		.IN_PKT_TRANS_EXCLUSIVE        (57),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (91),
		.IN_PKT_ORI_BURST_SIZE_H       (93),
		.IN_ST_DATA_W                  (94),
		.OUT_PKT_ADDR_H                (24),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (33),
		.OUT_PKT_BYTE_CNT_L            (31),
		.OUT_PKT_TRANS_COMPRESSED_READ (25),
		.OUT_PKT_BURST_SIZE_H          (37),
		.OUT_PKT_BURST_SIZE_L          (35),
		.OUT_PKT_RESPONSE_STATUS_H     (63),
		.OUT_PKT_RESPONSE_STATUS_L     (62),
		.OUT_PKT_TRANS_EXCLUSIVE       (30),
		.OUT_PKT_BURST_TYPE_H          (39),
		.OUT_PKT_BURST_TYPE_L          (38),
		.OUT_PKT_ORI_BURST_SIZE_L      (64),
		.OUT_PKT_ORI_BURST_SIZE_H      (66),
		.OUT_ST_DATA_W                 (67),
		.ST_CHANNEL_W                  (20),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pit_io_cmd_width_adapter (
		.clk                  (pll_0_outclk0_clk),                            //       clk.clk
		.reset                (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_004_src_valid),                        //      sink.valid
		.in_channel           (cmd_mux_004_src_channel),                      //          .channel
		.in_startofpacket     (cmd_mux_004_src_startofpacket),                //          .startofpacket
		.in_endofpacket       (cmd_mux_004_src_endofpacket),                  //          .endofpacket
		.in_ready             (cmd_mux_004_src_ready),                        //          .ready
		.in_data              (cmd_mux_004_src_data),                         //          .data
		.out_endofpacket      (pit_io_cmd_width_adapter_src_endofpacket),     //       src.endofpacket
		.out_data             (pit_io_cmd_width_adapter_src_data),            //          .data
		.out_channel          (pit_io_cmd_width_adapter_src_channel),         //          .channel
		.out_valid            (pit_io_cmd_width_adapter_src_valid),           //          .valid
		.out_ready            (pit_io_cmd_width_adapter_src_ready),           //          .ready
		.out_startofpacket    (pit_io_cmd_width_adapter_src_startofpacket),   //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (51),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (60),
		.IN_PKT_BYTE_CNT_L             (58),
		.IN_PKT_TRANS_COMPRESSED_READ  (52),
		.IN_PKT_TRANS_WRITE            (54),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (61),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (90),
		.IN_PKT_RESPONSE_STATUS_L      (89),
		.IN_PKT_TRANS_EXCLUSIVE        (57),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (91),
		.IN_PKT_ORI_BURST_SIZE_H       (93),
		.IN_ST_DATA_W                  (94),
		.OUT_PKT_ADDR_H                (24),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (33),
		.OUT_PKT_BYTE_CNT_L            (31),
		.OUT_PKT_TRANS_COMPRESSED_READ (25),
		.OUT_PKT_BURST_SIZE_H          (37),
		.OUT_PKT_BURST_SIZE_L          (35),
		.OUT_PKT_RESPONSE_STATUS_H     (63),
		.OUT_PKT_RESPONSE_STATUS_L     (62),
		.OUT_PKT_TRANS_EXCLUSIVE       (30),
		.OUT_PKT_BURST_TYPE_H          (39),
		.OUT_PKT_BURST_TYPE_L          (38),
		.OUT_PKT_ORI_BURST_SIZE_L      (64),
		.OUT_PKT_ORI_BURST_SIZE_H      (66),
		.OUT_ST_DATA_W                 (67),
		.ST_CHANNEL_W                  (20),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) floppy0_io_cmd_width_adapter (
		.clk                  (pll_0_outclk0_clk),                              //       clk.clk
		.reset                (sound_reset_sink_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (cmd_mux_006_src_valid),                          //      sink.valid
		.in_channel           (cmd_mux_006_src_channel),                        //          .channel
		.in_startofpacket     (cmd_mux_006_src_startofpacket),                  //          .startofpacket
		.in_endofpacket       (cmd_mux_006_src_endofpacket),                    //          .endofpacket
		.in_ready             (cmd_mux_006_src_ready),                          //          .ready
		.in_data              (cmd_mux_006_src_data),                           //          .data
		.out_endofpacket      (floppy0_io_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (floppy0_io_cmd_width_adapter_src_data),          //          .data
		.out_channel          (floppy0_io_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (floppy0_io_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (floppy0_io_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (floppy0_io_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (51),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (60),
		.IN_PKT_BYTE_CNT_L             (58),
		.IN_PKT_TRANS_COMPRESSED_READ  (52),
		.IN_PKT_TRANS_WRITE            (54),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (61),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (90),
		.IN_PKT_RESPONSE_STATUS_L      (89),
		.IN_PKT_TRANS_EXCLUSIVE        (57),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (91),
		.IN_PKT_ORI_BURST_SIZE_H       (93),
		.IN_ST_DATA_W                  (94),
		.OUT_PKT_ADDR_H                (24),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (33),
		.OUT_PKT_BYTE_CNT_L            (31),
		.OUT_PKT_TRANS_COMPRESSED_READ (25),
		.OUT_PKT_BURST_SIZE_H          (37),
		.OUT_PKT_BURST_SIZE_L          (35),
		.OUT_PKT_RESPONSE_STATUS_H     (63),
		.OUT_PKT_RESPONSE_STATUS_L     (62),
		.OUT_PKT_TRANS_EXCLUSIVE       (30),
		.OUT_PKT_BURST_TYPE_H          (39),
		.OUT_PKT_BURST_TYPE_L          (38),
		.OUT_PKT_ORI_BURST_SIZE_L      (64),
		.OUT_PKT_ORI_BURST_SIZE_H      (66),
		.OUT_ST_DATA_W                 (67),
		.ST_CHANNEL_W                  (20),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ps2_io_cmd_width_adapter (
		.clk                  (pll_0_outclk0_clk),                            //       clk.clk
		.reset                (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_007_src_valid),                        //      sink.valid
		.in_channel           (cmd_mux_007_src_channel),                      //          .channel
		.in_startofpacket     (cmd_mux_007_src_startofpacket),                //          .startofpacket
		.in_endofpacket       (cmd_mux_007_src_endofpacket),                  //          .endofpacket
		.in_ready             (cmd_mux_007_src_ready),                        //          .ready
		.in_data              (cmd_mux_007_src_data),                         //          .data
		.out_endofpacket      (ps2_io_cmd_width_adapter_src_endofpacket),     //       src.endofpacket
		.out_data             (ps2_io_cmd_width_adapter_src_data),            //          .data
		.out_channel          (ps2_io_cmd_width_adapter_src_channel),         //          .channel
		.out_valid            (ps2_io_cmd_width_adapter_src_valid),           //          .valid
		.out_ready            (ps2_io_cmd_width_adapter_src_ready),           //          .ready
		.out_startofpacket    (ps2_io_cmd_width_adapter_src_startofpacket),   //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (51),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (60),
		.IN_PKT_BYTE_CNT_L             (58),
		.IN_PKT_TRANS_COMPRESSED_READ  (52),
		.IN_PKT_TRANS_WRITE            (54),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (61),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (90),
		.IN_PKT_RESPONSE_STATUS_L      (89),
		.IN_PKT_TRANS_EXCLUSIVE        (57),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (91),
		.IN_PKT_ORI_BURST_SIZE_H       (93),
		.IN_ST_DATA_W                  (94),
		.OUT_PKT_ADDR_H                (24),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (33),
		.OUT_PKT_BYTE_CNT_L            (31),
		.OUT_PKT_TRANS_COMPRESSED_READ (25),
		.OUT_PKT_BURST_SIZE_H          (37),
		.OUT_PKT_BURST_SIZE_L          (35),
		.OUT_PKT_RESPONSE_STATUS_H     (63),
		.OUT_PKT_RESPONSE_STATUS_L     (62),
		.OUT_PKT_TRANS_EXCLUSIVE       (30),
		.OUT_PKT_BURST_TYPE_H          (39),
		.OUT_PKT_BURST_TYPE_L          (38),
		.OUT_PKT_ORI_BURST_SIZE_L      (64),
		.OUT_PKT_ORI_BURST_SIZE_H      (66),
		.OUT_ST_DATA_W                 (67),
		.ST_CHANNEL_W                  (20),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) hddext_0x370_io_cmd_width_adapter (
		.clk                  (pll_0_outclk0_clk),                                   //       clk.clk
		.reset                (sound_reset_sink_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_valid             (cmd_mux_009_src_valid),                               //      sink.valid
		.in_channel           (cmd_mux_009_src_channel),                             //          .channel
		.in_startofpacket     (cmd_mux_009_src_startofpacket),                       //          .startofpacket
		.in_endofpacket       (cmd_mux_009_src_endofpacket),                         //          .endofpacket
		.in_ready             (cmd_mux_009_src_ready),                               //          .ready
		.in_data              (cmd_mux_009_src_data),                                //          .data
		.out_endofpacket      (hddext_0x370_io_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (hddext_0x370_io_cmd_width_adapter_src_data),          //          .data
		.out_channel          (hddext_0x370_io_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (hddext_0x370_io_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (hddext_0x370_io_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (hddext_0x370_io_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                               // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (51),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (60),
		.IN_PKT_BYTE_CNT_L             (58),
		.IN_PKT_TRANS_COMPRESSED_READ  (52),
		.IN_PKT_TRANS_WRITE            (54),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (61),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (90),
		.IN_PKT_RESPONSE_STATUS_L      (89),
		.IN_PKT_TRANS_EXCLUSIVE        (57),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (91),
		.IN_PKT_ORI_BURST_SIZE_H       (93),
		.IN_ST_DATA_W                  (94),
		.OUT_PKT_ADDR_H                (24),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (33),
		.OUT_PKT_BYTE_CNT_L            (31),
		.OUT_PKT_TRANS_COMPRESSED_READ (25),
		.OUT_PKT_BURST_SIZE_H          (37),
		.OUT_PKT_BURST_SIZE_L          (35),
		.OUT_PKT_RESPONSE_STATUS_H     (63),
		.OUT_PKT_RESPONSE_STATUS_L     (62),
		.OUT_PKT_TRANS_EXCLUSIVE       (30),
		.OUT_PKT_BURST_TYPE_H          (39),
		.OUT_PKT_BURST_TYPE_L          (38),
		.OUT_PKT_ORI_BURST_SIZE_L      (64),
		.OUT_PKT_ORI_BURST_SIZE_H      (66),
		.OUT_ST_DATA_W                 (67),
		.ST_CHANNEL_W                  (20),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) vga_io_b_cmd_width_adapter (
		.clk                  (pll_0_outclk0_clk),                            //       clk.clk
		.reset                (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_010_src_valid),                        //      sink.valid
		.in_channel           (cmd_mux_010_src_channel),                      //          .channel
		.in_startofpacket     (cmd_mux_010_src_startofpacket),                //          .startofpacket
		.in_endofpacket       (cmd_mux_010_src_endofpacket),                  //          .endofpacket
		.in_ready             (cmd_mux_010_src_ready),                        //          .ready
		.in_data              (cmd_mux_010_src_data),                         //          .data
		.out_endofpacket      (vga_io_b_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (vga_io_b_cmd_width_adapter_src_data),          //          .data
		.out_channel          (vga_io_b_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (vga_io_b_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (vga_io_b_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (vga_io_b_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (51),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (60),
		.IN_PKT_BYTE_CNT_L             (58),
		.IN_PKT_TRANS_COMPRESSED_READ  (52),
		.IN_PKT_TRANS_WRITE            (54),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (61),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (90),
		.IN_PKT_RESPONSE_STATUS_L      (89),
		.IN_PKT_TRANS_EXCLUSIVE        (57),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (91),
		.IN_PKT_ORI_BURST_SIZE_H       (93),
		.IN_ST_DATA_W                  (94),
		.OUT_PKT_ADDR_H                (24),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (33),
		.OUT_PKT_BYTE_CNT_L            (31),
		.OUT_PKT_TRANS_COMPRESSED_READ (25),
		.OUT_PKT_BURST_SIZE_H          (37),
		.OUT_PKT_BURST_SIZE_L          (35),
		.OUT_PKT_RESPONSE_STATUS_H     (63),
		.OUT_PKT_RESPONSE_STATUS_L     (62),
		.OUT_PKT_TRANS_EXCLUSIVE       (30),
		.OUT_PKT_BURST_TYPE_H          (39),
		.OUT_PKT_BURST_TYPE_L          (38),
		.OUT_PKT_ORI_BURST_SIZE_L      (64),
		.OUT_PKT_ORI_BURST_SIZE_H      (66),
		.OUT_ST_DATA_W                 (67),
		.ST_CHANNEL_W                  (20),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) vga_io_c_cmd_width_adapter (
		.clk                  (pll_0_outclk0_clk),                            //       clk.clk
		.reset                (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_011_src_valid),                        //      sink.valid
		.in_channel           (cmd_mux_011_src_channel),                      //          .channel
		.in_startofpacket     (cmd_mux_011_src_startofpacket),                //          .startofpacket
		.in_endofpacket       (cmd_mux_011_src_endofpacket),                  //          .endofpacket
		.in_ready             (cmd_mux_011_src_ready),                        //          .ready
		.in_data              (cmd_mux_011_src_data),                         //          .data
		.out_endofpacket      (vga_io_c_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (vga_io_c_cmd_width_adapter_src_data),          //          .data
		.out_channel          (vga_io_c_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (vga_io_c_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (vga_io_c_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (vga_io_c_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (51),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (60),
		.IN_PKT_BYTE_CNT_L             (58),
		.IN_PKT_TRANS_COMPRESSED_READ  (52),
		.IN_PKT_TRANS_WRITE            (54),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (61),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (90),
		.IN_PKT_RESPONSE_STATUS_L      (89),
		.IN_PKT_TRANS_EXCLUSIVE        (57),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (91),
		.IN_PKT_ORI_BURST_SIZE_H       (93),
		.IN_ST_DATA_W                  (94),
		.OUT_PKT_ADDR_H                (24),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (33),
		.OUT_PKT_BYTE_CNT_L            (31),
		.OUT_PKT_TRANS_COMPRESSED_READ (25),
		.OUT_PKT_BURST_SIZE_H          (37),
		.OUT_PKT_BURST_SIZE_L          (35),
		.OUT_PKT_RESPONSE_STATUS_H     (63),
		.OUT_PKT_RESPONSE_STATUS_L     (62),
		.OUT_PKT_TRANS_EXCLUSIVE       (30),
		.OUT_PKT_BURST_TYPE_H          (39),
		.OUT_PKT_BURST_TYPE_L          (38),
		.OUT_PKT_ORI_BURST_SIZE_L      (64),
		.OUT_PKT_ORI_BURST_SIZE_H      (66),
		.OUT_ST_DATA_W                 (67),
		.ST_CHANNEL_W                  (20),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) vga_io_d_cmd_width_adapter (
		.clk                  (pll_0_outclk0_clk),                            //       clk.clk
		.reset                (sound_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_012_src_valid),                        //      sink.valid
		.in_channel           (cmd_mux_012_src_channel),                      //          .channel
		.in_startofpacket     (cmd_mux_012_src_startofpacket),                //          .startofpacket
		.in_endofpacket       (cmd_mux_012_src_endofpacket),                  //          .endofpacket
		.in_ready             (cmd_mux_012_src_ready),                        //          .ready
		.in_data              (cmd_mux_012_src_data),                         //          .data
		.out_endofpacket      (vga_io_d_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (vga_io_d_cmd_width_adapter_src_data),          //          .data
		.out_channel          (vga_io_d_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (vga_io_d_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (vga_io_d_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (vga_io_d_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                        // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (51),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (60),
		.IN_PKT_BYTE_CNT_L             (58),
		.IN_PKT_TRANS_COMPRESSED_READ  (52),
		.IN_PKT_TRANS_WRITE            (54),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (61),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (90),
		.IN_PKT_RESPONSE_STATUS_L      (89),
		.IN_PKT_TRANS_EXCLUSIVE        (57),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (91),
		.IN_PKT_ORI_BURST_SIZE_H       (93),
		.IN_ST_DATA_W                  (94),
		.OUT_PKT_ADDR_H                (24),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (33),
		.OUT_PKT_BYTE_CNT_L            (31),
		.OUT_PKT_TRANS_COMPRESSED_READ (25),
		.OUT_PKT_BURST_SIZE_H          (37),
		.OUT_PKT_BURST_SIZE_L          (35),
		.OUT_PKT_RESPONSE_STATUS_H     (63),
		.OUT_PKT_RESPONSE_STATUS_L     (62),
		.OUT_PKT_TRANS_EXCLUSIVE       (30),
		.OUT_PKT_BURST_TYPE_H          (39),
		.OUT_PKT_BURST_TYPE_L          (38),
		.OUT_PKT_ORI_BURST_SIZE_L      (64),
		.OUT_PKT_ORI_BURST_SIZE_H      (66),
		.OUT_ST_DATA_W                 (67),
		.ST_CHANNEL_W                  (20),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pc_dma_master_cmd_width_adapter (
		.clk                  (pll_0_outclk0_clk),                                 //       clk.clk
		.reset                (sound_reset_sink_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_valid             (cmd_mux_013_src_valid),                             //      sink.valid
		.in_channel           (cmd_mux_013_src_channel),                           //          .channel
		.in_startofpacket     (cmd_mux_013_src_startofpacket),                     //          .startofpacket
		.in_endofpacket       (cmd_mux_013_src_endofpacket),                       //          .endofpacket
		.in_ready             (cmd_mux_013_src_ready),                             //          .ready
		.in_data              (cmd_mux_013_src_data),                              //          .data
		.out_endofpacket      (pc_dma_master_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pc_dma_master_cmd_width_adapter_src_data),          //          .data
		.out_channel          (pc_dma_master_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (pc_dma_master_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (pc_dma_master_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pc_dma_master_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                             // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (51),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (60),
		.IN_PKT_BYTE_CNT_L             (58),
		.IN_PKT_TRANS_COMPRESSED_READ  (52),
		.IN_PKT_TRANS_WRITE            (54),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (61),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (90),
		.IN_PKT_RESPONSE_STATUS_L      (89),
		.IN_PKT_TRANS_EXCLUSIVE        (57),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (91),
		.IN_PKT_ORI_BURST_SIZE_H       (93),
		.IN_ST_DATA_W                  (94),
		.OUT_PKT_ADDR_H                (24),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (33),
		.OUT_PKT_BYTE_CNT_L            (31),
		.OUT_PKT_TRANS_COMPRESSED_READ (25),
		.OUT_PKT_BURST_SIZE_H          (37),
		.OUT_PKT_BURST_SIZE_L          (35),
		.OUT_PKT_RESPONSE_STATUS_H     (63),
		.OUT_PKT_RESPONSE_STATUS_L     (62),
		.OUT_PKT_TRANS_EXCLUSIVE       (30),
		.OUT_PKT_BURST_TYPE_H          (39),
		.OUT_PKT_BURST_TYPE_L          (38),
		.OUT_PKT_ORI_BURST_SIZE_L      (64),
		.OUT_PKT_ORI_BURST_SIZE_H      (66),
		.OUT_ST_DATA_W                 (67),
		.ST_CHANNEL_W                  (20),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pic_master_cmd_width_adapter (
		.clk                  (pll_0_outclk0_clk),                              //       clk.clk
		.reset                (sound_reset_sink_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (cmd_mux_014_src_valid),                          //      sink.valid
		.in_channel           (cmd_mux_014_src_channel),                        //          .channel
		.in_startofpacket     (cmd_mux_014_src_startofpacket),                  //          .startofpacket
		.in_endofpacket       (cmd_mux_014_src_endofpacket),                    //          .endofpacket
		.in_ready             (cmd_mux_014_src_ready),                          //          .ready
		.in_data              (cmd_mux_014_src_data),                           //          .data
		.out_endofpacket      (pic_master_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pic_master_cmd_width_adapter_src_data),          //          .data
		.out_channel          (pic_master_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (pic_master_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (pic_master_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pic_master_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (51),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (60),
		.IN_PKT_BYTE_CNT_L             (58),
		.IN_PKT_TRANS_COMPRESSED_READ  (52),
		.IN_PKT_TRANS_WRITE            (54),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (61),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (90),
		.IN_PKT_RESPONSE_STATUS_L      (89),
		.IN_PKT_TRANS_EXCLUSIVE        (57),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (91),
		.IN_PKT_ORI_BURST_SIZE_H       (93),
		.IN_ST_DATA_W                  (94),
		.OUT_PKT_ADDR_H                (24),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (33),
		.OUT_PKT_BYTE_CNT_L            (31),
		.OUT_PKT_TRANS_COMPRESSED_READ (25),
		.OUT_PKT_BURST_SIZE_H          (37),
		.OUT_PKT_BURST_SIZE_L          (35),
		.OUT_PKT_RESPONSE_STATUS_H     (63),
		.OUT_PKT_RESPONSE_STATUS_L     (62),
		.OUT_PKT_TRANS_EXCLUSIVE       (30),
		.OUT_PKT_BURST_TYPE_H          (39),
		.OUT_PKT_BURST_TYPE_L          (38),
		.OUT_PKT_ORI_BURST_SIZE_L      (64),
		.OUT_PKT_ORI_BURST_SIZE_H      (66),
		.OUT_ST_DATA_W                 (67),
		.ST_CHANNEL_W                  (20),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) sound_mpu_cmd_width_adapter (
		.clk                  (pll_0_outclk0_clk),                             //       clk.clk
		.reset                (sound_reset_sink_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_valid             (cmd_mux_015_src_valid),                         //      sink.valid
		.in_channel           (cmd_mux_015_src_channel),                       //          .channel
		.in_startofpacket     (cmd_mux_015_src_startofpacket),                 //          .startofpacket
		.in_endofpacket       (cmd_mux_015_src_endofpacket),                   //          .endofpacket
		.in_ready             (cmd_mux_015_src_ready),                         //          .ready
		.in_data              (cmd_mux_015_src_data),                          //          .data
		.out_endofpacket      (sound_mpu_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (sound_mpu_cmd_width_adapter_src_data),          //          .data
		.out_channel          (sound_mpu_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (sound_mpu_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (sound_mpu_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (sound_mpu_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (51),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (60),
		.IN_PKT_BYTE_CNT_L             (58),
		.IN_PKT_TRANS_COMPRESSED_READ  (52),
		.IN_PKT_TRANS_WRITE            (54),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (61),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (90),
		.IN_PKT_RESPONSE_STATUS_L      (89),
		.IN_PKT_TRANS_EXCLUSIVE        (57),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (91),
		.IN_PKT_ORI_BURST_SIZE_H       (93),
		.IN_ST_DATA_W                  (94),
		.OUT_PKT_ADDR_H                (24),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (33),
		.OUT_PKT_BYTE_CNT_L            (31),
		.OUT_PKT_TRANS_COMPRESSED_READ (25),
		.OUT_PKT_BURST_SIZE_H          (37),
		.OUT_PKT_BURST_SIZE_L          (35),
		.OUT_PKT_RESPONSE_STATUS_H     (63),
		.OUT_PKT_RESPONSE_STATUS_L     (62),
		.OUT_PKT_TRANS_EXCLUSIVE       (30),
		.OUT_PKT_BURST_TYPE_H          (39),
		.OUT_PKT_BURST_TYPE_L          (38),
		.OUT_PKT_ORI_BURST_SIZE_L      (64),
		.OUT_PKT_ORI_BURST_SIZE_H      (66),
		.OUT_ST_DATA_W                 (67),
		.ST_CHANNEL_W                  (20),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pc_dma_page_cmd_width_adapter (
		.clk                  (pll_0_outclk0_clk),                               //       clk.clk
		.reset                (sound_reset_sink_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_valid             (cmd_mux_016_src_valid),                           //      sink.valid
		.in_channel           (cmd_mux_016_src_channel),                         //          .channel
		.in_startofpacket     (cmd_mux_016_src_startofpacket),                   //          .startofpacket
		.in_endofpacket       (cmd_mux_016_src_endofpacket),                     //          .endofpacket
		.in_ready             (cmd_mux_016_src_ready),                           //          .ready
		.in_data              (cmd_mux_016_src_data),                            //          .data
		.out_endofpacket      (pc_dma_page_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pc_dma_page_cmd_width_adapter_src_data),          //          .data
		.out_channel          (pc_dma_page_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (pc_dma_page_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (pc_dma_page_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pc_dma_page_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                           // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (51),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (60),
		.IN_PKT_BYTE_CNT_L             (58),
		.IN_PKT_TRANS_COMPRESSED_READ  (52),
		.IN_PKT_TRANS_WRITE            (54),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (61),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (90),
		.IN_PKT_RESPONSE_STATUS_L      (89),
		.IN_PKT_TRANS_EXCLUSIVE        (57),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (91),
		.IN_PKT_ORI_BURST_SIZE_H       (93),
		.IN_ST_DATA_W                  (94),
		.OUT_PKT_ADDR_H                (24),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (33),
		.OUT_PKT_BYTE_CNT_L            (31),
		.OUT_PKT_TRANS_COMPRESSED_READ (25),
		.OUT_PKT_BURST_SIZE_H          (37),
		.OUT_PKT_BURST_SIZE_L          (35),
		.OUT_PKT_RESPONSE_STATUS_H     (63),
		.OUT_PKT_RESPONSE_STATUS_L     (62),
		.OUT_PKT_TRANS_EXCLUSIVE       (30),
		.OUT_PKT_BURST_TYPE_H          (39),
		.OUT_PKT_BURST_TYPE_L          (38),
		.OUT_PKT_ORI_BURST_SIZE_L      (64),
		.OUT_PKT_ORI_BURST_SIZE_H      (66),
		.OUT_ST_DATA_W                 (67),
		.ST_CHANNEL_W                  (20),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pc_dma_slave_cmd_width_adapter (
		.clk                  (pll_0_outclk0_clk),                                //       clk.clk
		.reset                (sound_reset_sink_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_valid             (cmd_mux_017_src_valid),                            //      sink.valid
		.in_channel           (cmd_mux_017_src_channel),                          //          .channel
		.in_startofpacket     (cmd_mux_017_src_startofpacket),                    //          .startofpacket
		.in_endofpacket       (cmd_mux_017_src_endofpacket),                      //          .endofpacket
		.in_ready             (cmd_mux_017_src_ready),                            //          .ready
		.in_data              (cmd_mux_017_src_data),                             //          .data
		.out_endofpacket      (pc_dma_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pc_dma_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (pc_dma_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (pc_dma_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (pc_dma_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pc_dma_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (51),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (60),
		.IN_PKT_BYTE_CNT_L             (58),
		.IN_PKT_TRANS_COMPRESSED_READ  (52),
		.IN_PKT_TRANS_WRITE            (54),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (61),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (90),
		.IN_PKT_RESPONSE_STATUS_L      (89),
		.IN_PKT_TRANS_EXCLUSIVE        (57),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (91),
		.IN_PKT_ORI_BURST_SIZE_H       (93),
		.IN_ST_DATA_W                  (94),
		.OUT_PKT_ADDR_H                (24),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (33),
		.OUT_PKT_BYTE_CNT_L            (31),
		.OUT_PKT_TRANS_COMPRESSED_READ (25),
		.OUT_PKT_BURST_SIZE_H          (37),
		.OUT_PKT_BURST_SIZE_L          (35),
		.OUT_PKT_RESPONSE_STATUS_H     (63),
		.OUT_PKT_RESPONSE_STATUS_L     (62),
		.OUT_PKT_TRANS_EXCLUSIVE       (30),
		.OUT_PKT_BURST_TYPE_H          (39),
		.OUT_PKT_BURST_TYPE_L          (38),
		.OUT_PKT_ORI_BURST_SIZE_L      (64),
		.OUT_PKT_ORI_BURST_SIZE_H      (66),
		.OUT_ST_DATA_W                 (67),
		.ST_CHANNEL_W                  (20),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pic_slave_cmd_width_adapter (
		.clk                  (pll_0_outclk0_clk),                             //       clk.clk
		.reset                (sound_reset_sink_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_valid             (cmd_mux_018_src_valid),                         //      sink.valid
		.in_channel           (cmd_mux_018_src_channel),                       //          .channel
		.in_startofpacket     (cmd_mux_018_src_startofpacket),                 //          .startofpacket
		.in_endofpacket       (cmd_mux_018_src_endofpacket),                   //          .endofpacket
		.in_ready             (cmd_mux_018_src_ready),                         //          .ready
		.in_data              (cmd_mux_018_src_data),                          //          .data
		.out_endofpacket      (pic_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pic_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (pic_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (pic_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (pic_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pic_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (51),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (60),
		.IN_PKT_BYTE_CNT_L             (58),
		.IN_PKT_TRANS_COMPRESSED_READ  (52),
		.IN_PKT_TRANS_WRITE            (54),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (61),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (90),
		.IN_PKT_RESPONSE_STATUS_L      (89),
		.IN_PKT_TRANS_EXCLUSIVE        (57),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (91),
		.IN_PKT_ORI_BURST_SIZE_H       (93),
		.IN_ST_DATA_W                  (94),
		.OUT_PKT_ADDR_H                (24),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (33),
		.OUT_PKT_BYTE_CNT_L            (31),
		.OUT_PKT_TRANS_COMPRESSED_READ (25),
		.OUT_PKT_BURST_SIZE_H          (37),
		.OUT_PKT_BURST_SIZE_L          (35),
		.OUT_PKT_RESPONSE_STATUS_H     (63),
		.OUT_PKT_RESPONSE_STATUS_L     (62),
		.OUT_PKT_TRANS_EXCLUSIVE       (30),
		.OUT_PKT_BURST_TYPE_H          (39),
		.OUT_PKT_BURST_TYPE_L          (38),
		.OUT_PKT_ORI_BURST_SIZE_L      (64),
		.OUT_PKT_ORI_BURST_SIZE_H      (66),
		.OUT_ST_DATA_W                 (67),
		.ST_CHANNEL_W                  (20),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) ps2_sysctl_cmd_width_adapter (
		.clk                  (pll_0_outclk0_clk),                              //       clk.clk
		.reset                (sound_reset_sink_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_valid             (cmd_mux_019_src_valid),                          //      sink.valid
		.in_channel           (cmd_mux_019_src_channel),                        //          .channel
		.in_startofpacket     (cmd_mux_019_src_startofpacket),                  //          .startofpacket
		.in_endofpacket       (cmd_mux_019_src_endofpacket),                    //          .endofpacket
		.in_ready             (cmd_mux_019_src_ready),                          //          .ready
		.in_data              (cmd_mux_019_src_data),                           //          .data
		.out_endofpacket      (ps2_sysctl_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (ps2_sysctl_cmd_width_adapter_src_data),          //          .data
		.out_channel          (ps2_sysctl_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (ps2_sysctl_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (ps2_sysctl_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (ps2_sysctl_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                          // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (94),
		.BITS_PER_SYMBOL     (94),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (20),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (pll_0_outclk0_clk),                             //        in_clk.clk
		.in_reset          (ao486_reset_sink_reset_bridge_in_reset_reset),  //  in_clk_reset.reset
		.out_clk           (pll_0_outclk2_clk),                             //       out_clk.clk
		.out_reset         (width_trans_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src1_ready),                          //            in.ready
		.in_valid          (cmd_demux_src1_valid),                          //              .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                  //              .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                    //              .endofpacket
		.in_channel        (cmd_demux_src1_channel),                        //              .channel
		.in_data           (cmd_demux_src1_data),                           //              .data
		.out_ready         (crosser_out_ready),                             //           out.ready
		.out_valid         (crosser_out_valid),                             //              .valid
		.out_startofpacket (crosser_out_startofpacket),                     //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                       //              .endofpacket
		.out_channel       (crosser_out_channel),                           //              .channel
		.out_data          (crosser_out_data),                              //              .data
		.in_empty          (1'b0),                                          //   (terminated)
		.in_error          (1'b0),                                          //   (terminated)
		.out_empty         (),                                              //   (terminated)
		.out_error         ()                                               //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (94),
		.BITS_PER_SYMBOL     (94),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (20),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (pll_0_outclk2_clk),                             //        in_clk.clk
		.in_reset          (width_trans_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (pll_0_outclk0_clk),                             //       out_clk.clk
		.out_reset         (ao486_reset_sink_reset_bridge_in_reset_reset),  // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                      //            in.ready
		.in_valid          (rsp_demux_001_src0_valid),                      //              .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),              //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                //              .endofpacket
		.in_channel        (rsp_demux_001_src0_channel),                    //              .channel
		.in_data           (rsp_demux_001_src0_data),                       //              .data
		.out_ready         (crosser_001_out_ready),                         //           out.ready
		.out_valid         (crosser_001_out_valid),                         //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                 //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                   //              .endofpacket
		.out_channel       (crosser_001_out_channel),                       //              .channel
		.out_data          (crosser_001_out_data),                          //              .data
		.in_empty          (1'b0),                                          //   (terminated)
		.in_error          (1'b0),                                          //   (terminated)
		.out_empty         (),                                              //   (terminated)
		.out_error         ()                                               //   (terminated)
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (pll_0_outclk0_clk),                            // in_clk_0.clk
		.in_rst_0_reset (sound_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sound_fm_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (sound_fm_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (sound_fm_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                 //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (pll_0_outclk2_clk),                             // in_clk_0.clk
		.in_rst_0_reset (width_trans_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (width_trans_in_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (width_trans_in_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (width_trans_in_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),              //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),             //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),             //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)              //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                            // in_clk_0.clk
		.in_rst_0_reset (sound_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sound_io_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (sound_io_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (sound_io_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)             //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                            // in_clk_0.clk
		.in_rst_0_reset (sound_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (rtc_io_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (rtc_io_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (rtc_io_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)             //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                            // in_clk_0.clk
		.in_rst_0_reset (sound_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pit_io_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (pit_io_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (pit_io_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)             //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_005 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                            // in_clk_0.clk
		.in_rst_0_reset (sound_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hdd0_io_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (hdd0_io_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (hdd0_io_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)             //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                            // in_clk_0.clk
		.in_rst_0_reset (sound_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (floppy0_io_agent_rdata_fifo_src_data),         //     in_0.data
		.in_0_valid     (floppy0_io_agent_rdata_fifo_src_valid),        //         .valid
		.in_0_ready     (floppy0_io_agent_rdata_fifo_src_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)             //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                            // in_clk_0.clk
		.in_rst_0_reset (sound_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ps2_io_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (ps2_io_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (ps2_io_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)             //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_005 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                            // in_clk_0.clk
		.in_rst_0_reset (sound_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hdd1_io_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (hdd1_io_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (hdd1_io_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)             //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                            // in_clk_0.clk
		.in_rst_0_reset (sound_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hddext_0x370_io_agent_rdata_fifo_src_data),    //     in_0.data
		.in_0_valid     (hddext_0x370_io_agent_rdata_fifo_src_valid),   //         .valid
		.in_0_ready     (hddext_0x370_io_agent_rdata_fifo_src_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)             //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                            // in_clk_0.clk
		.in_rst_0_reset (sound_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (vga_io_b_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (vga_io_b_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (vga_io_b_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)             //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                            // in_clk_0.clk
		.in_rst_0_reset (sound_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (vga_io_c_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (vga_io_c_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (vga_io_c_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)             //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                            // in_clk_0.clk
		.in_rst_0_reset (sound_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (vga_io_d_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (vga_io_d_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (vga_io_d_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)             //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                            // in_clk_0.clk
		.in_rst_0_reset (sound_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pc_dma_master_agent_rdata_fifo_src_data),      //     in_0.data
		.in_0_valid     (pc_dma_master_agent_rdata_fifo_src_valid),     //         .valid
		.in_0_ready     (pc_dma_master_agent_rdata_fifo_src_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)             //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                            // in_clk_0.clk
		.in_rst_0_reset (sound_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pic_master_agent_rdata_fifo_src_data),         //     in_0.data
		.in_0_valid     (pic_master_agent_rdata_fifo_src_valid),        //         .valid
		.in_0_ready     (pic_master_agent_rdata_fifo_src_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)             //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                            // in_clk_0.clk
		.in_rst_0_reset (sound_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sound_mpu_agent_rdata_fifo_src_data),          //     in_0.data
		.in_0_valid     (sound_mpu_agent_rdata_fifo_src_valid),         //         .valid
		.in_0_ready     (sound_mpu_agent_rdata_fifo_src_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)             //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_016 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                            // in_clk_0.clk
		.in_rst_0_reset (sound_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pc_dma_page_agent_rdata_fifo_src_data),        //     in_0.data
		.in_0_valid     (pc_dma_page_agent_rdata_fifo_src_valid),       //         .valid
		.in_0_ready     (pc_dma_page_agent_rdata_fifo_src_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_016_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_016_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_016_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_016_out_0_error)             //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_017 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                            // in_clk_0.clk
		.in_rst_0_reset (sound_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pc_dma_slave_agent_rdata_fifo_src_data),       //     in_0.data
		.in_0_valid     (pc_dma_slave_agent_rdata_fifo_src_valid),      //         .valid
		.in_0_ready     (pc_dma_slave_agent_rdata_fifo_src_ready),      //         .ready
		.out_0_data     (avalon_st_adapter_017_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_017_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_017_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_017_out_0_error)             //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_018 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                            // in_clk_0.clk
		.in_rst_0_reset (sound_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pic_slave_agent_rdata_fifo_src_data),          //     in_0.data
		.in_0_valid     (pic_slave_agent_rdata_fifo_src_valid),         //         .valid
		.in_0_ready     (pic_slave_agent_rdata_fifo_src_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_018_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_018_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_018_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_018_out_0_error)             //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_019 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                            // in_clk_0.clk
		.in_rst_0_reset (sound_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (ps2_sysctl_agent_rdata_fifo_src_data),         //     in_0.data
		.in_0_valid     (ps2_sysctl_agent_rdata_fifo_src_valid),        //         .valid
		.in_0_ready     (ps2_sysctl_agent_rdata_fifo_src_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_019_out_0_data),             //    out_0.data
		.out_0_valid    (avalon_st_adapter_019_out_0_valid),            //         .valid
		.out_0_ready    (avalon_st_adapter_019_out_0_ready),            //         .ready
		.out_0_error    (avalon_st_adapter_019_out_0_error)             //         .error
	);

endmodule
