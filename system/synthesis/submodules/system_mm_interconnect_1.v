// system_mm_interconnect_1.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 17.0 595

`timescale 1 ps / 1 ps
module system_mm_interconnect_1 (
		input  wire        pll_0_outclk0_clk,                                  //                            pll_0_outclk0.clk
		input  wire        floppy0_reset_sink_reset_bridge_in_reset_reset,     // floppy0_reset_sink_reset_bridge_in_reset.reset
		input  wire [31:0] floppy0_avalon_master_address,                      //                    floppy0_avalon_master.address
		output wire        floppy0_avalon_master_waitrequest,                  //                                         .waitrequest
		input  wire        floppy0_avalon_master_read,                         //                                         .read
		output wire [31:0] floppy0_avalon_master_readdata,                     //                                         .readdata
		output wire        floppy0_avalon_master_readdatavalid,                //                                         .readdatavalid
		input  wire        floppy0_avalon_master_write,                        //                                         .write
		input  wire [31:0] floppy0_avalon_master_writedata,                    //                                         .writedata
		input  wire [31:0] hdd0_avalon_master_address,                         //                       hdd0_avalon_master.address
		output wire        hdd0_avalon_master_waitrequest,                     //                                         .waitrequest
		input  wire        hdd0_avalon_master_read,                            //                                         .read
		output wire [31:0] hdd0_avalon_master_readdata,                        //                                         .readdata
		output wire        hdd0_avalon_master_readdatavalid,                   //                                         .readdatavalid
		input  wire        hdd0_avalon_master_write,                           //                                         .write
		input  wire [31:0] hdd0_avalon_master_writedata,                       //                                         .writedata
		input  wire [31:0] hdd1_avalon_master_address,                         //                       hdd1_avalon_master.address
		output wire        hdd1_avalon_master_waitrequest,                     //                                         .waitrequest
		input  wire        hdd1_avalon_master_read,                            //                                         .read
		output wire [31:0] hdd1_avalon_master_readdata,                        //                                         .readdata
		output wire        hdd1_avalon_master_readdatavalid,                   //                                         .readdatavalid
		input  wire        hdd1_avalon_master_write,                           //                                         .write
		input  wire [31:0] hdd1_avalon_master_writedata,                       //                                         .writedata
		input  wire [31:0] mm_bridge_m0_address,                               //                             mm_bridge_m0.address
		output wire        mm_bridge_m0_waitrequest,                           //                                         .waitrequest
		input  wire [0:0]  mm_bridge_m0_burstcount,                            //                                         .burstcount
		input  wire [3:0]  mm_bridge_m0_byteenable,                            //                                         .byteenable
		input  wire        mm_bridge_m0_read,                                  //                                         .read
		output wire [31:0] mm_bridge_m0_readdata,                              //                                         .readdata
		output wire        mm_bridge_m0_readdatavalid,                         //                                         .readdatavalid
		input  wire        mm_bridge_m0_write,                                 //                                         .write
		input  wire [31:0] mm_bridge_m0_writedata,                             //                                         .writedata
		input  wire        mm_bridge_m0_debugaccess,                           //                                         .debugaccess
		input  wire [31:0] pc_bus_avalon_sdram_master_address,                 //               pc_bus_avalon_sdram_master.address
		output wire        pc_bus_avalon_sdram_master_waitrequest,             //                                         .waitrequest
		input  wire [2:0]  pc_bus_avalon_sdram_master_burstcount,              //                                         .burstcount
		input  wire [3:0]  pc_bus_avalon_sdram_master_byteenable,              //                                         .byteenable
		input  wire        pc_bus_avalon_sdram_master_read,                    //                                         .read
		output wire [31:0] pc_bus_avalon_sdram_master_readdata,                //                                         .readdata
		output wire        pc_bus_avalon_sdram_master_readdatavalid,           //                                         .readdatavalid
		input  wire        pc_bus_avalon_sdram_master_write,                   //                                         .write
		input  wire [31:0] pc_bus_avalon_sdram_master_writedata,               //                                         .writedata
		input  wire [31:0] pc_dma_avalon_master_address,                       //                     pc_dma_avalon_master.address
		output wire        pc_dma_avalon_master_waitrequest,                   //                                         .waitrequest
		input  wire        pc_dma_avalon_master_read,                          //                                         .read
		output wire [7:0]  pc_dma_avalon_master_readdata,                      //                                         .readdata
		output wire        pc_dma_avalon_master_readdatavalid,                 //                                         .readdatavalid
		input  wire        pc_dma_avalon_master_write,                         //                                         .write
		input  wire [7:0]  pc_dma_avalon_master_writedata,                     //                                         .writedata
		output wire [23:0] address_span_extender_windowed_slave_address,       //     address_span_extender_windowed_slave.address
		output wire        address_span_extender_windowed_slave_write,         //                                         .write
		output wire        address_span_extender_windowed_slave_read,          //                                         .read
		input  wire [63:0] address_span_extender_windowed_slave_readdata,      //                                         .readdata
		output wire [63:0] address_span_extender_windowed_slave_writedata,     //                                         .writedata
		output wire [7:0]  address_span_extender_windowed_slave_burstcount,    //                                         .burstcount
		output wire [7:0]  address_span_extender_windowed_slave_byteenable,    //                                         .byteenable
		input  wire        address_span_extender_windowed_slave_readdatavalid, //                                         .readdatavalid
		input  wire        address_span_extender_windowed_slave_waitrequest,   //                                         .waitrequest
		output wire [2:0]  driver_sd_avalon_slave_0_address,                   //                 driver_sd_avalon_slave_0.address
		output wire        driver_sd_avalon_slave_0_write,                     //                                         .write
		output wire        driver_sd_avalon_slave_0_read,                      //                                         .read
		input  wire [31:0] driver_sd_avalon_slave_0_readdata,                  //                                         .readdata
		output wire [31:0] driver_sd_avalon_slave_0_writedata,                 //                                         .writedata
		output wire [3:0]  floppy0_mgmt_address,                               //                             floppy0_mgmt.address
		output wire        floppy0_mgmt_write,                                 //                                         .write
		output wire [31:0] floppy0_mgmt_writedata,                             //                                         .writedata
		output wire [8:0]  floppy0_sd_slave_address,                           //                         floppy0_sd_slave.address
		output wire        floppy0_sd_slave_write,                             //                                         .write
		output wire        floppy0_sd_slave_read,                              //                                         .read
		input  wire [7:0]  floppy0_sd_slave_readdata,                          //                                         .readdata
		output wire [7:0]  floppy0_sd_slave_writedata,                         //                                         .writedata
		output wire [2:0]  hdd0_mgmt_address,                                  //                                hdd0_mgmt.address
		output wire        hdd0_mgmt_write,                                    //                                         .write
		output wire [31:0] hdd0_mgmt_writedata,                                //                                         .writedata
		output wire [8:0]  hdd0_sd_slave_address,                              //                            hdd0_sd_slave.address
		output wire        hdd0_sd_slave_write,                                //                                         .write
		output wire        hdd0_sd_slave_read,                                 //                                         .read
		input  wire [31:0] hdd0_sd_slave_readdata,                             //                                         .readdata
		output wire [31:0] hdd0_sd_slave_writedata,                            //                                         .writedata
		output wire [2:0]  hdd1_mgmt_address,                                  //                                hdd1_mgmt.address
		output wire        hdd1_mgmt_write,                                    //                                         .write
		output wire [31:0] hdd1_mgmt_writedata,                                //                                         .writedata
		output wire [8:0]  hdd1_sd_slave_address,                              //                            hdd1_sd_slave.address
		output wire        hdd1_sd_slave_write,                                //                                         .write
		output wire        hdd1_sd_slave_read,                                 //                                         .read
		input  wire [31:0] hdd1_sd_slave_readdata,                             //                                         .readdata
		output wire [31:0] hdd1_sd_slave_writedata,                            //                                         .writedata
		output wire [1:0]  pc_bus_ctrl_address,                                //                              pc_bus_ctrl.address
		output wire        pc_bus_ctrl_write,                                  //                                         .write
		output wire [31:0] pc_bus_ctrl_writedata,                              //                                         .writedata
		output wire [0:0]  pit_mgmt_address,                                   //                                 pit_mgmt.address
		output wire        pit_mgmt_write,                                     //                                         .write
		output wire [31:0] pit_mgmt_writedata,                                 //                                         .writedata
		output wire [7:0]  rtc_mgmt_address,                                   //                                 rtc_mgmt.address
		output wire        rtc_mgmt_write,                                     //                                         .write
		output wire [31:0] rtc_mgmt_writedata,                                 //                                         .writedata
		output wire [8:0]  sound_mgmt_address,                                 //                               sound_mgmt.address
		output wire        sound_mgmt_write,                                   //                                         .write
		output wire [31:0] sound_mgmt_writedata                                //                                         .writedata
	);

	wire          floppy0_avalon_master_translator_avalon_universal_master_0_waitrequest;                                 // floppy0_avalon_master_agent:av_waitrequest -> floppy0_avalon_master_translator:uav_waitrequest
	wire   [31:0] floppy0_avalon_master_translator_avalon_universal_master_0_readdata;                                    // floppy0_avalon_master_agent:av_readdata -> floppy0_avalon_master_translator:uav_readdata
	wire          floppy0_avalon_master_translator_avalon_universal_master_0_debugaccess;                                 // floppy0_avalon_master_translator:uav_debugaccess -> floppy0_avalon_master_agent:av_debugaccess
	wire   [31:0] floppy0_avalon_master_translator_avalon_universal_master_0_address;                                     // floppy0_avalon_master_translator:uav_address -> floppy0_avalon_master_agent:av_address
	wire          floppy0_avalon_master_translator_avalon_universal_master_0_read;                                        // floppy0_avalon_master_translator:uav_read -> floppy0_avalon_master_agent:av_read
	wire    [3:0] floppy0_avalon_master_translator_avalon_universal_master_0_byteenable;                                  // floppy0_avalon_master_translator:uav_byteenable -> floppy0_avalon_master_agent:av_byteenable
	wire          floppy0_avalon_master_translator_avalon_universal_master_0_readdatavalid;                               // floppy0_avalon_master_agent:av_readdatavalid -> floppy0_avalon_master_translator:uav_readdatavalid
	wire          floppy0_avalon_master_translator_avalon_universal_master_0_lock;                                        // floppy0_avalon_master_translator:uav_lock -> floppy0_avalon_master_agent:av_lock
	wire          floppy0_avalon_master_translator_avalon_universal_master_0_write;                                       // floppy0_avalon_master_translator:uav_write -> floppy0_avalon_master_agent:av_write
	wire   [31:0] floppy0_avalon_master_translator_avalon_universal_master_0_writedata;                                   // floppy0_avalon_master_translator:uav_writedata -> floppy0_avalon_master_agent:av_writedata
	wire    [2:0] floppy0_avalon_master_translator_avalon_universal_master_0_burstcount;                                  // floppy0_avalon_master_translator:uav_burstcount -> floppy0_avalon_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                                      // rsp_mux:src_valid -> floppy0_avalon_master_agent:rp_valid
	wire  [115:0] rsp_mux_src_data;                                                                                       // rsp_mux:src_data -> floppy0_avalon_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                                                      // floppy0_avalon_master_agent:rp_ready -> rsp_mux:src_ready
	wire   [11:0] rsp_mux_src_channel;                                                                                    // rsp_mux:src_channel -> floppy0_avalon_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                                              // rsp_mux:src_startofpacket -> floppy0_avalon_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                                // rsp_mux:src_endofpacket -> floppy0_avalon_master_agent:rp_endofpacket
	wire          hdd0_avalon_master_translator_avalon_universal_master_0_waitrequest;                                    // hdd0_avalon_master_agent:av_waitrequest -> hdd0_avalon_master_translator:uav_waitrequest
	wire   [31:0] hdd0_avalon_master_translator_avalon_universal_master_0_readdata;                                       // hdd0_avalon_master_agent:av_readdata -> hdd0_avalon_master_translator:uav_readdata
	wire          hdd0_avalon_master_translator_avalon_universal_master_0_debugaccess;                                    // hdd0_avalon_master_translator:uav_debugaccess -> hdd0_avalon_master_agent:av_debugaccess
	wire   [31:0] hdd0_avalon_master_translator_avalon_universal_master_0_address;                                        // hdd0_avalon_master_translator:uav_address -> hdd0_avalon_master_agent:av_address
	wire          hdd0_avalon_master_translator_avalon_universal_master_0_read;                                           // hdd0_avalon_master_translator:uav_read -> hdd0_avalon_master_agent:av_read
	wire    [3:0] hdd0_avalon_master_translator_avalon_universal_master_0_byteenable;                                     // hdd0_avalon_master_translator:uav_byteenable -> hdd0_avalon_master_agent:av_byteenable
	wire          hdd0_avalon_master_translator_avalon_universal_master_0_readdatavalid;                                  // hdd0_avalon_master_agent:av_readdatavalid -> hdd0_avalon_master_translator:uav_readdatavalid
	wire          hdd0_avalon_master_translator_avalon_universal_master_0_lock;                                           // hdd0_avalon_master_translator:uav_lock -> hdd0_avalon_master_agent:av_lock
	wire          hdd0_avalon_master_translator_avalon_universal_master_0_write;                                          // hdd0_avalon_master_translator:uav_write -> hdd0_avalon_master_agent:av_write
	wire   [31:0] hdd0_avalon_master_translator_avalon_universal_master_0_writedata;                                      // hdd0_avalon_master_translator:uav_writedata -> hdd0_avalon_master_agent:av_writedata
	wire    [2:0] hdd0_avalon_master_translator_avalon_universal_master_0_burstcount;                                     // hdd0_avalon_master_translator:uav_burstcount -> hdd0_avalon_master_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                                                  // rsp_mux_001:src_valid -> hdd0_avalon_master_agent:rp_valid
	wire  [115:0] rsp_mux_001_src_data;                                                                                   // rsp_mux_001:src_data -> hdd0_avalon_master_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                                                  // hdd0_avalon_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire   [11:0] rsp_mux_001_src_channel;                                                                                // rsp_mux_001:src_channel -> hdd0_avalon_master_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                                          // rsp_mux_001:src_startofpacket -> hdd0_avalon_master_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                                            // rsp_mux_001:src_endofpacket -> hdd0_avalon_master_agent:rp_endofpacket
	wire          hdd1_avalon_master_translator_avalon_universal_master_0_waitrequest;                                    // hdd1_avalon_master_agent:av_waitrequest -> hdd1_avalon_master_translator:uav_waitrequest
	wire   [31:0] hdd1_avalon_master_translator_avalon_universal_master_0_readdata;                                       // hdd1_avalon_master_agent:av_readdata -> hdd1_avalon_master_translator:uav_readdata
	wire          hdd1_avalon_master_translator_avalon_universal_master_0_debugaccess;                                    // hdd1_avalon_master_translator:uav_debugaccess -> hdd1_avalon_master_agent:av_debugaccess
	wire   [31:0] hdd1_avalon_master_translator_avalon_universal_master_0_address;                                        // hdd1_avalon_master_translator:uav_address -> hdd1_avalon_master_agent:av_address
	wire          hdd1_avalon_master_translator_avalon_universal_master_0_read;                                           // hdd1_avalon_master_translator:uav_read -> hdd1_avalon_master_agent:av_read
	wire    [3:0] hdd1_avalon_master_translator_avalon_universal_master_0_byteenable;                                     // hdd1_avalon_master_translator:uav_byteenable -> hdd1_avalon_master_agent:av_byteenable
	wire          hdd1_avalon_master_translator_avalon_universal_master_0_readdatavalid;                                  // hdd1_avalon_master_agent:av_readdatavalid -> hdd1_avalon_master_translator:uav_readdatavalid
	wire          hdd1_avalon_master_translator_avalon_universal_master_0_lock;                                           // hdd1_avalon_master_translator:uav_lock -> hdd1_avalon_master_agent:av_lock
	wire          hdd1_avalon_master_translator_avalon_universal_master_0_write;                                          // hdd1_avalon_master_translator:uav_write -> hdd1_avalon_master_agent:av_write
	wire   [31:0] hdd1_avalon_master_translator_avalon_universal_master_0_writedata;                                      // hdd1_avalon_master_translator:uav_writedata -> hdd1_avalon_master_agent:av_writedata
	wire    [2:0] hdd1_avalon_master_translator_avalon_universal_master_0_burstcount;                                     // hdd1_avalon_master_translator:uav_burstcount -> hdd1_avalon_master_agent:av_burstcount
	wire          rsp_mux_002_src_valid;                                                                                  // rsp_mux_002:src_valid -> hdd1_avalon_master_agent:rp_valid
	wire  [115:0] rsp_mux_002_src_data;                                                                                   // rsp_mux_002:src_data -> hdd1_avalon_master_agent:rp_data
	wire          rsp_mux_002_src_ready;                                                                                  // hdd1_avalon_master_agent:rp_ready -> rsp_mux_002:src_ready
	wire   [11:0] rsp_mux_002_src_channel;                                                                                // rsp_mux_002:src_channel -> hdd1_avalon_master_agent:rp_channel
	wire          rsp_mux_002_src_startofpacket;                                                                          // rsp_mux_002:src_startofpacket -> hdd1_avalon_master_agent:rp_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                                            // rsp_mux_002:src_endofpacket -> hdd1_avalon_master_agent:rp_endofpacket
	wire          mm_bridge_m0_translator_avalon_universal_master_0_waitrequest;                                          // mm_bridge_m0_agent:av_waitrequest -> mm_bridge_m0_translator:uav_waitrequest
	wire   [31:0] mm_bridge_m0_translator_avalon_universal_master_0_readdata;                                             // mm_bridge_m0_agent:av_readdata -> mm_bridge_m0_translator:uav_readdata
	wire          mm_bridge_m0_translator_avalon_universal_master_0_debugaccess;                                          // mm_bridge_m0_translator:uav_debugaccess -> mm_bridge_m0_agent:av_debugaccess
	wire   [31:0] mm_bridge_m0_translator_avalon_universal_master_0_address;                                              // mm_bridge_m0_translator:uav_address -> mm_bridge_m0_agent:av_address
	wire          mm_bridge_m0_translator_avalon_universal_master_0_read;                                                 // mm_bridge_m0_translator:uav_read -> mm_bridge_m0_agent:av_read
	wire    [3:0] mm_bridge_m0_translator_avalon_universal_master_0_byteenable;                                           // mm_bridge_m0_translator:uav_byteenable -> mm_bridge_m0_agent:av_byteenable
	wire          mm_bridge_m0_translator_avalon_universal_master_0_readdatavalid;                                        // mm_bridge_m0_agent:av_readdatavalid -> mm_bridge_m0_translator:uav_readdatavalid
	wire          mm_bridge_m0_translator_avalon_universal_master_0_lock;                                                 // mm_bridge_m0_translator:uav_lock -> mm_bridge_m0_agent:av_lock
	wire          mm_bridge_m0_translator_avalon_universal_master_0_write;                                                // mm_bridge_m0_translator:uav_write -> mm_bridge_m0_agent:av_write
	wire   [31:0] mm_bridge_m0_translator_avalon_universal_master_0_writedata;                                            // mm_bridge_m0_translator:uav_writedata -> mm_bridge_m0_agent:av_writedata
	wire    [2:0] mm_bridge_m0_translator_avalon_universal_master_0_burstcount;                                           // mm_bridge_m0_translator:uav_burstcount -> mm_bridge_m0_agent:av_burstcount
	wire          pc_dma_avalon_master_translator_avalon_universal_master_0_waitrequest;                                  // pc_dma_avalon_master_agent:av_waitrequest -> pc_dma_avalon_master_translator:uav_waitrequest
	wire    [7:0] pc_dma_avalon_master_translator_avalon_universal_master_0_readdata;                                     // pc_dma_avalon_master_agent:av_readdata -> pc_dma_avalon_master_translator:uav_readdata
	wire          pc_dma_avalon_master_translator_avalon_universal_master_0_debugaccess;                                  // pc_dma_avalon_master_translator:uav_debugaccess -> pc_dma_avalon_master_agent:av_debugaccess
	wire   [31:0] pc_dma_avalon_master_translator_avalon_universal_master_0_address;                                      // pc_dma_avalon_master_translator:uav_address -> pc_dma_avalon_master_agent:av_address
	wire          pc_dma_avalon_master_translator_avalon_universal_master_0_read;                                         // pc_dma_avalon_master_translator:uav_read -> pc_dma_avalon_master_agent:av_read
	wire    [0:0] pc_dma_avalon_master_translator_avalon_universal_master_0_byteenable;                                   // pc_dma_avalon_master_translator:uav_byteenable -> pc_dma_avalon_master_agent:av_byteenable
	wire          pc_dma_avalon_master_translator_avalon_universal_master_0_readdatavalid;                                // pc_dma_avalon_master_agent:av_readdatavalid -> pc_dma_avalon_master_translator:uav_readdatavalid
	wire          pc_dma_avalon_master_translator_avalon_universal_master_0_lock;                                         // pc_dma_avalon_master_translator:uav_lock -> pc_dma_avalon_master_agent:av_lock
	wire          pc_dma_avalon_master_translator_avalon_universal_master_0_write;                                        // pc_dma_avalon_master_translator:uav_write -> pc_dma_avalon_master_agent:av_write
	wire    [7:0] pc_dma_avalon_master_translator_avalon_universal_master_0_writedata;                                    // pc_dma_avalon_master_translator:uav_writedata -> pc_dma_avalon_master_agent:av_writedata
	wire    [0:0] pc_dma_avalon_master_translator_avalon_universal_master_0_burstcount;                                   // pc_dma_avalon_master_translator:uav_burstcount -> pc_dma_avalon_master_agent:av_burstcount
	wire          rsp_mux_004_src_valid;                                                                                  // rsp_mux_004:src_valid -> pc_dma_avalon_master_agent:rp_valid
	wire   [88:0] rsp_mux_004_src_data;                                                                                   // rsp_mux_004:src_data -> pc_dma_avalon_master_agent:rp_data
	wire          rsp_mux_004_src_ready;                                                                                  // pc_dma_avalon_master_agent:rp_ready -> rsp_mux_004:src_ready
	wire   [11:0] rsp_mux_004_src_channel;                                                                                // rsp_mux_004:src_channel -> pc_dma_avalon_master_agent:rp_channel
	wire          rsp_mux_004_src_startofpacket;                                                                          // rsp_mux_004:src_startofpacket -> pc_dma_avalon_master_agent:rp_startofpacket
	wire          rsp_mux_004_src_endofpacket;                                                                            // rsp_mux_004:src_endofpacket -> pc_dma_avalon_master_agent:rp_endofpacket
	wire          pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_waitrequest;                            // pc_bus_avalon_sdram_master_agent:av_waitrequest -> pc_bus_avalon_sdram_master_translator:uav_waitrequest
	wire   [31:0] pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_readdata;                               // pc_bus_avalon_sdram_master_agent:av_readdata -> pc_bus_avalon_sdram_master_translator:uav_readdata
	wire          pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_debugaccess;                            // pc_bus_avalon_sdram_master_translator:uav_debugaccess -> pc_bus_avalon_sdram_master_agent:av_debugaccess
	wire   [31:0] pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_address;                                // pc_bus_avalon_sdram_master_translator:uav_address -> pc_bus_avalon_sdram_master_agent:av_address
	wire          pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_read;                                   // pc_bus_avalon_sdram_master_translator:uav_read -> pc_bus_avalon_sdram_master_agent:av_read
	wire    [3:0] pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_byteenable;                             // pc_bus_avalon_sdram_master_translator:uav_byteenable -> pc_bus_avalon_sdram_master_agent:av_byteenable
	wire          pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_readdatavalid;                          // pc_bus_avalon_sdram_master_agent:av_readdatavalid -> pc_bus_avalon_sdram_master_translator:uav_readdatavalid
	wire          pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_lock;                                   // pc_bus_avalon_sdram_master_translator:uav_lock -> pc_bus_avalon_sdram_master_agent:av_lock
	wire          pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_write;                                  // pc_bus_avalon_sdram_master_translator:uav_write -> pc_bus_avalon_sdram_master_agent:av_write
	wire   [31:0] pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_writedata;                              // pc_bus_avalon_sdram_master_translator:uav_writedata -> pc_bus_avalon_sdram_master_agent:av_writedata
	wire    [4:0] pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_burstcount;                             // pc_bus_avalon_sdram_master_translator:uav_burstcount -> pc_bus_avalon_sdram_master_agent:av_burstcount
	wire          rsp_mux_005_src_valid;                                                                                  // rsp_mux_005:src_valid -> pc_bus_avalon_sdram_master_agent:rp_valid
	wire  [115:0] rsp_mux_005_src_data;                                                                                   // rsp_mux_005:src_data -> pc_bus_avalon_sdram_master_agent:rp_data
	wire          rsp_mux_005_src_ready;                                                                                  // pc_bus_avalon_sdram_master_agent:rp_ready -> rsp_mux_005:src_ready
	wire   [11:0] rsp_mux_005_src_channel;                                                                                // rsp_mux_005:src_channel -> pc_bus_avalon_sdram_master_agent:rp_channel
	wire          rsp_mux_005_src_startofpacket;                                                                          // rsp_mux_005:src_startofpacket -> pc_bus_avalon_sdram_master_agent:rp_startofpacket
	wire          rsp_mux_005_src_endofpacket;                                                                            // rsp_mux_005:src_endofpacket -> pc_bus_avalon_sdram_master_agent:rp_endofpacket
	wire   [31:0] driver_sd_avalon_slave_0_agent_m0_readdata;                                                             // driver_sd_avalon_slave_0_translator:uav_readdata -> driver_sd_avalon_slave_0_agent:m0_readdata
	wire          driver_sd_avalon_slave_0_agent_m0_waitrequest;                                                          // driver_sd_avalon_slave_0_translator:uav_waitrequest -> driver_sd_avalon_slave_0_agent:m0_waitrequest
	wire          driver_sd_avalon_slave_0_agent_m0_debugaccess;                                                          // driver_sd_avalon_slave_0_agent:m0_debugaccess -> driver_sd_avalon_slave_0_translator:uav_debugaccess
	wire   [31:0] driver_sd_avalon_slave_0_agent_m0_address;                                                              // driver_sd_avalon_slave_0_agent:m0_address -> driver_sd_avalon_slave_0_translator:uav_address
	wire    [3:0] driver_sd_avalon_slave_0_agent_m0_byteenable;                                                           // driver_sd_avalon_slave_0_agent:m0_byteenable -> driver_sd_avalon_slave_0_translator:uav_byteenable
	wire          driver_sd_avalon_slave_0_agent_m0_read;                                                                 // driver_sd_avalon_slave_0_agent:m0_read -> driver_sd_avalon_slave_0_translator:uav_read
	wire          driver_sd_avalon_slave_0_agent_m0_readdatavalid;                                                        // driver_sd_avalon_slave_0_translator:uav_readdatavalid -> driver_sd_avalon_slave_0_agent:m0_readdatavalid
	wire          driver_sd_avalon_slave_0_agent_m0_lock;                                                                 // driver_sd_avalon_slave_0_agent:m0_lock -> driver_sd_avalon_slave_0_translator:uav_lock
	wire   [31:0] driver_sd_avalon_slave_0_agent_m0_writedata;                                                            // driver_sd_avalon_slave_0_agent:m0_writedata -> driver_sd_avalon_slave_0_translator:uav_writedata
	wire          driver_sd_avalon_slave_0_agent_m0_write;                                                                // driver_sd_avalon_slave_0_agent:m0_write -> driver_sd_avalon_slave_0_translator:uav_write
	wire    [2:0] driver_sd_avalon_slave_0_agent_m0_burstcount;                                                           // driver_sd_avalon_slave_0_agent:m0_burstcount -> driver_sd_avalon_slave_0_translator:uav_burstcount
	wire          driver_sd_avalon_slave_0_agent_rf_source_valid;                                                         // driver_sd_avalon_slave_0_agent:rf_source_valid -> driver_sd_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [116:0] driver_sd_avalon_slave_0_agent_rf_source_data;                                                          // driver_sd_avalon_slave_0_agent:rf_source_data -> driver_sd_avalon_slave_0_agent_rsp_fifo:in_data
	wire          driver_sd_avalon_slave_0_agent_rf_source_ready;                                                         // driver_sd_avalon_slave_0_agent_rsp_fifo:in_ready -> driver_sd_avalon_slave_0_agent:rf_source_ready
	wire          driver_sd_avalon_slave_0_agent_rf_source_startofpacket;                                                 // driver_sd_avalon_slave_0_agent:rf_source_startofpacket -> driver_sd_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          driver_sd_avalon_slave_0_agent_rf_source_endofpacket;                                                   // driver_sd_avalon_slave_0_agent:rf_source_endofpacket -> driver_sd_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          driver_sd_avalon_slave_0_agent_rsp_fifo_out_valid;                                                      // driver_sd_avalon_slave_0_agent_rsp_fifo:out_valid -> driver_sd_avalon_slave_0_agent:rf_sink_valid
	wire  [116:0] driver_sd_avalon_slave_0_agent_rsp_fifo_out_data;                                                       // driver_sd_avalon_slave_0_agent_rsp_fifo:out_data -> driver_sd_avalon_slave_0_agent:rf_sink_data
	wire          driver_sd_avalon_slave_0_agent_rsp_fifo_out_ready;                                                      // driver_sd_avalon_slave_0_agent:rf_sink_ready -> driver_sd_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          driver_sd_avalon_slave_0_agent_rsp_fifo_out_startofpacket;                                              // driver_sd_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> driver_sd_avalon_slave_0_agent:rf_sink_startofpacket
	wire          driver_sd_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                                                // driver_sd_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> driver_sd_avalon_slave_0_agent:rf_sink_endofpacket
	wire          cmd_mux_src_valid;                                                                                      // cmd_mux:src_valid -> driver_sd_avalon_slave_0_agent:cp_valid
	wire  [115:0] cmd_mux_src_data;                                                                                       // cmd_mux:src_data -> driver_sd_avalon_slave_0_agent:cp_data
	wire          cmd_mux_src_ready;                                                                                      // driver_sd_avalon_slave_0_agent:cp_ready -> cmd_mux:src_ready
	wire   [11:0] cmd_mux_src_channel;                                                                                    // cmd_mux:src_channel -> driver_sd_avalon_slave_0_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                                              // cmd_mux:src_startofpacket -> driver_sd_avalon_slave_0_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                                // cmd_mux:src_endofpacket -> driver_sd_avalon_slave_0_agent:cp_endofpacket
	wire   [31:0] pc_bus_ctrl_agent_m0_readdata;                                                                          // pc_bus_ctrl_translator:uav_readdata -> pc_bus_ctrl_agent:m0_readdata
	wire          pc_bus_ctrl_agent_m0_waitrequest;                                                                       // pc_bus_ctrl_translator:uav_waitrequest -> pc_bus_ctrl_agent:m0_waitrequest
	wire          pc_bus_ctrl_agent_m0_debugaccess;                                                                       // pc_bus_ctrl_agent:m0_debugaccess -> pc_bus_ctrl_translator:uav_debugaccess
	wire   [31:0] pc_bus_ctrl_agent_m0_address;                                                                           // pc_bus_ctrl_agent:m0_address -> pc_bus_ctrl_translator:uav_address
	wire    [3:0] pc_bus_ctrl_agent_m0_byteenable;                                                                        // pc_bus_ctrl_agent:m0_byteenable -> pc_bus_ctrl_translator:uav_byteenable
	wire          pc_bus_ctrl_agent_m0_read;                                                                              // pc_bus_ctrl_agent:m0_read -> pc_bus_ctrl_translator:uav_read
	wire          pc_bus_ctrl_agent_m0_readdatavalid;                                                                     // pc_bus_ctrl_translator:uav_readdatavalid -> pc_bus_ctrl_agent:m0_readdatavalid
	wire          pc_bus_ctrl_agent_m0_lock;                                                                              // pc_bus_ctrl_agent:m0_lock -> pc_bus_ctrl_translator:uav_lock
	wire   [31:0] pc_bus_ctrl_agent_m0_writedata;                                                                         // pc_bus_ctrl_agent:m0_writedata -> pc_bus_ctrl_translator:uav_writedata
	wire          pc_bus_ctrl_agent_m0_write;                                                                             // pc_bus_ctrl_agent:m0_write -> pc_bus_ctrl_translator:uav_write
	wire    [2:0] pc_bus_ctrl_agent_m0_burstcount;                                                                        // pc_bus_ctrl_agent:m0_burstcount -> pc_bus_ctrl_translator:uav_burstcount
	wire          pc_bus_ctrl_agent_rf_source_valid;                                                                      // pc_bus_ctrl_agent:rf_source_valid -> pc_bus_ctrl_agent_rsp_fifo:in_valid
	wire  [116:0] pc_bus_ctrl_agent_rf_source_data;                                                                       // pc_bus_ctrl_agent:rf_source_data -> pc_bus_ctrl_agent_rsp_fifo:in_data
	wire          pc_bus_ctrl_agent_rf_source_ready;                                                                      // pc_bus_ctrl_agent_rsp_fifo:in_ready -> pc_bus_ctrl_agent:rf_source_ready
	wire          pc_bus_ctrl_agent_rf_source_startofpacket;                                                              // pc_bus_ctrl_agent:rf_source_startofpacket -> pc_bus_ctrl_agent_rsp_fifo:in_startofpacket
	wire          pc_bus_ctrl_agent_rf_source_endofpacket;                                                                // pc_bus_ctrl_agent:rf_source_endofpacket -> pc_bus_ctrl_agent_rsp_fifo:in_endofpacket
	wire          pc_bus_ctrl_agent_rsp_fifo_out_valid;                                                                   // pc_bus_ctrl_agent_rsp_fifo:out_valid -> pc_bus_ctrl_agent:rf_sink_valid
	wire  [116:0] pc_bus_ctrl_agent_rsp_fifo_out_data;                                                                    // pc_bus_ctrl_agent_rsp_fifo:out_data -> pc_bus_ctrl_agent:rf_sink_data
	wire          pc_bus_ctrl_agent_rsp_fifo_out_ready;                                                                   // pc_bus_ctrl_agent:rf_sink_ready -> pc_bus_ctrl_agent_rsp_fifo:out_ready
	wire          pc_bus_ctrl_agent_rsp_fifo_out_startofpacket;                                                           // pc_bus_ctrl_agent_rsp_fifo:out_startofpacket -> pc_bus_ctrl_agent:rf_sink_startofpacket
	wire          pc_bus_ctrl_agent_rsp_fifo_out_endofpacket;                                                             // pc_bus_ctrl_agent_rsp_fifo:out_endofpacket -> pc_bus_ctrl_agent:rf_sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                                                  // cmd_mux_001:src_valid -> pc_bus_ctrl_agent:cp_valid
	wire  [115:0] cmd_mux_001_src_data;                                                                                   // cmd_mux_001:src_data -> pc_bus_ctrl_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                                                  // pc_bus_ctrl_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [11:0] cmd_mux_001_src_channel;                                                                                // cmd_mux_001:src_channel -> pc_bus_ctrl_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                                          // cmd_mux_001:src_startofpacket -> pc_bus_ctrl_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                                            // cmd_mux_001:src_endofpacket -> pc_bus_ctrl_agent:cp_endofpacket
	wire   [31:0] floppy0_mgmt_agent_m0_readdata;                                                                         // floppy0_mgmt_translator:uav_readdata -> floppy0_mgmt_agent:m0_readdata
	wire          floppy0_mgmt_agent_m0_waitrequest;                                                                      // floppy0_mgmt_translator:uav_waitrequest -> floppy0_mgmt_agent:m0_waitrequest
	wire          floppy0_mgmt_agent_m0_debugaccess;                                                                      // floppy0_mgmt_agent:m0_debugaccess -> floppy0_mgmt_translator:uav_debugaccess
	wire   [31:0] floppy0_mgmt_agent_m0_address;                                                                          // floppy0_mgmt_agent:m0_address -> floppy0_mgmt_translator:uav_address
	wire    [3:0] floppy0_mgmt_agent_m0_byteenable;                                                                       // floppy0_mgmt_agent:m0_byteenable -> floppy0_mgmt_translator:uav_byteenable
	wire          floppy0_mgmt_agent_m0_read;                                                                             // floppy0_mgmt_agent:m0_read -> floppy0_mgmt_translator:uav_read
	wire          floppy0_mgmt_agent_m0_readdatavalid;                                                                    // floppy0_mgmt_translator:uav_readdatavalid -> floppy0_mgmt_agent:m0_readdatavalid
	wire          floppy0_mgmt_agent_m0_lock;                                                                             // floppy0_mgmt_agent:m0_lock -> floppy0_mgmt_translator:uav_lock
	wire   [31:0] floppy0_mgmt_agent_m0_writedata;                                                                        // floppy0_mgmt_agent:m0_writedata -> floppy0_mgmt_translator:uav_writedata
	wire          floppy0_mgmt_agent_m0_write;                                                                            // floppy0_mgmt_agent:m0_write -> floppy0_mgmt_translator:uav_write
	wire    [2:0] floppy0_mgmt_agent_m0_burstcount;                                                                       // floppy0_mgmt_agent:m0_burstcount -> floppy0_mgmt_translator:uav_burstcount
	wire          floppy0_mgmt_agent_rf_source_valid;                                                                     // floppy0_mgmt_agent:rf_source_valid -> floppy0_mgmt_agent_rsp_fifo:in_valid
	wire  [116:0] floppy0_mgmt_agent_rf_source_data;                                                                      // floppy0_mgmt_agent:rf_source_data -> floppy0_mgmt_agent_rsp_fifo:in_data
	wire          floppy0_mgmt_agent_rf_source_ready;                                                                     // floppy0_mgmt_agent_rsp_fifo:in_ready -> floppy0_mgmt_agent:rf_source_ready
	wire          floppy0_mgmt_agent_rf_source_startofpacket;                                                             // floppy0_mgmt_agent:rf_source_startofpacket -> floppy0_mgmt_agent_rsp_fifo:in_startofpacket
	wire          floppy0_mgmt_agent_rf_source_endofpacket;                                                               // floppy0_mgmt_agent:rf_source_endofpacket -> floppy0_mgmt_agent_rsp_fifo:in_endofpacket
	wire          floppy0_mgmt_agent_rsp_fifo_out_valid;                                                                  // floppy0_mgmt_agent_rsp_fifo:out_valid -> floppy0_mgmt_agent:rf_sink_valid
	wire  [116:0] floppy0_mgmt_agent_rsp_fifo_out_data;                                                                   // floppy0_mgmt_agent_rsp_fifo:out_data -> floppy0_mgmt_agent:rf_sink_data
	wire          floppy0_mgmt_agent_rsp_fifo_out_ready;                                                                  // floppy0_mgmt_agent:rf_sink_ready -> floppy0_mgmt_agent_rsp_fifo:out_ready
	wire          floppy0_mgmt_agent_rsp_fifo_out_startofpacket;                                                          // floppy0_mgmt_agent_rsp_fifo:out_startofpacket -> floppy0_mgmt_agent:rf_sink_startofpacket
	wire          floppy0_mgmt_agent_rsp_fifo_out_endofpacket;                                                            // floppy0_mgmt_agent_rsp_fifo:out_endofpacket -> floppy0_mgmt_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                                                  // cmd_mux_002:src_valid -> floppy0_mgmt_agent:cp_valid
	wire  [115:0] cmd_mux_002_src_data;                                                                                   // cmd_mux_002:src_data -> floppy0_mgmt_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                                                  // floppy0_mgmt_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [11:0] cmd_mux_002_src_channel;                                                                                // cmd_mux_002:src_channel -> floppy0_mgmt_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                                          // cmd_mux_002:src_startofpacket -> floppy0_mgmt_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                                            // cmd_mux_002:src_endofpacket -> floppy0_mgmt_agent:cp_endofpacket
	wire   [31:0] hdd0_mgmt_agent_m0_readdata;                                                                            // hdd0_mgmt_translator:uav_readdata -> hdd0_mgmt_agent:m0_readdata
	wire          hdd0_mgmt_agent_m0_waitrequest;                                                                         // hdd0_mgmt_translator:uav_waitrequest -> hdd0_mgmt_agent:m0_waitrequest
	wire          hdd0_mgmt_agent_m0_debugaccess;                                                                         // hdd0_mgmt_agent:m0_debugaccess -> hdd0_mgmt_translator:uav_debugaccess
	wire   [31:0] hdd0_mgmt_agent_m0_address;                                                                             // hdd0_mgmt_agent:m0_address -> hdd0_mgmt_translator:uav_address
	wire    [3:0] hdd0_mgmt_agent_m0_byteenable;                                                                          // hdd0_mgmt_agent:m0_byteenable -> hdd0_mgmt_translator:uav_byteenable
	wire          hdd0_mgmt_agent_m0_read;                                                                                // hdd0_mgmt_agent:m0_read -> hdd0_mgmt_translator:uav_read
	wire          hdd0_mgmt_agent_m0_readdatavalid;                                                                       // hdd0_mgmt_translator:uav_readdatavalid -> hdd0_mgmt_agent:m0_readdatavalid
	wire          hdd0_mgmt_agent_m0_lock;                                                                                // hdd0_mgmt_agent:m0_lock -> hdd0_mgmt_translator:uav_lock
	wire   [31:0] hdd0_mgmt_agent_m0_writedata;                                                                           // hdd0_mgmt_agent:m0_writedata -> hdd0_mgmt_translator:uav_writedata
	wire          hdd0_mgmt_agent_m0_write;                                                                               // hdd0_mgmt_agent:m0_write -> hdd0_mgmt_translator:uav_write
	wire    [2:0] hdd0_mgmt_agent_m0_burstcount;                                                                          // hdd0_mgmt_agent:m0_burstcount -> hdd0_mgmt_translator:uav_burstcount
	wire          hdd0_mgmt_agent_rf_source_valid;                                                                        // hdd0_mgmt_agent:rf_source_valid -> hdd0_mgmt_agent_rsp_fifo:in_valid
	wire  [116:0] hdd0_mgmt_agent_rf_source_data;                                                                         // hdd0_mgmt_agent:rf_source_data -> hdd0_mgmt_agent_rsp_fifo:in_data
	wire          hdd0_mgmt_agent_rf_source_ready;                                                                        // hdd0_mgmt_agent_rsp_fifo:in_ready -> hdd0_mgmt_agent:rf_source_ready
	wire          hdd0_mgmt_agent_rf_source_startofpacket;                                                                // hdd0_mgmt_agent:rf_source_startofpacket -> hdd0_mgmt_agent_rsp_fifo:in_startofpacket
	wire          hdd0_mgmt_agent_rf_source_endofpacket;                                                                  // hdd0_mgmt_agent:rf_source_endofpacket -> hdd0_mgmt_agent_rsp_fifo:in_endofpacket
	wire          hdd0_mgmt_agent_rsp_fifo_out_valid;                                                                     // hdd0_mgmt_agent_rsp_fifo:out_valid -> hdd0_mgmt_agent:rf_sink_valid
	wire  [116:0] hdd0_mgmt_agent_rsp_fifo_out_data;                                                                      // hdd0_mgmt_agent_rsp_fifo:out_data -> hdd0_mgmt_agent:rf_sink_data
	wire          hdd0_mgmt_agent_rsp_fifo_out_ready;                                                                     // hdd0_mgmt_agent:rf_sink_ready -> hdd0_mgmt_agent_rsp_fifo:out_ready
	wire          hdd0_mgmt_agent_rsp_fifo_out_startofpacket;                                                             // hdd0_mgmt_agent_rsp_fifo:out_startofpacket -> hdd0_mgmt_agent:rf_sink_startofpacket
	wire          hdd0_mgmt_agent_rsp_fifo_out_endofpacket;                                                               // hdd0_mgmt_agent_rsp_fifo:out_endofpacket -> hdd0_mgmt_agent:rf_sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                                                  // cmd_mux_003:src_valid -> hdd0_mgmt_agent:cp_valid
	wire  [115:0] cmd_mux_003_src_data;                                                                                   // cmd_mux_003:src_data -> hdd0_mgmt_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                                                  // hdd0_mgmt_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [11:0] cmd_mux_003_src_channel;                                                                                // cmd_mux_003:src_channel -> hdd0_mgmt_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                                          // cmd_mux_003:src_startofpacket -> hdd0_mgmt_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                                            // cmd_mux_003:src_endofpacket -> hdd0_mgmt_agent:cp_endofpacket
	wire   [31:0] rtc_mgmt_agent_m0_readdata;                                                                             // rtc_mgmt_translator:uav_readdata -> rtc_mgmt_agent:m0_readdata
	wire          rtc_mgmt_agent_m0_waitrequest;                                                                          // rtc_mgmt_translator:uav_waitrequest -> rtc_mgmt_agent:m0_waitrequest
	wire          rtc_mgmt_agent_m0_debugaccess;                                                                          // rtc_mgmt_agent:m0_debugaccess -> rtc_mgmt_translator:uav_debugaccess
	wire   [31:0] rtc_mgmt_agent_m0_address;                                                                              // rtc_mgmt_agent:m0_address -> rtc_mgmt_translator:uav_address
	wire    [3:0] rtc_mgmt_agent_m0_byteenable;                                                                           // rtc_mgmt_agent:m0_byteenable -> rtc_mgmt_translator:uav_byteenable
	wire          rtc_mgmt_agent_m0_read;                                                                                 // rtc_mgmt_agent:m0_read -> rtc_mgmt_translator:uav_read
	wire          rtc_mgmt_agent_m0_readdatavalid;                                                                        // rtc_mgmt_translator:uav_readdatavalid -> rtc_mgmt_agent:m0_readdatavalid
	wire          rtc_mgmt_agent_m0_lock;                                                                                 // rtc_mgmt_agent:m0_lock -> rtc_mgmt_translator:uav_lock
	wire   [31:0] rtc_mgmt_agent_m0_writedata;                                                                            // rtc_mgmt_agent:m0_writedata -> rtc_mgmt_translator:uav_writedata
	wire          rtc_mgmt_agent_m0_write;                                                                                // rtc_mgmt_agent:m0_write -> rtc_mgmt_translator:uav_write
	wire    [2:0] rtc_mgmt_agent_m0_burstcount;                                                                           // rtc_mgmt_agent:m0_burstcount -> rtc_mgmt_translator:uav_burstcount
	wire          rtc_mgmt_agent_rf_source_valid;                                                                         // rtc_mgmt_agent:rf_source_valid -> rtc_mgmt_agent_rsp_fifo:in_valid
	wire  [116:0] rtc_mgmt_agent_rf_source_data;                                                                          // rtc_mgmt_agent:rf_source_data -> rtc_mgmt_agent_rsp_fifo:in_data
	wire          rtc_mgmt_agent_rf_source_ready;                                                                         // rtc_mgmt_agent_rsp_fifo:in_ready -> rtc_mgmt_agent:rf_source_ready
	wire          rtc_mgmt_agent_rf_source_startofpacket;                                                                 // rtc_mgmt_agent:rf_source_startofpacket -> rtc_mgmt_agent_rsp_fifo:in_startofpacket
	wire          rtc_mgmt_agent_rf_source_endofpacket;                                                                   // rtc_mgmt_agent:rf_source_endofpacket -> rtc_mgmt_agent_rsp_fifo:in_endofpacket
	wire          rtc_mgmt_agent_rsp_fifo_out_valid;                                                                      // rtc_mgmt_agent_rsp_fifo:out_valid -> rtc_mgmt_agent:rf_sink_valid
	wire  [116:0] rtc_mgmt_agent_rsp_fifo_out_data;                                                                       // rtc_mgmt_agent_rsp_fifo:out_data -> rtc_mgmt_agent:rf_sink_data
	wire          rtc_mgmt_agent_rsp_fifo_out_ready;                                                                      // rtc_mgmt_agent:rf_sink_ready -> rtc_mgmt_agent_rsp_fifo:out_ready
	wire          rtc_mgmt_agent_rsp_fifo_out_startofpacket;                                                              // rtc_mgmt_agent_rsp_fifo:out_startofpacket -> rtc_mgmt_agent:rf_sink_startofpacket
	wire          rtc_mgmt_agent_rsp_fifo_out_endofpacket;                                                                // rtc_mgmt_agent_rsp_fifo:out_endofpacket -> rtc_mgmt_agent:rf_sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                                                  // cmd_mux_004:src_valid -> rtc_mgmt_agent:cp_valid
	wire  [115:0] cmd_mux_004_src_data;                                                                                   // cmd_mux_004:src_data -> rtc_mgmt_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                                                  // rtc_mgmt_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [11:0] cmd_mux_004_src_channel;                                                                                // cmd_mux_004:src_channel -> rtc_mgmt_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                                          // cmd_mux_004:src_startofpacket -> rtc_mgmt_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                                            // cmd_mux_004:src_endofpacket -> rtc_mgmt_agent:cp_endofpacket
	wire   [31:0] sound_mgmt_agent_m0_readdata;                                                                           // sound_mgmt_translator:uav_readdata -> sound_mgmt_agent:m0_readdata
	wire          sound_mgmt_agent_m0_waitrequest;                                                                        // sound_mgmt_translator:uav_waitrequest -> sound_mgmt_agent:m0_waitrequest
	wire          sound_mgmt_agent_m0_debugaccess;                                                                        // sound_mgmt_agent:m0_debugaccess -> sound_mgmt_translator:uav_debugaccess
	wire   [31:0] sound_mgmt_agent_m0_address;                                                                            // sound_mgmt_agent:m0_address -> sound_mgmt_translator:uav_address
	wire    [3:0] sound_mgmt_agent_m0_byteenable;                                                                         // sound_mgmt_agent:m0_byteenable -> sound_mgmt_translator:uav_byteenable
	wire          sound_mgmt_agent_m0_read;                                                                               // sound_mgmt_agent:m0_read -> sound_mgmt_translator:uav_read
	wire          sound_mgmt_agent_m0_readdatavalid;                                                                      // sound_mgmt_translator:uav_readdatavalid -> sound_mgmt_agent:m0_readdatavalid
	wire          sound_mgmt_agent_m0_lock;                                                                               // sound_mgmt_agent:m0_lock -> sound_mgmt_translator:uav_lock
	wire   [31:0] sound_mgmt_agent_m0_writedata;                                                                          // sound_mgmt_agent:m0_writedata -> sound_mgmt_translator:uav_writedata
	wire          sound_mgmt_agent_m0_write;                                                                              // sound_mgmt_agent:m0_write -> sound_mgmt_translator:uav_write
	wire    [2:0] sound_mgmt_agent_m0_burstcount;                                                                         // sound_mgmt_agent:m0_burstcount -> sound_mgmt_translator:uav_burstcount
	wire          sound_mgmt_agent_rf_source_valid;                                                                       // sound_mgmt_agent:rf_source_valid -> sound_mgmt_agent_rsp_fifo:in_valid
	wire  [116:0] sound_mgmt_agent_rf_source_data;                                                                        // sound_mgmt_agent:rf_source_data -> sound_mgmt_agent_rsp_fifo:in_data
	wire          sound_mgmt_agent_rf_source_ready;                                                                       // sound_mgmt_agent_rsp_fifo:in_ready -> sound_mgmt_agent:rf_source_ready
	wire          sound_mgmt_agent_rf_source_startofpacket;                                                               // sound_mgmt_agent:rf_source_startofpacket -> sound_mgmt_agent_rsp_fifo:in_startofpacket
	wire          sound_mgmt_agent_rf_source_endofpacket;                                                                 // sound_mgmt_agent:rf_source_endofpacket -> sound_mgmt_agent_rsp_fifo:in_endofpacket
	wire          sound_mgmt_agent_rsp_fifo_out_valid;                                                                    // sound_mgmt_agent_rsp_fifo:out_valid -> sound_mgmt_agent:rf_sink_valid
	wire  [116:0] sound_mgmt_agent_rsp_fifo_out_data;                                                                     // sound_mgmt_agent_rsp_fifo:out_data -> sound_mgmt_agent:rf_sink_data
	wire          sound_mgmt_agent_rsp_fifo_out_ready;                                                                    // sound_mgmt_agent:rf_sink_ready -> sound_mgmt_agent_rsp_fifo:out_ready
	wire          sound_mgmt_agent_rsp_fifo_out_startofpacket;                                                            // sound_mgmt_agent_rsp_fifo:out_startofpacket -> sound_mgmt_agent:rf_sink_startofpacket
	wire          sound_mgmt_agent_rsp_fifo_out_endofpacket;                                                              // sound_mgmt_agent_rsp_fifo:out_endofpacket -> sound_mgmt_agent:rf_sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                                                  // cmd_mux_005:src_valid -> sound_mgmt_agent:cp_valid
	wire  [115:0] cmd_mux_005_src_data;                                                                                   // cmd_mux_005:src_data -> sound_mgmt_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                                                  // sound_mgmt_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [11:0] cmd_mux_005_src_channel;                                                                                // cmd_mux_005:src_channel -> sound_mgmt_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                                          // cmd_mux_005:src_startofpacket -> sound_mgmt_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                                            // cmd_mux_005:src_endofpacket -> sound_mgmt_agent:cp_endofpacket
	wire   [31:0] pit_mgmt_agent_m0_readdata;                                                                             // pit_mgmt_translator:uav_readdata -> pit_mgmt_agent:m0_readdata
	wire          pit_mgmt_agent_m0_waitrequest;                                                                          // pit_mgmt_translator:uav_waitrequest -> pit_mgmt_agent:m0_waitrequest
	wire          pit_mgmt_agent_m0_debugaccess;                                                                          // pit_mgmt_agent:m0_debugaccess -> pit_mgmt_translator:uav_debugaccess
	wire   [31:0] pit_mgmt_agent_m0_address;                                                                              // pit_mgmt_agent:m0_address -> pit_mgmt_translator:uav_address
	wire    [3:0] pit_mgmt_agent_m0_byteenable;                                                                           // pit_mgmt_agent:m0_byteenable -> pit_mgmt_translator:uav_byteenable
	wire          pit_mgmt_agent_m0_read;                                                                                 // pit_mgmt_agent:m0_read -> pit_mgmt_translator:uav_read
	wire          pit_mgmt_agent_m0_readdatavalid;                                                                        // pit_mgmt_translator:uav_readdatavalid -> pit_mgmt_agent:m0_readdatavalid
	wire          pit_mgmt_agent_m0_lock;                                                                                 // pit_mgmt_agent:m0_lock -> pit_mgmt_translator:uav_lock
	wire   [31:0] pit_mgmt_agent_m0_writedata;                                                                            // pit_mgmt_agent:m0_writedata -> pit_mgmt_translator:uav_writedata
	wire          pit_mgmt_agent_m0_write;                                                                                // pit_mgmt_agent:m0_write -> pit_mgmt_translator:uav_write
	wire    [2:0] pit_mgmt_agent_m0_burstcount;                                                                           // pit_mgmt_agent:m0_burstcount -> pit_mgmt_translator:uav_burstcount
	wire          pit_mgmt_agent_rf_source_valid;                                                                         // pit_mgmt_agent:rf_source_valid -> pit_mgmt_agent_rsp_fifo:in_valid
	wire  [116:0] pit_mgmt_agent_rf_source_data;                                                                          // pit_mgmt_agent:rf_source_data -> pit_mgmt_agent_rsp_fifo:in_data
	wire          pit_mgmt_agent_rf_source_ready;                                                                         // pit_mgmt_agent_rsp_fifo:in_ready -> pit_mgmt_agent:rf_source_ready
	wire          pit_mgmt_agent_rf_source_startofpacket;                                                                 // pit_mgmt_agent:rf_source_startofpacket -> pit_mgmt_agent_rsp_fifo:in_startofpacket
	wire          pit_mgmt_agent_rf_source_endofpacket;                                                                   // pit_mgmt_agent:rf_source_endofpacket -> pit_mgmt_agent_rsp_fifo:in_endofpacket
	wire          pit_mgmt_agent_rsp_fifo_out_valid;                                                                      // pit_mgmt_agent_rsp_fifo:out_valid -> pit_mgmt_agent:rf_sink_valid
	wire  [116:0] pit_mgmt_agent_rsp_fifo_out_data;                                                                       // pit_mgmt_agent_rsp_fifo:out_data -> pit_mgmt_agent:rf_sink_data
	wire          pit_mgmt_agent_rsp_fifo_out_ready;                                                                      // pit_mgmt_agent:rf_sink_ready -> pit_mgmt_agent_rsp_fifo:out_ready
	wire          pit_mgmt_agent_rsp_fifo_out_startofpacket;                                                              // pit_mgmt_agent_rsp_fifo:out_startofpacket -> pit_mgmt_agent:rf_sink_startofpacket
	wire          pit_mgmt_agent_rsp_fifo_out_endofpacket;                                                                // pit_mgmt_agent_rsp_fifo:out_endofpacket -> pit_mgmt_agent:rf_sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                                                  // cmd_mux_006:src_valid -> pit_mgmt_agent:cp_valid
	wire  [115:0] cmd_mux_006_src_data;                                                                                   // cmd_mux_006:src_data -> pit_mgmt_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                                                  // pit_mgmt_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [11:0] cmd_mux_006_src_channel;                                                                                // cmd_mux_006:src_channel -> pit_mgmt_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                                          // cmd_mux_006:src_startofpacket -> pit_mgmt_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                                            // cmd_mux_006:src_endofpacket -> pit_mgmt_agent:cp_endofpacket
	wire   [31:0] hdd1_mgmt_agent_m0_readdata;                                                                            // hdd1_mgmt_translator:uav_readdata -> hdd1_mgmt_agent:m0_readdata
	wire          hdd1_mgmt_agent_m0_waitrequest;                                                                         // hdd1_mgmt_translator:uav_waitrequest -> hdd1_mgmt_agent:m0_waitrequest
	wire          hdd1_mgmt_agent_m0_debugaccess;                                                                         // hdd1_mgmt_agent:m0_debugaccess -> hdd1_mgmt_translator:uav_debugaccess
	wire   [31:0] hdd1_mgmt_agent_m0_address;                                                                             // hdd1_mgmt_agent:m0_address -> hdd1_mgmt_translator:uav_address
	wire    [3:0] hdd1_mgmt_agent_m0_byteenable;                                                                          // hdd1_mgmt_agent:m0_byteenable -> hdd1_mgmt_translator:uav_byteenable
	wire          hdd1_mgmt_agent_m0_read;                                                                                // hdd1_mgmt_agent:m0_read -> hdd1_mgmt_translator:uav_read
	wire          hdd1_mgmt_agent_m0_readdatavalid;                                                                       // hdd1_mgmt_translator:uav_readdatavalid -> hdd1_mgmt_agent:m0_readdatavalid
	wire          hdd1_mgmt_agent_m0_lock;                                                                                // hdd1_mgmt_agent:m0_lock -> hdd1_mgmt_translator:uav_lock
	wire   [31:0] hdd1_mgmt_agent_m0_writedata;                                                                           // hdd1_mgmt_agent:m0_writedata -> hdd1_mgmt_translator:uav_writedata
	wire          hdd1_mgmt_agent_m0_write;                                                                               // hdd1_mgmt_agent:m0_write -> hdd1_mgmt_translator:uav_write
	wire    [2:0] hdd1_mgmt_agent_m0_burstcount;                                                                          // hdd1_mgmt_agent:m0_burstcount -> hdd1_mgmt_translator:uav_burstcount
	wire          hdd1_mgmt_agent_rf_source_valid;                                                                        // hdd1_mgmt_agent:rf_source_valid -> hdd1_mgmt_agent_rsp_fifo:in_valid
	wire  [116:0] hdd1_mgmt_agent_rf_source_data;                                                                         // hdd1_mgmt_agent:rf_source_data -> hdd1_mgmt_agent_rsp_fifo:in_data
	wire          hdd1_mgmt_agent_rf_source_ready;                                                                        // hdd1_mgmt_agent_rsp_fifo:in_ready -> hdd1_mgmt_agent:rf_source_ready
	wire          hdd1_mgmt_agent_rf_source_startofpacket;                                                                // hdd1_mgmt_agent:rf_source_startofpacket -> hdd1_mgmt_agent_rsp_fifo:in_startofpacket
	wire          hdd1_mgmt_agent_rf_source_endofpacket;                                                                  // hdd1_mgmt_agent:rf_source_endofpacket -> hdd1_mgmt_agent_rsp_fifo:in_endofpacket
	wire          hdd1_mgmt_agent_rsp_fifo_out_valid;                                                                     // hdd1_mgmt_agent_rsp_fifo:out_valid -> hdd1_mgmt_agent:rf_sink_valid
	wire  [116:0] hdd1_mgmt_agent_rsp_fifo_out_data;                                                                      // hdd1_mgmt_agent_rsp_fifo:out_data -> hdd1_mgmt_agent:rf_sink_data
	wire          hdd1_mgmt_agent_rsp_fifo_out_ready;                                                                     // hdd1_mgmt_agent:rf_sink_ready -> hdd1_mgmt_agent_rsp_fifo:out_ready
	wire          hdd1_mgmt_agent_rsp_fifo_out_startofpacket;                                                             // hdd1_mgmt_agent_rsp_fifo:out_startofpacket -> hdd1_mgmt_agent:rf_sink_startofpacket
	wire          hdd1_mgmt_agent_rsp_fifo_out_endofpacket;                                                               // hdd1_mgmt_agent_rsp_fifo:out_endofpacket -> hdd1_mgmt_agent:rf_sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                                                  // cmd_mux_007:src_valid -> hdd1_mgmt_agent:cp_valid
	wire  [115:0] cmd_mux_007_src_data;                                                                                   // cmd_mux_007:src_data -> hdd1_mgmt_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                                                  // hdd1_mgmt_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [11:0] cmd_mux_007_src_channel;                                                                                // cmd_mux_007:src_channel -> hdd1_mgmt_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                                          // cmd_mux_007:src_startofpacket -> hdd1_mgmt_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                                            // cmd_mux_007:src_endofpacket -> hdd1_mgmt_agent:cp_endofpacket
	wire    [7:0] floppy0_sd_slave_agent_m0_readdata;                                                                     // floppy0_sd_slave_translator:uav_readdata -> floppy0_sd_slave_agent:m0_readdata
	wire          floppy0_sd_slave_agent_m0_waitrequest;                                                                  // floppy0_sd_slave_translator:uav_waitrequest -> floppy0_sd_slave_agent:m0_waitrequest
	wire          floppy0_sd_slave_agent_m0_debugaccess;                                                                  // floppy0_sd_slave_agent:m0_debugaccess -> floppy0_sd_slave_translator:uav_debugaccess
	wire   [31:0] floppy0_sd_slave_agent_m0_address;                                                                      // floppy0_sd_slave_agent:m0_address -> floppy0_sd_slave_translator:uav_address
	wire    [0:0] floppy0_sd_slave_agent_m0_byteenable;                                                                   // floppy0_sd_slave_agent:m0_byteenable -> floppy0_sd_slave_translator:uav_byteenable
	wire          floppy0_sd_slave_agent_m0_read;                                                                         // floppy0_sd_slave_agent:m0_read -> floppy0_sd_slave_translator:uav_read
	wire          floppy0_sd_slave_agent_m0_readdatavalid;                                                                // floppy0_sd_slave_translator:uav_readdatavalid -> floppy0_sd_slave_agent:m0_readdatavalid
	wire          floppy0_sd_slave_agent_m0_lock;                                                                         // floppy0_sd_slave_agent:m0_lock -> floppy0_sd_slave_translator:uav_lock
	wire    [7:0] floppy0_sd_slave_agent_m0_writedata;                                                                    // floppy0_sd_slave_agent:m0_writedata -> floppy0_sd_slave_translator:uav_writedata
	wire          floppy0_sd_slave_agent_m0_write;                                                                        // floppy0_sd_slave_agent:m0_write -> floppy0_sd_slave_translator:uav_write
	wire    [0:0] floppy0_sd_slave_agent_m0_burstcount;                                                                   // floppy0_sd_slave_agent:m0_burstcount -> floppy0_sd_slave_translator:uav_burstcount
	wire          floppy0_sd_slave_agent_rf_source_valid;                                                                 // floppy0_sd_slave_agent:rf_source_valid -> floppy0_sd_slave_agent_rsp_fifo:in_valid
	wire   [89:0] floppy0_sd_slave_agent_rf_source_data;                                                                  // floppy0_sd_slave_agent:rf_source_data -> floppy0_sd_slave_agent_rsp_fifo:in_data
	wire          floppy0_sd_slave_agent_rf_source_ready;                                                                 // floppy0_sd_slave_agent_rsp_fifo:in_ready -> floppy0_sd_slave_agent:rf_source_ready
	wire          floppy0_sd_slave_agent_rf_source_startofpacket;                                                         // floppy0_sd_slave_agent:rf_source_startofpacket -> floppy0_sd_slave_agent_rsp_fifo:in_startofpacket
	wire          floppy0_sd_slave_agent_rf_source_endofpacket;                                                           // floppy0_sd_slave_agent:rf_source_endofpacket -> floppy0_sd_slave_agent_rsp_fifo:in_endofpacket
	wire          floppy0_sd_slave_agent_rsp_fifo_out_valid;                                                              // floppy0_sd_slave_agent_rsp_fifo:out_valid -> floppy0_sd_slave_agent:rf_sink_valid
	wire   [89:0] floppy0_sd_slave_agent_rsp_fifo_out_data;                                                               // floppy0_sd_slave_agent_rsp_fifo:out_data -> floppy0_sd_slave_agent:rf_sink_data
	wire          floppy0_sd_slave_agent_rsp_fifo_out_ready;                                                              // floppy0_sd_slave_agent:rf_sink_ready -> floppy0_sd_slave_agent_rsp_fifo:out_ready
	wire          floppy0_sd_slave_agent_rsp_fifo_out_startofpacket;                                                      // floppy0_sd_slave_agent_rsp_fifo:out_startofpacket -> floppy0_sd_slave_agent:rf_sink_startofpacket
	wire          floppy0_sd_slave_agent_rsp_fifo_out_endofpacket;                                                        // floppy0_sd_slave_agent_rsp_fifo:out_endofpacket -> floppy0_sd_slave_agent:rf_sink_endofpacket
	wire   [31:0] hdd0_sd_slave_agent_m0_readdata;                                                                        // hdd0_sd_slave_translator:uav_readdata -> hdd0_sd_slave_agent:m0_readdata
	wire          hdd0_sd_slave_agent_m0_waitrequest;                                                                     // hdd0_sd_slave_translator:uav_waitrequest -> hdd0_sd_slave_agent:m0_waitrequest
	wire          hdd0_sd_slave_agent_m0_debugaccess;                                                                     // hdd0_sd_slave_agent:m0_debugaccess -> hdd0_sd_slave_translator:uav_debugaccess
	wire   [31:0] hdd0_sd_slave_agent_m0_address;                                                                         // hdd0_sd_slave_agent:m0_address -> hdd0_sd_slave_translator:uav_address
	wire    [3:0] hdd0_sd_slave_agent_m0_byteenable;                                                                      // hdd0_sd_slave_agent:m0_byteenable -> hdd0_sd_slave_translator:uav_byteenable
	wire          hdd0_sd_slave_agent_m0_read;                                                                            // hdd0_sd_slave_agent:m0_read -> hdd0_sd_slave_translator:uav_read
	wire          hdd0_sd_slave_agent_m0_readdatavalid;                                                                   // hdd0_sd_slave_translator:uav_readdatavalid -> hdd0_sd_slave_agent:m0_readdatavalid
	wire          hdd0_sd_slave_agent_m0_lock;                                                                            // hdd0_sd_slave_agent:m0_lock -> hdd0_sd_slave_translator:uav_lock
	wire   [31:0] hdd0_sd_slave_agent_m0_writedata;                                                                       // hdd0_sd_slave_agent:m0_writedata -> hdd0_sd_slave_translator:uav_writedata
	wire          hdd0_sd_slave_agent_m0_write;                                                                           // hdd0_sd_slave_agent:m0_write -> hdd0_sd_slave_translator:uav_write
	wire    [2:0] hdd0_sd_slave_agent_m0_burstcount;                                                                      // hdd0_sd_slave_agent:m0_burstcount -> hdd0_sd_slave_translator:uav_burstcount
	wire          hdd0_sd_slave_agent_rf_source_valid;                                                                    // hdd0_sd_slave_agent:rf_source_valid -> hdd0_sd_slave_agent_rsp_fifo:in_valid
	wire  [116:0] hdd0_sd_slave_agent_rf_source_data;                                                                     // hdd0_sd_slave_agent:rf_source_data -> hdd0_sd_slave_agent_rsp_fifo:in_data
	wire          hdd0_sd_slave_agent_rf_source_ready;                                                                    // hdd0_sd_slave_agent_rsp_fifo:in_ready -> hdd0_sd_slave_agent:rf_source_ready
	wire          hdd0_sd_slave_agent_rf_source_startofpacket;                                                            // hdd0_sd_slave_agent:rf_source_startofpacket -> hdd0_sd_slave_agent_rsp_fifo:in_startofpacket
	wire          hdd0_sd_slave_agent_rf_source_endofpacket;                                                              // hdd0_sd_slave_agent:rf_source_endofpacket -> hdd0_sd_slave_agent_rsp_fifo:in_endofpacket
	wire          hdd0_sd_slave_agent_rsp_fifo_out_valid;                                                                 // hdd0_sd_slave_agent_rsp_fifo:out_valid -> hdd0_sd_slave_agent:rf_sink_valid
	wire  [116:0] hdd0_sd_slave_agent_rsp_fifo_out_data;                                                                  // hdd0_sd_slave_agent_rsp_fifo:out_data -> hdd0_sd_slave_agent:rf_sink_data
	wire          hdd0_sd_slave_agent_rsp_fifo_out_ready;                                                                 // hdd0_sd_slave_agent:rf_sink_ready -> hdd0_sd_slave_agent_rsp_fifo:out_ready
	wire          hdd0_sd_slave_agent_rsp_fifo_out_startofpacket;                                                         // hdd0_sd_slave_agent_rsp_fifo:out_startofpacket -> hdd0_sd_slave_agent:rf_sink_startofpacket
	wire          hdd0_sd_slave_agent_rsp_fifo_out_endofpacket;                                                           // hdd0_sd_slave_agent_rsp_fifo:out_endofpacket -> hdd0_sd_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_009_src_valid;                                                                                  // cmd_mux_009:src_valid -> hdd0_sd_slave_agent:cp_valid
	wire  [115:0] cmd_mux_009_src_data;                                                                                   // cmd_mux_009:src_data -> hdd0_sd_slave_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                                                  // hdd0_sd_slave_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [11:0] cmd_mux_009_src_channel;                                                                                // cmd_mux_009:src_channel -> hdd0_sd_slave_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                                                          // cmd_mux_009:src_startofpacket -> hdd0_sd_slave_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                                            // cmd_mux_009:src_endofpacket -> hdd0_sd_slave_agent:cp_endofpacket
	wire   [31:0] hdd1_sd_slave_agent_m0_readdata;                                                                        // hdd1_sd_slave_translator:uav_readdata -> hdd1_sd_slave_agent:m0_readdata
	wire          hdd1_sd_slave_agent_m0_waitrequest;                                                                     // hdd1_sd_slave_translator:uav_waitrequest -> hdd1_sd_slave_agent:m0_waitrequest
	wire          hdd1_sd_slave_agent_m0_debugaccess;                                                                     // hdd1_sd_slave_agent:m0_debugaccess -> hdd1_sd_slave_translator:uav_debugaccess
	wire   [31:0] hdd1_sd_slave_agent_m0_address;                                                                         // hdd1_sd_slave_agent:m0_address -> hdd1_sd_slave_translator:uav_address
	wire    [3:0] hdd1_sd_slave_agent_m0_byteenable;                                                                      // hdd1_sd_slave_agent:m0_byteenable -> hdd1_sd_slave_translator:uav_byteenable
	wire          hdd1_sd_slave_agent_m0_read;                                                                            // hdd1_sd_slave_agent:m0_read -> hdd1_sd_slave_translator:uav_read
	wire          hdd1_sd_slave_agent_m0_readdatavalid;                                                                   // hdd1_sd_slave_translator:uav_readdatavalid -> hdd1_sd_slave_agent:m0_readdatavalid
	wire          hdd1_sd_slave_agent_m0_lock;                                                                            // hdd1_sd_slave_agent:m0_lock -> hdd1_sd_slave_translator:uav_lock
	wire   [31:0] hdd1_sd_slave_agent_m0_writedata;                                                                       // hdd1_sd_slave_agent:m0_writedata -> hdd1_sd_slave_translator:uav_writedata
	wire          hdd1_sd_slave_agent_m0_write;                                                                           // hdd1_sd_slave_agent:m0_write -> hdd1_sd_slave_translator:uav_write
	wire    [2:0] hdd1_sd_slave_agent_m0_burstcount;                                                                      // hdd1_sd_slave_agent:m0_burstcount -> hdd1_sd_slave_translator:uav_burstcount
	wire          hdd1_sd_slave_agent_rf_source_valid;                                                                    // hdd1_sd_slave_agent:rf_source_valid -> hdd1_sd_slave_agent_rsp_fifo:in_valid
	wire  [116:0] hdd1_sd_slave_agent_rf_source_data;                                                                     // hdd1_sd_slave_agent:rf_source_data -> hdd1_sd_slave_agent_rsp_fifo:in_data
	wire          hdd1_sd_slave_agent_rf_source_ready;                                                                    // hdd1_sd_slave_agent_rsp_fifo:in_ready -> hdd1_sd_slave_agent:rf_source_ready
	wire          hdd1_sd_slave_agent_rf_source_startofpacket;                                                            // hdd1_sd_slave_agent:rf_source_startofpacket -> hdd1_sd_slave_agent_rsp_fifo:in_startofpacket
	wire          hdd1_sd_slave_agent_rf_source_endofpacket;                                                              // hdd1_sd_slave_agent:rf_source_endofpacket -> hdd1_sd_slave_agent_rsp_fifo:in_endofpacket
	wire          hdd1_sd_slave_agent_rsp_fifo_out_valid;                                                                 // hdd1_sd_slave_agent_rsp_fifo:out_valid -> hdd1_sd_slave_agent:rf_sink_valid
	wire  [116:0] hdd1_sd_slave_agent_rsp_fifo_out_data;                                                                  // hdd1_sd_slave_agent_rsp_fifo:out_data -> hdd1_sd_slave_agent:rf_sink_data
	wire          hdd1_sd_slave_agent_rsp_fifo_out_ready;                                                                 // hdd1_sd_slave_agent:rf_sink_ready -> hdd1_sd_slave_agent_rsp_fifo:out_ready
	wire          hdd1_sd_slave_agent_rsp_fifo_out_startofpacket;                                                         // hdd1_sd_slave_agent_rsp_fifo:out_startofpacket -> hdd1_sd_slave_agent:rf_sink_startofpacket
	wire          hdd1_sd_slave_agent_rsp_fifo_out_endofpacket;                                                           // hdd1_sd_slave_agent_rsp_fifo:out_endofpacket -> hdd1_sd_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_010_src_valid;                                                                                  // cmd_mux_010:src_valid -> hdd1_sd_slave_agent:cp_valid
	wire  [115:0] cmd_mux_010_src_data;                                                                                   // cmd_mux_010:src_data -> hdd1_sd_slave_agent:cp_data
	wire          cmd_mux_010_src_ready;                                                                                  // hdd1_sd_slave_agent:cp_ready -> cmd_mux_010:src_ready
	wire   [11:0] cmd_mux_010_src_channel;                                                                                // cmd_mux_010:src_channel -> hdd1_sd_slave_agent:cp_channel
	wire          cmd_mux_010_src_startofpacket;                                                                          // cmd_mux_010:src_startofpacket -> hdd1_sd_slave_agent:cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                                            // cmd_mux_010:src_endofpacket -> hdd1_sd_slave_agent:cp_endofpacket
	wire   [63:0] address_span_extender_windowed_slave_agent_m0_readdata;                                                 // address_span_extender_windowed_slave_translator:uav_readdata -> address_span_extender_windowed_slave_agent:m0_readdata
	wire          address_span_extender_windowed_slave_agent_m0_waitrequest;                                              // address_span_extender_windowed_slave_translator:uav_waitrequest -> address_span_extender_windowed_slave_agent:m0_waitrequest
	wire          address_span_extender_windowed_slave_agent_m0_debugaccess;                                              // address_span_extender_windowed_slave_agent:m0_debugaccess -> address_span_extender_windowed_slave_translator:uav_debugaccess
	wire   [31:0] address_span_extender_windowed_slave_agent_m0_address;                                                  // address_span_extender_windowed_slave_agent:m0_address -> address_span_extender_windowed_slave_translator:uav_address
	wire    [7:0] address_span_extender_windowed_slave_agent_m0_byteenable;                                               // address_span_extender_windowed_slave_agent:m0_byteenable -> address_span_extender_windowed_slave_translator:uav_byteenable
	wire          address_span_extender_windowed_slave_agent_m0_read;                                                     // address_span_extender_windowed_slave_agent:m0_read -> address_span_extender_windowed_slave_translator:uav_read
	wire          address_span_extender_windowed_slave_agent_m0_readdatavalid;                                            // address_span_extender_windowed_slave_translator:uav_readdatavalid -> address_span_extender_windowed_slave_agent:m0_readdatavalid
	wire          address_span_extender_windowed_slave_agent_m0_lock;                                                     // address_span_extender_windowed_slave_agent:m0_lock -> address_span_extender_windowed_slave_translator:uav_lock
	wire   [63:0] address_span_extender_windowed_slave_agent_m0_writedata;                                                // address_span_extender_windowed_slave_agent:m0_writedata -> address_span_extender_windowed_slave_translator:uav_writedata
	wire          address_span_extender_windowed_slave_agent_m0_write;                                                    // address_span_extender_windowed_slave_agent:m0_write -> address_span_extender_windowed_slave_translator:uav_write
	wire   [10:0] address_span_extender_windowed_slave_agent_m0_burstcount;                                               // address_span_extender_windowed_slave_agent:m0_burstcount -> address_span_extender_windowed_slave_translator:uav_burstcount
	wire          address_span_extender_windowed_slave_agent_rf_source_valid;                                             // address_span_extender_windowed_slave_agent:rf_source_valid -> address_span_extender_windowed_slave_agent_rsp_fifo:in_valid
	wire  [152:0] address_span_extender_windowed_slave_agent_rf_source_data;                                              // address_span_extender_windowed_slave_agent:rf_source_data -> address_span_extender_windowed_slave_agent_rsp_fifo:in_data
	wire          address_span_extender_windowed_slave_agent_rf_source_ready;                                             // address_span_extender_windowed_slave_agent_rsp_fifo:in_ready -> address_span_extender_windowed_slave_agent:rf_source_ready
	wire          address_span_extender_windowed_slave_agent_rf_source_startofpacket;                                     // address_span_extender_windowed_slave_agent:rf_source_startofpacket -> address_span_extender_windowed_slave_agent_rsp_fifo:in_startofpacket
	wire          address_span_extender_windowed_slave_agent_rf_source_endofpacket;                                       // address_span_extender_windowed_slave_agent:rf_source_endofpacket -> address_span_extender_windowed_slave_agent_rsp_fifo:in_endofpacket
	wire          address_span_extender_windowed_slave_agent_rsp_fifo_out_valid;                                          // address_span_extender_windowed_slave_agent_rsp_fifo:out_valid -> address_span_extender_windowed_slave_agent:rf_sink_valid
	wire  [152:0] address_span_extender_windowed_slave_agent_rsp_fifo_out_data;                                           // address_span_extender_windowed_slave_agent_rsp_fifo:out_data -> address_span_extender_windowed_slave_agent:rf_sink_data
	wire          address_span_extender_windowed_slave_agent_rsp_fifo_out_ready;                                          // address_span_extender_windowed_slave_agent:rf_sink_ready -> address_span_extender_windowed_slave_agent_rsp_fifo:out_ready
	wire          address_span_extender_windowed_slave_agent_rsp_fifo_out_startofpacket;                                  // address_span_extender_windowed_slave_agent_rsp_fifo:out_startofpacket -> address_span_extender_windowed_slave_agent:rf_sink_startofpacket
	wire          address_span_extender_windowed_slave_agent_rsp_fifo_out_endofpacket;                                    // address_span_extender_windowed_slave_agent_rsp_fifo:out_endofpacket -> address_span_extender_windowed_slave_agent:rf_sink_endofpacket
	wire          address_span_extender_windowed_slave_agent_rdata_fifo_src_valid;                                        // address_span_extender_windowed_slave_agent:rdata_fifo_src_valid -> address_span_extender_windowed_slave_agent_rdata_fifo:in_valid
	wire   [65:0] address_span_extender_windowed_slave_agent_rdata_fifo_src_data;                                         // address_span_extender_windowed_slave_agent:rdata_fifo_src_data -> address_span_extender_windowed_slave_agent_rdata_fifo:in_data
	wire          address_span_extender_windowed_slave_agent_rdata_fifo_src_ready;                                        // address_span_extender_windowed_slave_agent_rdata_fifo:in_ready -> address_span_extender_windowed_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_011_src_valid;                                                                                  // cmd_mux_011:src_valid -> address_span_extender_windowed_slave_agent:cp_valid
	wire  [151:0] cmd_mux_011_src_data;                                                                                   // cmd_mux_011:src_data -> address_span_extender_windowed_slave_agent:cp_data
	wire          cmd_mux_011_src_ready;                                                                                  // address_span_extender_windowed_slave_agent:cp_ready -> cmd_mux_011:src_ready
	wire   [11:0] cmd_mux_011_src_channel;                                                                                // cmd_mux_011:src_channel -> address_span_extender_windowed_slave_agent:cp_channel
	wire          cmd_mux_011_src_startofpacket;                                                                          // cmd_mux_011:src_startofpacket -> address_span_extender_windowed_slave_agent:cp_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                                            // cmd_mux_011:src_endofpacket -> address_span_extender_windowed_slave_agent:cp_endofpacket
	wire          floppy0_avalon_master_agent_cp_valid;                                                                   // floppy0_avalon_master_agent:cp_valid -> router:sink_valid
	wire  [115:0] floppy0_avalon_master_agent_cp_data;                                                                    // floppy0_avalon_master_agent:cp_data -> router:sink_data
	wire          floppy0_avalon_master_agent_cp_ready;                                                                   // router:sink_ready -> floppy0_avalon_master_agent:cp_ready
	wire          floppy0_avalon_master_agent_cp_startofpacket;                                                           // floppy0_avalon_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          floppy0_avalon_master_agent_cp_endofpacket;                                                             // floppy0_avalon_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                                       // router:src_valid -> cmd_demux:sink_valid
	wire  [115:0] router_src_data;                                                                                        // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                                       // cmd_demux:sink_ready -> router:src_ready
	wire   [11:0] router_src_channel;                                                                                     // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                                               // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                                                 // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          hdd0_avalon_master_agent_cp_valid;                                                                      // hdd0_avalon_master_agent:cp_valid -> router_001:sink_valid
	wire  [115:0] hdd0_avalon_master_agent_cp_data;                                                                       // hdd0_avalon_master_agent:cp_data -> router_001:sink_data
	wire          hdd0_avalon_master_agent_cp_ready;                                                                      // router_001:sink_ready -> hdd0_avalon_master_agent:cp_ready
	wire          hdd0_avalon_master_agent_cp_startofpacket;                                                              // hdd0_avalon_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          hdd0_avalon_master_agent_cp_endofpacket;                                                                // hdd0_avalon_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                                                   // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [115:0] router_001_src_data;                                                                                    // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                                                   // cmd_demux_001:sink_ready -> router_001:src_ready
	wire   [11:0] router_001_src_channel;                                                                                 // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                                           // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                                             // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          hdd1_avalon_master_agent_cp_valid;                                                                      // hdd1_avalon_master_agent:cp_valid -> router_002:sink_valid
	wire  [115:0] hdd1_avalon_master_agent_cp_data;                                                                       // hdd1_avalon_master_agent:cp_data -> router_002:sink_data
	wire          hdd1_avalon_master_agent_cp_ready;                                                                      // router_002:sink_ready -> hdd1_avalon_master_agent:cp_ready
	wire          hdd1_avalon_master_agent_cp_startofpacket;                                                              // hdd1_avalon_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          hdd1_avalon_master_agent_cp_endofpacket;                                                                // hdd1_avalon_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                                                   // router_002:src_valid -> cmd_demux_002:sink_valid
	wire  [115:0] router_002_src_data;                                                                                    // router_002:src_data -> cmd_demux_002:sink_data
	wire          router_002_src_ready;                                                                                   // cmd_demux_002:sink_ready -> router_002:src_ready
	wire   [11:0] router_002_src_channel;                                                                                 // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_startofpacket;                                                                           // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          router_002_src_endofpacket;                                                                             // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          mm_bridge_m0_agent_cp_valid;                                                                            // mm_bridge_m0_agent:cp_valid -> router_003:sink_valid
	wire  [115:0] mm_bridge_m0_agent_cp_data;                                                                             // mm_bridge_m0_agent:cp_data -> router_003:sink_data
	wire          mm_bridge_m0_agent_cp_ready;                                                                            // router_003:sink_ready -> mm_bridge_m0_agent:cp_ready
	wire          mm_bridge_m0_agent_cp_startofpacket;                                                                    // mm_bridge_m0_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          mm_bridge_m0_agent_cp_endofpacket;                                                                      // mm_bridge_m0_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          pc_dma_avalon_master_agent_cp_valid;                                                                    // pc_dma_avalon_master_agent:cp_valid -> router_004:sink_valid
	wire   [88:0] pc_dma_avalon_master_agent_cp_data;                                                                     // pc_dma_avalon_master_agent:cp_data -> router_004:sink_data
	wire          pc_dma_avalon_master_agent_cp_ready;                                                                    // router_004:sink_ready -> pc_dma_avalon_master_agent:cp_ready
	wire          pc_dma_avalon_master_agent_cp_startofpacket;                                                            // pc_dma_avalon_master_agent:cp_startofpacket -> router_004:sink_startofpacket
	wire          pc_dma_avalon_master_agent_cp_endofpacket;                                                              // pc_dma_avalon_master_agent:cp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                                                   // router_004:src_valid -> cmd_demux_004:sink_valid
	wire   [88:0] router_004_src_data;                                                                                    // router_004:src_data -> cmd_demux_004:sink_data
	wire          router_004_src_ready;                                                                                   // cmd_demux_004:sink_ready -> router_004:src_ready
	wire   [11:0] router_004_src_channel;                                                                                 // router_004:src_channel -> cmd_demux_004:sink_channel
	wire          router_004_src_startofpacket;                                                                           // router_004:src_startofpacket -> cmd_demux_004:sink_startofpacket
	wire          router_004_src_endofpacket;                                                                             // router_004:src_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          pc_bus_avalon_sdram_master_agent_cp_valid;                                                              // pc_bus_avalon_sdram_master_agent:cp_valid -> router_005:sink_valid
	wire  [115:0] pc_bus_avalon_sdram_master_agent_cp_data;                                                               // pc_bus_avalon_sdram_master_agent:cp_data -> router_005:sink_data
	wire          pc_bus_avalon_sdram_master_agent_cp_ready;                                                              // router_005:sink_ready -> pc_bus_avalon_sdram_master_agent:cp_ready
	wire          pc_bus_avalon_sdram_master_agent_cp_startofpacket;                                                      // pc_bus_avalon_sdram_master_agent:cp_startofpacket -> router_005:sink_startofpacket
	wire          pc_bus_avalon_sdram_master_agent_cp_endofpacket;                                                        // pc_bus_avalon_sdram_master_agent:cp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                                                   // router_005:src_valid -> cmd_demux_005:sink_valid
	wire  [115:0] router_005_src_data;                                                                                    // router_005:src_data -> cmd_demux_005:sink_data
	wire          router_005_src_ready;                                                                                   // cmd_demux_005:sink_ready -> router_005:src_ready
	wire   [11:0] router_005_src_channel;                                                                                 // router_005:src_channel -> cmd_demux_005:sink_channel
	wire          router_005_src_startofpacket;                                                                           // router_005:src_startofpacket -> cmd_demux_005:sink_startofpacket
	wire          router_005_src_endofpacket;                                                                             // router_005:src_endofpacket -> cmd_demux_005:sink_endofpacket
	wire          driver_sd_avalon_slave_0_agent_rp_valid;                                                                // driver_sd_avalon_slave_0_agent:rp_valid -> router_006:sink_valid
	wire  [115:0] driver_sd_avalon_slave_0_agent_rp_data;                                                                 // driver_sd_avalon_slave_0_agent:rp_data -> router_006:sink_data
	wire          driver_sd_avalon_slave_0_agent_rp_ready;                                                                // router_006:sink_ready -> driver_sd_avalon_slave_0_agent:rp_ready
	wire          driver_sd_avalon_slave_0_agent_rp_startofpacket;                                                        // driver_sd_avalon_slave_0_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          driver_sd_avalon_slave_0_agent_rp_endofpacket;                                                          // driver_sd_avalon_slave_0_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                                                   // router_006:src_valid -> rsp_demux:sink_valid
	wire  [115:0] router_006_src_data;                                                                                    // router_006:src_data -> rsp_demux:sink_data
	wire          router_006_src_ready;                                                                                   // rsp_demux:sink_ready -> router_006:src_ready
	wire   [11:0] router_006_src_channel;                                                                                 // router_006:src_channel -> rsp_demux:sink_channel
	wire          router_006_src_startofpacket;                                                                           // router_006:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_006_src_endofpacket;                                                                             // router_006:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          pc_bus_ctrl_agent_rp_valid;                                                                             // pc_bus_ctrl_agent:rp_valid -> router_007:sink_valid
	wire  [115:0] pc_bus_ctrl_agent_rp_data;                                                                              // pc_bus_ctrl_agent:rp_data -> router_007:sink_data
	wire          pc_bus_ctrl_agent_rp_ready;                                                                             // router_007:sink_ready -> pc_bus_ctrl_agent:rp_ready
	wire          pc_bus_ctrl_agent_rp_startofpacket;                                                                     // pc_bus_ctrl_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          pc_bus_ctrl_agent_rp_endofpacket;                                                                       // pc_bus_ctrl_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                                                   // router_007:src_valid -> rsp_demux_001:sink_valid
	wire  [115:0] router_007_src_data;                                                                                    // router_007:src_data -> rsp_demux_001:sink_data
	wire          router_007_src_ready;                                                                                   // rsp_demux_001:sink_ready -> router_007:src_ready
	wire   [11:0] router_007_src_channel;                                                                                 // router_007:src_channel -> rsp_demux_001:sink_channel
	wire          router_007_src_startofpacket;                                                                           // router_007:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_007_src_endofpacket;                                                                             // router_007:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          floppy0_mgmt_agent_rp_valid;                                                                            // floppy0_mgmt_agent:rp_valid -> router_008:sink_valid
	wire  [115:0] floppy0_mgmt_agent_rp_data;                                                                             // floppy0_mgmt_agent:rp_data -> router_008:sink_data
	wire          floppy0_mgmt_agent_rp_ready;                                                                            // router_008:sink_ready -> floppy0_mgmt_agent:rp_ready
	wire          floppy0_mgmt_agent_rp_startofpacket;                                                                    // floppy0_mgmt_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          floppy0_mgmt_agent_rp_endofpacket;                                                                      // floppy0_mgmt_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                                                   // router_008:src_valid -> rsp_demux_002:sink_valid
	wire  [115:0] router_008_src_data;                                                                                    // router_008:src_data -> rsp_demux_002:sink_data
	wire          router_008_src_ready;                                                                                   // rsp_demux_002:sink_ready -> router_008:src_ready
	wire   [11:0] router_008_src_channel;                                                                                 // router_008:src_channel -> rsp_demux_002:sink_channel
	wire          router_008_src_startofpacket;                                                                           // router_008:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_008_src_endofpacket;                                                                             // router_008:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          hdd0_mgmt_agent_rp_valid;                                                                               // hdd0_mgmt_agent:rp_valid -> router_009:sink_valid
	wire  [115:0] hdd0_mgmt_agent_rp_data;                                                                                // hdd0_mgmt_agent:rp_data -> router_009:sink_data
	wire          hdd0_mgmt_agent_rp_ready;                                                                               // router_009:sink_ready -> hdd0_mgmt_agent:rp_ready
	wire          hdd0_mgmt_agent_rp_startofpacket;                                                                       // hdd0_mgmt_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          hdd0_mgmt_agent_rp_endofpacket;                                                                         // hdd0_mgmt_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                                                   // router_009:src_valid -> rsp_demux_003:sink_valid
	wire  [115:0] router_009_src_data;                                                                                    // router_009:src_data -> rsp_demux_003:sink_data
	wire          router_009_src_ready;                                                                                   // rsp_demux_003:sink_ready -> router_009:src_ready
	wire   [11:0] router_009_src_channel;                                                                                 // router_009:src_channel -> rsp_demux_003:sink_channel
	wire          router_009_src_startofpacket;                                                                           // router_009:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_009_src_endofpacket;                                                                             // router_009:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          rtc_mgmt_agent_rp_valid;                                                                                // rtc_mgmt_agent:rp_valid -> router_010:sink_valid
	wire  [115:0] rtc_mgmt_agent_rp_data;                                                                                 // rtc_mgmt_agent:rp_data -> router_010:sink_data
	wire          rtc_mgmt_agent_rp_ready;                                                                                // router_010:sink_ready -> rtc_mgmt_agent:rp_ready
	wire          rtc_mgmt_agent_rp_startofpacket;                                                                        // rtc_mgmt_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          rtc_mgmt_agent_rp_endofpacket;                                                                          // rtc_mgmt_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                                                   // router_010:src_valid -> rsp_demux_004:sink_valid
	wire  [115:0] router_010_src_data;                                                                                    // router_010:src_data -> rsp_demux_004:sink_data
	wire          router_010_src_ready;                                                                                   // rsp_demux_004:sink_ready -> router_010:src_ready
	wire   [11:0] router_010_src_channel;                                                                                 // router_010:src_channel -> rsp_demux_004:sink_channel
	wire          router_010_src_startofpacket;                                                                           // router_010:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_010_src_endofpacket;                                                                             // router_010:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          sound_mgmt_agent_rp_valid;                                                                              // sound_mgmt_agent:rp_valid -> router_011:sink_valid
	wire  [115:0] sound_mgmt_agent_rp_data;                                                                               // sound_mgmt_agent:rp_data -> router_011:sink_data
	wire          sound_mgmt_agent_rp_ready;                                                                              // router_011:sink_ready -> sound_mgmt_agent:rp_ready
	wire          sound_mgmt_agent_rp_startofpacket;                                                                      // sound_mgmt_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          sound_mgmt_agent_rp_endofpacket;                                                                        // sound_mgmt_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                                                   // router_011:src_valid -> rsp_demux_005:sink_valid
	wire  [115:0] router_011_src_data;                                                                                    // router_011:src_data -> rsp_demux_005:sink_data
	wire          router_011_src_ready;                                                                                   // rsp_demux_005:sink_ready -> router_011:src_ready
	wire   [11:0] router_011_src_channel;                                                                                 // router_011:src_channel -> rsp_demux_005:sink_channel
	wire          router_011_src_startofpacket;                                                                           // router_011:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_011_src_endofpacket;                                                                             // router_011:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          pit_mgmt_agent_rp_valid;                                                                                // pit_mgmt_agent:rp_valid -> router_012:sink_valid
	wire  [115:0] pit_mgmt_agent_rp_data;                                                                                 // pit_mgmt_agent:rp_data -> router_012:sink_data
	wire          pit_mgmt_agent_rp_ready;                                                                                // router_012:sink_ready -> pit_mgmt_agent:rp_ready
	wire          pit_mgmt_agent_rp_startofpacket;                                                                        // pit_mgmt_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          pit_mgmt_agent_rp_endofpacket;                                                                          // pit_mgmt_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                                                   // router_012:src_valid -> rsp_demux_006:sink_valid
	wire  [115:0] router_012_src_data;                                                                                    // router_012:src_data -> rsp_demux_006:sink_data
	wire          router_012_src_ready;                                                                                   // rsp_demux_006:sink_ready -> router_012:src_ready
	wire   [11:0] router_012_src_channel;                                                                                 // router_012:src_channel -> rsp_demux_006:sink_channel
	wire          router_012_src_startofpacket;                                                                           // router_012:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_012_src_endofpacket;                                                                             // router_012:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          hdd1_mgmt_agent_rp_valid;                                                                               // hdd1_mgmt_agent:rp_valid -> router_013:sink_valid
	wire  [115:0] hdd1_mgmt_agent_rp_data;                                                                                // hdd1_mgmt_agent:rp_data -> router_013:sink_data
	wire          hdd1_mgmt_agent_rp_ready;                                                                               // router_013:sink_ready -> hdd1_mgmt_agent:rp_ready
	wire          hdd1_mgmt_agent_rp_startofpacket;                                                                       // hdd1_mgmt_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          hdd1_mgmt_agent_rp_endofpacket;                                                                         // hdd1_mgmt_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                                                   // router_013:src_valid -> rsp_demux_007:sink_valid
	wire  [115:0] router_013_src_data;                                                                                    // router_013:src_data -> rsp_demux_007:sink_data
	wire          router_013_src_ready;                                                                                   // rsp_demux_007:sink_ready -> router_013:src_ready
	wire   [11:0] router_013_src_channel;                                                                                 // router_013:src_channel -> rsp_demux_007:sink_channel
	wire          router_013_src_startofpacket;                                                                           // router_013:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_013_src_endofpacket;                                                                             // router_013:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          floppy0_sd_slave_agent_rp_valid;                                                                        // floppy0_sd_slave_agent:rp_valid -> router_014:sink_valid
	wire   [88:0] floppy0_sd_slave_agent_rp_data;                                                                         // floppy0_sd_slave_agent:rp_data -> router_014:sink_data
	wire          floppy0_sd_slave_agent_rp_ready;                                                                        // router_014:sink_ready -> floppy0_sd_slave_agent:rp_ready
	wire          floppy0_sd_slave_agent_rp_startofpacket;                                                                // floppy0_sd_slave_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          floppy0_sd_slave_agent_rp_endofpacket;                                                                  // floppy0_sd_slave_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                                                   // router_014:src_valid -> rsp_demux_008:sink_valid
	wire   [88:0] router_014_src_data;                                                                                    // router_014:src_data -> rsp_demux_008:sink_data
	wire          router_014_src_ready;                                                                                   // rsp_demux_008:sink_ready -> router_014:src_ready
	wire   [11:0] router_014_src_channel;                                                                                 // router_014:src_channel -> rsp_demux_008:sink_channel
	wire          router_014_src_startofpacket;                                                                           // router_014:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_014_src_endofpacket;                                                                             // router_014:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          hdd0_sd_slave_agent_rp_valid;                                                                           // hdd0_sd_slave_agent:rp_valid -> router_015:sink_valid
	wire  [115:0] hdd0_sd_slave_agent_rp_data;                                                                            // hdd0_sd_slave_agent:rp_data -> router_015:sink_data
	wire          hdd0_sd_slave_agent_rp_ready;                                                                           // router_015:sink_ready -> hdd0_sd_slave_agent:rp_ready
	wire          hdd0_sd_slave_agent_rp_startofpacket;                                                                   // hdd0_sd_slave_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          hdd0_sd_slave_agent_rp_endofpacket;                                                                     // hdd0_sd_slave_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                                                   // router_015:src_valid -> rsp_demux_009:sink_valid
	wire  [115:0] router_015_src_data;                                                                                    // router_015:src_data -> rsp_demux_009:sink_data
	wire          router_015_src_ready;                                                                                   // rsp_demux_009:sink_ready -> router_015:src_ready
	wire   [11:0] router_015_src_channel;                                                                                 // router_015:src_channel -> rsp_demux_009:sink_channel
	wire          router_015_src_startofpacket;                                                                           // router_015:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_015_src_endofpacket;                                                                             // router_015:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          hdd1_sd_slave_agent_rp_valid;                                                                           // hdd1_sd_slave_agent:rp_valid -> router_016:sink_valid
	wire  [115:0] hdd1_sd_slave_agent_rp_data;                                                                            // hdd1_sd_slave_agent:rp_data -> router_016:sink_data
	wire          hdd1_sd_slave_agent_rp_ready;                                                                           // router_016:sink_ready -> hdd1_sd_slave_agent:rp_ready
	wire          hdd1_sd_slave_agent_rp_startofpacket;                                                                   // hdd1_sd_slave_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          hdd1_sd_slave_agent_rp_endofpacket;                                                                     // hdd1_sd_slave_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                                                   // router_016:src_valid -> rsp_demux_010:sink_valid
	wire  [115:0] router_016_src_data;                                                                                    // router_016:src_data -> rsp_demux_010:sink_data
	wire          router_016_src_ready;                                                                                   // rsp_demux_010:sink_ready -> router_016:src_ready
	wire   [11:0] router_016_src_channel;                                                                                 // router_016:src_channel -> rsp_demux_010:sink_channel
	wire          router_016_src_startofpacket;                                                                           // router_016:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_016_src_endofpacket;                                                                             // router_016:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          address_span_extender_windowed_slave_agent_rp_valid;                                                    // address_span_extender_windowed_slave_agent:rp_valid -> router_017:sink_valid
	wire  [151:0] address_span_extender_windowed_slave_agent_rp_data;                                                     // address_span_extender_windowed_slave_agent:rp_data -> router_017:sink_data
	wire          address_span_extender_windowed_slave_agent_rp_ready;                                                    // router_017:sink_ready -> address_span_extender_windowed_slave_agent:rp_ready
	wire          address_span_extender_windowed_slave_agent_rp_startofpacket;                                            // address_span_extender_windowed_slave_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          address_span_extender_windowed_slave_agent_rp_endofpacket;                                              // address_span_extender_windowed_slave_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                                                   // router_017:src_valid -> rsp_demux_011:sink_valid
	wire  [151:0] router_017_src_data;                                                                                    // router_017:src_data -> rsp_demux_011:sink_data
	wire          router_017_src_ready;                                                                                   // rsp_demux_011:sink_ready -> router_017:src_ready
	wire   [11:0] router_017_src_channel;                                                                                 // router_017:src_channel -> rsp_demux_011:sink_channel
	wire          router_017_src_startofpacket;                                                                           // router_017:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_017_src_endofpacket;                                                                             // router_017:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          router_003_src_valid;                                                                                   // router_003:src_valid -> mm_bridge_m0_limiter:cmd_sink_valid
	wire  [115:0] router_003_src_data;                                                                                    // router_003:src_data -> mm_bridge_m0_limiter:cmd_sink_data
	wire          router_003_src_ready;                                                                                   // mm_bridge_m0_limiter:cmd_sink_ready -> router_003:src_ready
	wire   [11:0] router_003_src_channel;                                                                                 // router_003:src_channel -> mm_bridge_m0_limiter:cmd_sink_channel
	wire          router_003_src_startofpacket;                                                                           // router_003:src_startofpacket -> mm_bridge_m0_limiter:cmd_sink_startofpacket
	wire          router_003_src_endofpacket;                                                                             // router_003:src_endofpacket -> mm_bridge_m0_limiter:cmd_sink_endofpacket
	wire  [115:0] mm_bridge_m0_limiter_cmd_src_data;                                                                      // mm_bridge_m0_limiter:cmd_src_data -> cmd_demux_003:sink_data
	wire          mm_bridge_m0_limiter_cmd_src_ready;                                                                     // cmd_demux_003:sink_ready -> mm_bridge_m0_limiter:cmd_src_ready
	wire   [11:0] mm_bridge_m0_limiter_cmd_src_channel;                                                                   // mm_bridge_m0_limiter:cmd_src_channel -> cmd_demux_003:sink_channel
	wire          mm_bridge_m0_limiter_cmd_src_startofpacket;                                                             // mm_bridge_m0_limiter:cmd_src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          mm_bridge_m0_limiter_cmd_src_endofpacket;                                                               // mm_bridge_m0_limiter:cmd_src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          rsp_mux_003_src_valid;                                                                                  // rsp_mux_003:src_valid -> mm_bridge_m0_limiter:rsp_sink_valid
	wire  [115:0] rsp_mux_003_src_data;                                                                                   // rsp_mux_003:src_data -> mm_bridge_m0_limiter:rsp_sink_data
	wire          rsp_mux_003_src_ready;                                                                                  // mm_bridge_m0_limiter:rsp_sink_ready -> rsp_mux_003:src_ready
	wire   [11:0] rsp_mux_003_src_channel;                                                                                // rsp_mux_003:src_channel -> mm_bridge_m0_limiter:rsp_sink_channel
	wire          rsp_mux_003_src_startofpacket;                                                                          // rsp_mux_003:src_startofpacket -> mm_bridge_m0_limiter:rsp_sink_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                                            // rsp_mux_003:src_endofpacket -> mm_bridge_m0_limiter:rsp_sink_endofpacket
	wire          mm_bridge_m0_limiter_rsp_src_valid;                                                                     // mm_bridge_m0_limiter:rsp_src_valid -> mm_bridge_m0_agent:rp_valid
	wire  [115:0] mm_bridge_m0_limiter_rsp_src_data;                                                                      // mm_bridge_m0_limiter:rsp_src_data -> mm_bridge_m0_agent:rp_data
	wire          mm_bridge_m0_limiter_rsp_src_ready;                                                                     // mm_bridge_m0_agent:rp_ready -> mm_bridge_m0_limiter:rsp_src_ready
	wire   [11:0] mm_bridge_m0_limiter_rsp_src_channel;                                                                   // mm_bridge_m0_limiter:rsp_src_channel -> mm_bridge_m0_agent:rp_channel
	wire          mm_bridge_m0_limiter_rsp_src_startofpacket;                                                             // mm_bridge_m0_limiter:rsp_src_startofpacket -> mm_bridge_m0_agent:rp_startofpacket
	wire          mm_bridge_m0_limiter_rsp_src_endofpacket;                                                               // mm_bridge_m0_limiter:rsp_src_endofpacket -> mm_bridge_m0_agent:rp_endofpacket
	wire          cmd_mux_008_src_valid;                                                                                  // cmd_mux_008:src_valid -> floppy0_sd_slave_burst_adapter:sink0_valid
	wire   [88:0] cmd_mux_008_src_data;                                                                                   // cmd_mux_008:src_data -> floppy0_sd_slave_burst_adapter:sink0_data
	wire          cmd_mux_008_src_ready;                                                                                  // floppy0_sd_slave_burst_adapter:sink0_ready -> cmd_mux_008:src_ready
	wire   [11:0] cmd_mux_008_src_channel;                                                                                // cmd_mux_008:src_channel -> floppy0_sd_slave_burst_adapter:sink0_channel
	wire          cmd_mux_008_src_startofpacket;                                                                          // cmd_mux_008:src_startofpacket -> floppy0_sd_slave_burst_adapter:sink0_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                                            // cmd_mux_008:src_endofpacket -> floppy0_sd_slave_burst_adapter:sink0_endofpacket
	wire          floppy0_sd_slave_burst_adapter_source0_valid;                                                           // floppy0_sd_slave_burst_adapter:source0_valid -> floppy0_sd_slave_agent:cp_valid
	wire   [88:0] floppy0_sd_slave_burst_adapter_source0_data;                                                            // floppy0_sd_slave_burst_adapter:source0_data -> floppy0_sd_slave_agent:cp_data
	wire          floppy0_sd_slave_burst_adapter_source0_ready;                                                           // floppy0_sd_slave_agent:cp_ready -> floppy0_sd_slave_burst_adapter:source0_ready
	wire   [11:0] floppy0_sd_slave_burst_adapter_source0_channel;                                                         // floppy0_sd_slave_burst_adapter:source0_channel -> floppy0_sd_slave_agent:cp_channel
	wire          floppy0_sd_slave_burst_adapter_source0_startofpacket;                                                   // floppy0_sd_slave_burst_adapter:source0_startofpacket -> floppy0_sd_slave_agent:cp_startofpacket
	wire          floppy0_sd_slave_burst_adapter_source0_endofpacket;                                                     // floppy0_sd_slave_burst_adapter:source0_endofpacket -> floppy0_sd_slave_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                                                   // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [115:0] cmd_demux_src0_data;                                                                                    // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                                                   // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [11:0] cmd_demux_src0_channel;                                                                                 // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                                           // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                                             // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                                               // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [115:0] cmd_demux_001_src0_data;                                                                                // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                                               // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire   [11:0] cmd_demux_001_src0_channel;                                                                             // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                                       // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                                         // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                                               // cmd_demux_002:src0_valid -> cmd_mux:sink2_valid
	wire  [115:0] cmd_demux_002_src0_data;                                                                                // cmd_demux_002:src0_data -> cmd_mux:sink2_data
	wire          cmd_demux_002_src0_ready;                                                                               // cmd_mux:sink2_ready -> cmd_demux_002:src0_ready
	wire   [11:0] cmd_demux_002_src0_channel;                                                                             // cmd_demux_002:src0_channel -> cmd_mux:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                                                       // cmd_demux_002:src0_startofpacket -> cmd_mux:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                                         // cmd_demux_002:src0_endofpacket -> cmd_mux:sink2_endofpacket
	wire          cmd_demux_003_src0_valid;                                                                               // cmd_demux_003:src0_valid -> cmd_mux:sink3_valid
	wire  [115:0] cmd_demux_003_src0_data;                                                                                // cmd_demux_003:src0_data -> cmd_mux:sink3_data
	wire          cmd_demux_003_src0_ready;                                                                               // cmd_mux:sink3_ready -> cmd_demux_003:src0_ready
	wire   [11:0] cmd_demux_003_src0_channel;                                                                             // cmd_demux_003:src0_channel -> cmd_mux:sink3_channel
	wire          cmd_demux_003_src0_startofpacket;                                                                       // cmd_demux_003:src0_startofpacket -> cmd_mux:sink3_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                                         // cmd_demux_003:src0_endofpacket -> cmd_mux:sink3_endofpacket
	wire          cmd_demux_003_src1_valid;                                                                               // cmd_demux_003:src1_valid -> cmd_mux_001:sink0_valid
	wire  [115:0] cmd_demux_003_src1_data;                                                                                // cmd_demux_003:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_003_src1_ready;                                                                               // cmd_mux_001:sink0_ready -> cmd_demux_003:src1_ready
	wire   [11:0] cmd_demux_003_src1_channel;                                                                             // cmd_demux_003:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_003_src1_startofpacket;                                                                       // cmd_demux_003:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_003_src1_endofpacket;                                                                         // cmd_demux_003:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_003_src2_valid;                                                                               // cmd_demux_003:src2_valid -> cmd_mux_002:sink0_valid
	wire  [115:0] cmd_demux_003_src2_data;                                                                                // cmd_demux_003:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_003_src2_ready;                                                                               // cmd_mux_002:sink0_ready -> cmd_demux_003:src2_ready
	wire   [11:0] cmd_demux_003_src2_channel;                                                                             // cmd_demux_003:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_003_src2_startofpacket;                                                                       // cmd_demux_003:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_003_src2_endofpacket;                                                                         // cmd_demux_003:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_003_src3_valid;                                                                               // cmd_demux_003:src3_valid -> cmd_mux_003:sink0_valid
	wire  [115:0] cmd_demux_003_src3_data;                                                                                // cmd_demux_003:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_003_src3_ready;                                                                               // cmd_mux_003:sink0_ready -> cmd_demux_003:src3_ready
	wire   [11:0] cmd_demux_003_src3_channel;                                                                             // cmd_demux_003:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_003_src3_startofpacket;                                                                       // cmd_demux_003:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_003_src3_endofpacket;                                                                         // cmd_demux_003:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_003_src4_valid;                                                                               // cmd_demux_003:src4_valid -> cmd_mux_004:sink0_valid
	wire  [115:0] cmd_demux_003_src4_data;                                                                                // cmd_demux_003:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_003_src4_ready;                                                                               // cmd_mux_004:sink0_ready -> cmd_demux_003:src4_ready
	wire   [11:0] cmd_demux_003_src4_channel;                                                                             // cmd_demux_003:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_003_src4_startofpacket;                                                                       // cmd_demux_003:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_003_src4_endofpacket;                                                                         // cmd_demux_003:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_003_src5_valid;                                                                               // cmd_demux_003:src5_valid -> cmd_mux_005:sink0_valid
	wire  [115:0] cmd_demux_003_src5_data;                                                                                // cmd_demux_003:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_003_src5_ready;                                                                               // cmd_mux_005:sink0_ready -> cmd_demux_003:src5_ready
	wire   [11:0] cmd_demux_003_src5_channel;                                                                             // cmd_demux_003:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_003_src5_startofpacket;                                                                       // cmd_demux_003:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_003_src5_endofpacket;                                                                         // cmd_demux_003:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_003_src6_valid;                                                                               // cmd_demux_003:src6_valid -> cmd_mux_006:sink0_valid
	wire  [115:0] cmd_demux_003_src6_data;                                                                                // cmd_demux_003:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_003_src6_ready;                                                                               // cmd_mux_006:sink0_ready -> cmd_demux_003:src6_ready
	wire   [11:0] cmd_demux_003_src6_channel;                                                                             // cmd_demux_003:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_003_src6_startofpacket;                                                                       // cmd_demux_003:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_003_src6_endofpacket;                                                                         // cmd_demux_003:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_003_src7_valid;                                                                               // cmd_demux_003:src7_valid -> cmd_mux_007:sink0_valid
	wire  [115:0] cmd_demux_003_src7_data;                                                                                // cmd_demux_003:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_003_src7_ready;                                                                               // cmd_mux_007:sink0_ready -> cmd_demux_003:src7_ready
	wire   [11:0] cmd_demux_003_src7_channel;                                                                             // cmd_demux_003:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_003_src7_startofpacket;                                                                       // cmd_demux_003:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_003_src7_endofpacket;                                                                         // cmd_demux_003:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_003_src9_valid;                                                                               // cmd_demux_003:src9_valid -> cmd_mux_009:sink0_valid
	wire  [115:0] cmd_demux_003_src9_data;                                                                                // cmd_demux_003:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_003_src9_ready;                                                                               // cmd_mux_009:sink0_ready -> cmd_demux_003:src9_ready
	wire   [11:0] cmd_demux_003_src9_channel;                                                                             // cmd_demux_003:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_003_src9_startofpacket;                                                                       // cmd_demux_003:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_003_src9_endofpacket;                                                                         // cmd_demux_003:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_003_src10_valid;                                                                              // cmd_demux_003:src10_valid -> cmd_mux_010:sink0_valid
	wire  [115:0] cmd_demux_003_src10_data;                                                                               // cmd_demux_003:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_003_src10_ready;                                                                              // cmd_mux_010:sink0_ready -> cmd_demux_003:src10_ready
	wire   [11:0] cmd_demux_003_src10_channel;                                                                            // cmd_demux_003:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_003_src10_startofpacket;                                                                      // cmd_demux_003:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_003_src10_endofpacket;                                                                        // cmd_demux_003:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          rsp_demux_src0_valid;                                                                                   // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [115:0] rsp_demux_src0_data;                                                                                    // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                                                   // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [11:0] rsp_demux_src0_channel;                                                                                 // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                                           // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                                             // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                                                   // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [115:0] rsp_demux_src1_data;                                                                                    // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                                                   // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire   [11:0] rsp_demux_src1_channel;                                                                                 // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                                                           // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                                             // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_src2_valid;                                                                                   // rsp_demux:src2_valid -> rsp_mux_002:sink0_valid
	wire  [115:0] rsp_demux_src2_data;                                                                                    // rsp_demux:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_src2_ready;                                                                                   // rsp_mux_002:sink0_ready -> rsp_demux:src2_ready
	wire   [11:0] rsp_demux_src2_channel;                                                                                 // rsp_demux:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_src2_startofpacket;                                                                           // rsp_demux:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_src2_endofpacket;                                                                             // rsp_demux:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_src3_valid;                                                                                   // rsp_demux:src3_valid -> rsp_mux_003:sink0_valid
	wire  [115:0] rsp_demux_src3_data;                                                                                    // rsp_demux:src3_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_src3_ready;                                                                                   // rsp_mux_003:sink0_ready -> rsp_demux:src3_ready
	wire   [11:0] rsp_demux_src3_channel;                                                                                 // rsp_demux:src3_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_src3_startofpacket;                                                                           // rsp_demux:src3_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_src3_endofpacket;                                                                             // rsp_demux:src3_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                               // rsp_demux_001:src0_valid -> rsp_mux_003:sink1_valid
	wire  [115:0] rsp_demux_001_src0_data;                                                                                // rsp_demux_001:src0_data -> rsp_mux_003:sink1_data
	wire          rsp_demux_001_src0_ready;                                                                               // rsp_mux_003:sink1_ready -> rsp_demux_001:src0_ready
	wire   [11:0] rsp_demux_001_src0_channel;                                                                             // rsp_demux_001:src0_channel -> rsp_mux_003:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                                       // rsp_demux_001:src0_startofpacket -> rsp_mux_003:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                                         // rsp_demux_001:src0_endofpacket -> rsp_mux_003:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                                               // rsp_demux_002:src0_valid -> rsp_mux_003:sink2_valid
	wire  [115:0] rsp_demux_002_src0_data;                                                                                // rsp_demux_002:src0_data -> rsp_mux_003:sink2_data
	wire          rsp_demux_002_src0_ready;                                                                               // rsp_mux_003:sink2_ready -> rsp_demux_002:src0_ready
	wire   [11:0] rsp_demux_002_src0_channel;                                                                             // rsp_demux_002:src0_channel -> rsp_mux_003:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                                       // rsp_demux_002:src0_startofpacket -> rsp_mux_003:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                                         // rsp_demux_002:src0_endofpacket -> rsp_mux_003:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                                               // rsp_demux_003:src0_valid -> rsp_mux_003:sink3_valid
	wire  [115:0] rsp_demux_003_src0_data;                                                                                // rsp_demux_003:src0_data -> rsp_mux_003:sink3_data
	wire          rsp_demux_003_src0_ready;                                                                               // rsp_mux_003:sink3_ready -> rsp_demux_003:src0_ready
	wire   [11:0] rsp_demux_003_src0_channel;                                                                             // rsp_demux_003:src0_channel -> rsp_mux_003:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                                       // rsp_demux_003:src0_startofpacket -> rsp_mux_003:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                                         // rsp_demux_003:src0_endofpacket -> rsp_mux_003:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                                               // rsp_demux_004:src0_valid -> rsp_mux_003:sink4_valid
	wire  [115:0] rsp_demux_004_src0_data;                                                                                // rsp_demux_004:src0_data -> rsp_mux_003:sink4_data
	wire          rsp_demux_004_src0_ready;                                                                               // rsp_mux_003:sink4_ready -> rsp_demux_004:src0_ready
	wire   [11:0] rsp_demux_004_src0_channel;                                                                             // rsp_demux_004:src0_channel -> rsp_mux_003:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                                       // rsp_demux_004:src0_startofpacket -> rsp_mux_003:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                                         // rsp_demux_004:src0_endofpacket -> rsp_mux_003:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                                               // rsp_demux_005:src0_valid -> rsp_mux_003:sink5_valid
	wire  [115:0] rsp_demux_005_src0_data;                                                                                // rsp_demux_005:src0_data -> rsp_mux_003:sink5_data
	wire          rsp_demux_005_src0_ready;                                                                               // rsp_mux_003:sink5_ready -> rsp_demux_005:src0_ready
	wire   [11:0] rsp_demux_005_src0_channel;                                                                             // rsp_demux_005:src0_channel -> rsp_mux_003:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                                       // rsp_demux_005:src0_startofpacket -> rsp_mux_003:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                                         // rsp_demux_005:src0_endofpacket -> rsp_mux_003:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                                               // rsp_demux_006:src0_valid -> rsp_mux_003:sink6_valid
	wire  [115:0] rsp_demux_006_src0_data;                                                                                // rsp_demux_006:src0_data -> rsp_mux_003:sink6_data
	wire          rsp_demux_006_src0_ready;                                                                               // rsp_mux_003:sink6_ready -> rsp_demux_006:src0_ready
	wire   [11:0] rsp_demux_006_src0_channel;                                                                             // rsp_demux_006:src0_channel -> rsp_mux_003:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                                       // rsp_demux_006:src0_startofpacket -> rsp_mux_003:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                                         // rsp_demux_006:src0_endofpacket -> rsp_mux_003:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                                               // rsp_demux_007:src0_valid -> rsp_mux_003:sink7_valid
	wire  [115:0] rsp_demux_007_src0_data;                                                                                // rsp_demux_007:src0_data -> rsp_mux_003:sink7_data
	wire          rsp_demux_007_src0_ready;                                                                               // rsp_mux_003:sink7_ready -> rsp_demux_007:src0_ready
	wire   [11:0] rsp_demux_007_src0_channel;                                                                             // rsp_demux_007:src0_channel -> rsp_mux_003:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                                       // rsp_demux_007:src0_startofpacket -> rsp_mux_003:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                                         // rsp_demux_007:src0_endofpacket -> rsp_mux_003:sink7_endofpacket
	wire          rsp_demux_009_src0_valid;                                                                               // rsp_demux_009:src0_valid -> rsp_mux_003:sink9_valid
	wire  [115:0] rsp_demux_009_src0_data;                                                                                // rsp_demux_009:src0_data -> rsp_mux_003:sink9_data
	wire          rsp_demux_009_src0_ready;                                                                               // rsp_mux_003:sink9_ready -> rsp_demux_009:src0_ready
	wire   [11:0] rsp_demux_009_src0_channel;                                                                             // rsp_demux_009:src0_channel -> rsp_mux_003:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                                                       // rsp_demux_009:src0_startofpacket -> rsp_mux_003:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                                         // rsp_demux_009:src0_endofpacket -> rsp_mux_003:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                                               // rsp_demux_010:src0_valid -> rsp_mux_003:sink10_valid
	wire  [115:0] rsp_demux_010_src0_data;                                                                                // rsp_demux_010:src0_data -> rsp_mux_003:sink10_data
	wire          rsp_demux_010_src0_ready;                                                                               // rsp_mux_003:sink10_ready -> rsp_demux_010:src0_ready
	wire   [11:0] rsp_demux_010_src0_channel;                                                                             // rsp_demux_010:src0_channel -> rsp_mux_003:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                                                       // rsp_demux_010:src0_startofpacket -> rsp_mux_003:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                                         // rsp_demux_010:src0_endofpacket -> rsp_mux_003:sink10_endofpacket
	wire          cmd_demux_003_src8_valid;                                                                               // cmd_demux_003:src8_valid -> mm_bridge_m0_to_floppy0_sd_slave_cmd_width_adapter:in_valid
	wire  [115:0] cmd_demux_003_src8_data;                                                                                // cmd_demux_003:src8_data -> mm_bridge_m0_to_floppy0_sd_slave_cmd_width_adapter:in_data
	wire          cmd_demux_003_src8_ready;                                                                               // mm_bridge_m0_to_floppy0_sd_slave_cmd_width_adapter:in_ready -> cmd_demux_003:src8_ready
	wire   [11:0] cmd_demux_003_src8_channel;                                                                             // cmd_demux_003:src8_channel -> mm_bridge_m0_to_floppy0_sd_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_003_src8_startofpacket;                                                                       // cmd_demux_003:src8_startofpacket -> mm_bridge_m0_to_floppy0_sd_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_003_src8_endofpacket;                                                                         // cmd_demux_003:src8_endofpacket -> mm_bridge_m0_to_floppy0_sd_slave_cmd_width_adapter:in_endofpacket
	wire          mm_bridge_m0_to_floppy0_sd_slave_cmd_width_adapter_src_valid;                                           // mm_bridge_m0_to_floppy0_sd_slave_cmd_width_adapter:out_valid -> cmd_mux_008:sink0_valid
	wire   [88:0] mm_bridge_m0_to_floppy0_sd_slave_cmd_width_adapter_src_data;                                            // mm_bridge_m0_to_floppy0_sd_slave_cmd_width_adapter:out_data -> cmd_mux_008:sink0_data
	wire          mm_bridge_m0_to_floppy0_sd_slave_cmd_width_adapter_src_ready;                                           // cmd_mux_008:sink0_ready -> mm_bridge_m0_to_floppy0_sd_slave_cmd_width_adapter:out_ready
	wire   [11:0] mm_bridge_m0_to_floppy0_sd_slave_cmd_width_adapter_src_channel;                                         // mm_bridge_m0_to_floppy0_sd_slave_cmd_width_adapter:out_channel -> cmd_mux_008:sink0_channel
	wire          mm_bridge_m0_to_floppy0_sd_slave_cmd_width_adapter_src_startofpacket;                                   // mm_bridge_m0_to_floppy0_sd_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          mm_bridge_m0_to_floppy0_sd_slave_cmd_width_adapter_src_endofpacket;                                     // mm_bridge_m0_to_floppy0_sd_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_003_src11_valid;                                                                              // cmd_demux_003:src11_valid -> mm_bridge_m0_to_address_span_extender_windowed_slave_cmd_width_adapter:in_valid
	wire  [115:0] cmd_demux_003_src11_data;                                                                               // cmd_demux_003:src11_data -> mm_bridge_m0_to_address_span_extender_windowed_slave_cmd_width_adapter:in_data
	wire          cmd_demux_003_src11_ready;                                                                              // mm_bridge_m0_to_address_span_extender_windowed_slave_cmd_width_adapter:in_ready -> cmd_demux_003:src11_ready
	wire   [11:0] cmd_demux_003_src11_channel;                                                                            // cmd_demux_003:src11_channel -> mm_bridge_m0_to_address_span_extender_windowed_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_003_src11_startofpacket;                                                                      // cmd_demux_003:src11_startofpacket -> mm_bridge_m0_to_address_span_extender_windowed_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_003_src11_endofpacket;                                                                        // cmd_demux_003:src11_endofpacket -> mm_bridge_m0_to_address_span_extender_windowed_slave_cmd_width_adapter:in_endofpacket
	wire          mm_bridge_m0_to_address_span_extender_windowed_slave_cmd_width_adapter_src_valid;                       // mm_bridge_m0_to_address_span_extender_windowed_slave_cmd_width_adapter:out_valid -> cmd_mux_011:sink0_valid
	wire  [151:0] mm_bridge_m0_to_address_span_extender_windowed_slave_cmd_width_adapter_src_data;                        // mm_bridge_m0_to_address_span_extender_windowed_slave_cmd_width_adapter:out_data -> cmd_mux_011:sink0_data
	wire          mm_bridge_m0_to_address_span_extender_windowed_slave_cmd_width_adapter_src_ready;                       // cmd_mux_011:sink0_ready -> mm_bridge_m0_to_address_span_extender_windowed_slave_cmd_width_adapter:out_ready
	wire   [11:0] mm_bridge_m0_to_address_span_extender_windowed_slave_cmd_width_adapter_src_channel;                     // mm_bridge_m0_to_address_span_extender_windowed_slave_cmd_width_adapter:out_channel -> cmd_mux_011:sink0_channel
	wire          mm_bridge_m0_to_address_span_extender_windowed_slave_cmd_width_adapter_src_startofpacket;               // mm_bridge_m0_to_address_span_extender_windowed_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          mm_bridge_m0_to_address_span_extender_windowed_slave_cmd_width_adapter_src_endofpacket;                 // mm_bridge_m0_to_address_span_extender_windowed_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_004_src0_valid;                                                                               // cmd_demux_004:src0_valid -> pc_dma_avalon_master_to_address_span_extender_windowed_slave_cmd_width_adapter:in_valid
	wire   [88:0] cmd_demux_004_src0_data;                                                                                // cmd_demux_004:src0_data -> pc_dma_avalon_master_to_address_span_extender_windowed_slave_cmd_width_adapter:in_data
	wire          cmd_demux_004_src0_ready;                                                                               // pc_dma_avalon_master_to_address_span_extender_windowed_slave_cmd_width_adapter:in_ready -> cmd_demux_004:src0_ready
	wire   [11:0] cmd_demux_004_src0_channel;                                                                             // cmd_demux_004:src0_channel -> pc_dma_avalon_master_to_address_span_extender_windowed_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_004_src0_startofpacket;                                                                       // cmd_demux_004:src0_startofpacket -> pc_dma_avalon_master_to_address_span_extender_windowed_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_004_src0_endofpacket;                                                                         // cmd_demux_004:src0_endofpacket -> pc_dma_avalon_master_to_address_span_extender_windowed_slave_cmd_width_adapter:in_endofpacket
	wire          pc_dma_avalon_master_to_address_span_extender_windowed_slave_cmd_width_adapter_src_valid;               // pc_dma_avalon_master_to_address_span_extender_windowed_slave_cmd_width_adapter:out_valid -> cmd_mux_011:sink1_valid
	wire  [151:0] pc_dma_avalon_master_to_address_span_extender_windowed_slave_cmd_width_adapter_src_data;                // pc_dma_avalon_master_to_address_span_extender_windowed_slave_cmd_width_adapter:out_data -> cmd_mux_011:sink1_data
	wire          pc_dma_avalon_master_to_address_span_extender_windowed_slave_cmd_width_adapter_src_ready;               // cmd_mux_011:sink1_ready -> pc_dma_avalon_master_to_address_span_extender_windowed_slave_cmd_width_adapter:out_ready
	wire   [11:0] pc_dma_avalon_master_to_address_span_extender_windowed_slave_cmd_width_adapter_src_channel;             // pc_dma_avalon_master_to_address_span_extender_windowed_slave_cmd_width_adapter:out_channel -> cmd_mux_011:sink1_channel
	wire          pc_dma_avalon_master_to_address_span_extender_windowed_slave_cmd_width_adapter_src_startofpacket;       // pc_dma_avalon_master_to_address_span_extender_windowed_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_011:sink1_startofpacket
	wire          pc_dma_avalon_master_to_address_span_extender_windowed_slave_cmd_width_adapter_src_endofpacket;         // pc_dma_avalon_master_to_address_span_extender_windowed_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_011:sink1_endofpacket
	wire          cmd_demux_005_src0_valid;                                                                               // cmd_demux_005:src0_valid -> pc_bus_avalon_sdram_master_to_address_span_extender_windowed_slave_cmd_width_adapter:in_valid
	wire  [115:0] cmd_demux_005_src0_data;                                                                                // cmd_demux_005:src0_data -> pc_bus_avalon_sdram_master_to_address_span_extender_windowed_slave_cmd_width_adapter:in_data
	wire          cmd_demux_005_src0_ready;                                                                               // pc_bus_avalon_sdram_master_to_address_span_extender_windowed_slave_cmd_width_adapter:in_ready -> cmd_demux_005:src0_ready
	wire   [11:0] cmd_demux_005_src0_channel;                                                                             // cmd_demux_005:src0_channel -> pc_bus_avalon_sdram_master_to_address_span_extender_windowed_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_005_src0_startofpacket;                                                                       // cmd_demux_005:src0_startofpacket -> pc_bus_avalon_sdram_master_to_address_span_extender_windowed_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_005_src0_endofpacket;                                                                         // cmd_demux_005:src0_endofpacket -> pc_bus_avalon_sdram_master_to_address_span_extender_windowed_slave_cmd_width_adapter:in_endofpacket
	wire          pc_bus_avalon_sdram_master_to_address_span_extender_windowed_slave_cmd_width_adapter_src_valid;         // pc_bus_avalon_sdram_master_to_address_span_extender_windowed_slave_cmd_width_adapter:out_valid -> cmd_mux_011:sink2_valid
	wire  [151:0] pc_bus_avalon_sdram_master_to_address_span_extender_windowed_slave_cmd_width_adapter_src_data;          // pc_bus_avalon_sdram_master_to_address_span_extender_windowed_slave_cmd_width_adapter:out_data -> cmd_mux_011:sink2_data
	wire          pc_bus_avalon_sdram_master_to_address_span_extender_windowed_slave_cmd_width_adapter_src_ready;         // cmd_mux_011:sink2_ready -> pc_bus_avalon_sdram_master_to_address_span_extender_windowed_slave_cmd_width_adapter:out_ready
	wire   [11:0] pc_bus_avalon_sdram_master_to_address_span_extender_windowed_slave_cmd_width_adapter_src_channel;       // pc_bus_avalon_sdram_master_to_address_span_extender_windowed_slave_cmd_width_adapter:out_channel -> cmd_mux_011:sink2_channel
	wire          pc_bus_avalon_sdram_master_to_address_span_extender_windowed_slave_cmd_width_adapter_src_startofpacket; // pc_bus_avalon_sdram_master_to_address_span_extender_windowed_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_011:sink2_startofpacket
	wire          pc_bus_avalon_sdram_master_to_address_span_extender_windowed_slave_cmd_width_adapter_src_endofpacket;   // pc_bus_avalon_sdram_master_to_address_span_extender_windowed_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_011:sink2_endofpacket
	wire          rsp_demux_008_src0_valid;                                                                               // rsp_demux_008:src0_valid -> floppy0_sd_slave_to_mm_bridge_m0_rsp_width_adapter:in_valid
	wire   [88:0] rsp_demux_008_src0_data;                                                                                // rsp_demux_008:src0_data -> floppy0_sd_slave_to_mm_bridge_m0_rsp_width_adapter:in_data
	wire          rsp_demux_008_src0_ready;                                                                               // floppy0_sd_slave_to_mm_bridge_m0_rsp_width_adapter:in_ready -> rsp_demux_008:src0_ready
	wire   [11:0] rsp_demux_008_src0_channel;                                                                             // rsp_demux_008:src0_channel -> floppy0_sd_slave_to_mm_bridge_m0_rsp_width_adapter:in_channel
	wire          rsp_demux_008_src0_startofpacket;                                                                       // rsp_demux_008:src0_startofpacket -> floppy0_sd_slave_to_mm_bridge_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                                         // rsp_demux_008:src0_endofpacket -> floppy0_sd_slave_to_mm_bridge_m0_rsp_width_adapter:in_endofpacket
	wire          floppy0_sd_slave_to_mm_bridge_m0_rsp_width_adapter_src_valid;                                           // floppy0_sd_slave_to_mm_bridge_m0_rsp_width_adapter:out_valid -> rsp_mux_003:sink8_valid
	wire  [115:0] floppy0_sd_slave_to_mm_bridge_m0_rsp_width_adapter_src_data;                                            // floppy0_sd_slave_to_mm_bridge_m0_rsp_width_adapter:out_data -> rsp_mux_003:sink8_data
	wire          floppy0_sd_slave_to_mm_bridge_m0_rsp_width_adapter_src_ready;                                           // rsp_mux_003:sink8_ready -> floppy0_sd_slave_to_mm_bridge_m0_rsp_width_adapter:out_ready
	wire   [11:0] floppy0_sd_slave_to_mm_bridge_m0_rsp_width_adapter_src_channel;                                         // floppy0_sd_slave_to_mm_bridge_m0_rsp_width_adapter:out_channel -> rsp_mux_003:sink8_channel
	wire          floppy0_sd_slave_to_mm_bridge_m0_rsp_width_adapter_src_startofpacket;                                   // floppy0_sd_slave_to_mm_bridge_m0_rsp_width_adapter:out_startofpacket -> rsp_mux_003:sink8_startofpacket
	wire          floppy0_sd_slave_to_mm_bridge_m0_rsp_width_adapter_src_endofpacket;                                     // floppy0_sd_slave_to_mm_bridge_m0_rsp_width_adapter:out_endofpacket -> rsp_mux_003:sink8_endofpacket
	wire          rsp_demux_011_src0_valid;                                                                               // rsp_demux_011:src0_valid -> address_span_extender_windowed_slave_to_mm_bridge_m0_rsp_width_adapter:in_valid
	wire  [151:0] rsp_demux_011_src0_data;                                                                                // rsp_demux_011:src0_data -> address_span_extender_windowed_slave_to_mm_bridge_m0_rsp_width_adapter:in_data
	wire          rsp_demux_011_src0_ready;                                                                               // address_span_extender_windowed_slave_to_mm_bridge_m0_rsp_width_adapter:in_ready -> rsp_demux_011:src0_ready
	wire   [11:0] rsp_demux_011_src0_channel;                                                                             // rsp_demux_011:src0_channel -> address_span_extender_windowed_slave_to_mm_bridge_m0_rsp_width_adapter:in_channel
	wire          rsp_demux_011_src0_startofpacket;                                                                       // rsp_demux_011:src0_startofpacket -> address_span_extender_windowed_slave_to_mm_bridge_m0_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                                         // rsp_demux_011:src0_endofpacket -> address_span_extender_windowed_slave_to_mm_bridge_m0_rsp_width_adapter:in_endofpacket
	wire          address_span_extender_windowed_slave_to_mm_bridge_m0_rsp_width_adapter_src_valid;                       // address_span_extender_windowed_slave_to_mm_bridge_m0_rsp_width_adapter:out_valid -> rsp_mux_003:sink11_valid
	wire  [115:0] address_span_extender_windowed_slave_to_mm_bridge_m0_rsp_width_adapter_src_data;                        // address_span_extender_windowed_slave_to_mm_bridge_m0_rsp_width_adapter:out_data -> rsp_mux_003:sink11_data
	wire          address_span_extender_windowed_slave_to_mm_bridge_m0_rsp_width_adapter_src_ready;                       // rsp_mux_003:sink11_ready -> address_span_extender_windowed_slave_to_mm_bridge_m0_rsp_width_adapter:out_ready
	wire   [11:0] address_span_extender_windowed_slave_to_mm_bridge_m0_rsp_width_adapter_src_channel;                     // address_span_extender_windowed_slave_to_mm_bridge_m0_rsp_width_adapter:out_channel -> rsp_mux_003:sink11_channel
	wire          address_span_extender_windowed_slave_to_mm_bridge_m0_rsp_width_adapter_src_startofpacket;               // address_span_extender_windowed_slave_to_mm_bridge_m0_rsp_width_adapter:out_startofpacket -> rsp_mux_003:sink11_startofpacket
	wire          address_span_extender_windowed_slave_to_mm_bridge_m0_rsp_width_adapter_src_endofpacket;                 // address_span_extender_windowed_slave_to_mm_bridge_m0_rsp_width_adapter:out_endofpacket -> rsp_mux_003:sink11_endofpacket
	wire          rsp_demux_011_src1_valid;                                                                               // rsp_demux_011:src1_valid -> address_span_extender_windowed_slave_to_pc_dma_avalon_master_rsp_width_adapter:in_valid
	wire  [151:0] rsp_demux_011_src1_data;                                                                                // rsp_demux_011:src1_data -> address_span_extender_windowed_slave_to_pc_dma_avalon_master_rsp_width_adapter:in_data
	wire          rsp_demux_011_src1_ready;                                                                               // address_span_extender_windowed_slave_to_pc_dma_avalon_master_rsp_width_adapter:in_ready -> rsp_demux_011:src1_ready
	wire   [11:0] rsp_demux_011_src1_channel;                                                                             // rsp_demux_011:src1_channel -> address_span_extender_windowed_slave_to_pc_dma_avalon_master_rsp_width_adapter:in_channel
	wire          rsp_demux_011_src1_startofpacket;                                                                       // rsp_demux_011:src1_startofpacket -> address_span_extender_windowed_slave_to_pc_dma_avalon_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_011_src1_endofpacket;                                                                         // rsp_demux_011:src1_endofpacket -> address_span_extender_windowed_slave_to_pc_dma_avalon_master_rsp_width_adapter:in_endofpacket
	wire          address_span_extender_windowed_slave_to_pc_dma_avalon_master_rsp_width_adapter_src_valid;               // address_span_extender_windowed_slave_to_pc_dma_avalon_master_rsp_width_adapter:out_valid -> rsp_mux_004:sink0_valid
	wire   [88:0] address_span_extender_windowed_slave_to_pc_dma_avalon_master_rsp_width_adapter_src_data;                // address_span_extender_windowed_slave_to_pc_dma_avalon_master_rsp_width_adapter:out_data -> rsp_mux_004:sink0_data
	wire          address_span_extender_windowed_slave_to_pc_dma_avalon_master_rsp_width_adapter_src_ready;               // rsp_mux_004:sink0_ready -> address_span_extender_windowed_slave_to_pc_dma_avalon_master_rsp_width_adapter:out_ready
	wire   [11:0] address_span_extender_windowed_slave_to_pc_dma_avalon_master_rsp_width_adapter_src_channel;             // address_span_extender_windowed_slave_to_pc_dma_avalon_master_rsp_width_adapter:out_channel -> rsp_mux_004:sink0_channel
	wire          address_span_extender_windowed_slave_to_pc_dma_avalon_master_rsp_width_adapter_src_startofpacket;       // address_span_extender_windowed_slave_to_pc_dma_avalon_master_rsp_width_adapter:out_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire          address_span_extender_windowed_slave_to_pc_dma_avalon_master_rsp_width_adapter_src_endofpacket;         // address_span_extender_windowed_slave_to_pc_dma_avalon_master_rsp_width_adapter:out_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire          rsp_demux_011_src2_valid;                                                                               // rsp_demux_011:src2_valid -> address_span_extender_windowed_slave_to_pc_bus_avalon_sdram_master_rsp_width_adapter:in_valid
	wire  [151:0] rsp_demux_011_src2_data;                                                                                // rsp_demux_011:src2_data -> address_span_extender_windowed_slave_to_pc_bus_avalon_sdram_master_rsp_width_adapter:in_data
	wire          rsp_demux_011_src2_ready;                                                                               // address_span_extender_windowed_slave_to_pc_bus_avalon_sdram_master_rsp_width_adapter:in_ready -> rsp_demux_011:src2_ready
	wire   [11:0] rsp_demux_011_src2_channel;                                                                             // rsp_demux_011:src2_channel -> address_span_extender_windowed_slave_to_pc_bus_avalon_sdram_master_rsp_width_adapter:in_channel
	wire          rsp_demux_011_src2_startofpacket;                                                                       // rsp_demux_011:src2_startofpacket -> address_span_extender_windowed_slave_to_pc_bus_avalon_sdram_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_011_src2_endofpacket;                                                                         // rsp_demux_011:src2_endofpacket -> address_span_extender_windowed_slave_to_pc_bus_avalon_sdram_master_rsp_width_adapter:in_endofpacket
	wire          address_span_extender_windowed_slave_to_pc_bus_avalon_sdram_master_rsp_width_adapter_src_valid;         // address_span_extender_windowed_slave_to_pc_bus_avalon_sdram_master_rsp_width_adapter:out_valid -> rsp_mux_005:sink0_valid
	wire  [115:0] address_span_extender_windowed_slave_to_pc_bus_avalon_sdram_master_rsp_width_adapter_src_data;          // address_span_extender_windowed_slave_to_pc_bus_avalon_sdram_master_rsp_width_adapter:out_data -> rsp_mux_005:sink0_data
	wire          address_span_extender_windowed_slave_to_pc_bus_avalon_sdram_master_rsp_width_adapter_src_ready;         // rsp_mux_005:sink0_ready -> address_span_extender_windowed_slave_to_pc_bus_avalon_sdram_master_rsp_width_adapter:out_ready
	wire   [11:0] address_span_extender_windowed_slave_to_pc_bus_avalon_sdram_master_rsp_width_adapter_src_channel;       // address_span_extender_windowed_slave_to_pc_bus_avalon_sdram_master_rsp_width_adapter:out_channel -> rsp_mux_005:sink0_channel
	wire          address_span_extender_windowed_slave_to_pc_bus_avalon_sdram_master_rsp_width_adapter_src_startofpacket; // address_span_extender_windowed_slave_to_pc_bus_avalon_sdram_master_rsp_width_adapter:out_startofpacket -> rsp_mux_005:sink0_startofpacket
	wire          address_span_extender_windowed_slave_to_pc_bus_avalon_sdram_master_rsp_width_adapter_src_endofpacket;   // address_span_extender_windowed_slave_to_pc_bus_avalon_sdram_master_rsp_width_adapter:out_endofpacket -> rsp_mux_005:sink0_endofpacket
	wire   [11:0] mm_bridge_m0_limiter_cmd_valid_data;                                                                    // mm_bridge_m0_limiter:cmd_src_valid -> cmd_demux_003:sink_valid
	wire          driver_sd_avalon_slave_0_agent_rdata_fifo_src_valid;                                                    // driver_sd_avalon_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] driver_sd_avalon_slave_0_agent_rdata_fifo_src_data;                                                     // driver_sd_avalon_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          driver_sd_avalon_slave_0_agent_rdata_fifo_src_ready;                                                    // avalon_st_adapter:in_0_ready -> driver_sd_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                                          // avalon_st_adapter:out_0_valid -> driver_sd_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                                           // avalon_st_adapter:out_0_data -> driver_sd_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                                          // driver_sd_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                                          // avalon_st_adapter:out_0_error -> driver_sd_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          pc_bus_ctrl_agent_rdata_fifo_src_valid;                                                                 // pc_bus_ctrl_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] pc_bus_ctrl_agent_rdata_fifo_src_data;                                                                  // pc_bus_ctrl_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          pc_bus_ctrl_agent_rdata_fifo_src_ready;                                                                 // avalon_st_adapter_001:in_0_ready -> pc_bus_ctrl_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                                      // avalon_st_adapter_001:out_0_valid -> pc_bus_ctrl_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                                       // avalon_st_adapter_001:out_0_data -> pc_bus_ctrl_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                                      // pc_bus_ctrl_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                                      // avalon_st_adapter_001:out_0_error -> pc_bus_ctrl_agent:rdata_fifo_sink_error
	wire          floppy0_mgmt_agent_rdata_fifo_src_valid;                                                                // floppy0_mgmt_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] floppy0_mgmt_agent_rdata_fifo_src_data;                                                                 // floppy0_mgmt_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          floppy0_mgmt_agent_rdata_fifo_src_ready;                                                                // avalon_st_adapter_002:in_0_ready -> floppy0_mgmt_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                                      // avalon_st_adapter_002:out_0_valid -> floppy0_mgmt_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                                       // avalon_st_adapter_002:out_0_data -> floppy0_mgmt_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                                      // floppy0_mgmt_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                                      // avalon_st_adapter_002:out_0_error -> floppy0_mgmt_agent:rdata_fifo_sink_error
	wire          hdd0_mgmt_agent_rdata_fifo_src_valid;                                                                   // hdd0_mgmt_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] hdd0_mgmt_agent_rdata_fifo_src_data;                                                                    // hdd0_mgmt_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          hdd0_mgmt_agent_rdata_fifo_src_ready;                                                                   // avalon_st_adapter_003:in_0_ready -> hdd0_mgmt_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                                      // avalon_st_adapter_003:out_0_valid -> hdd0_mgmt_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                                       // avalon_st_adapter_003:out_0_data -> hdd0_mgmt_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                                      // hdd0_mgmt_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                                      // avalon_st_adapter_003:out_0_error -> hdd0_mgmt_agent:rdata_fifo_sink_error
	wire          rtc_mgmt_agent_rdata_fifo_src_valid;                                                                    // rtc_mgmt_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] rtc_mgmt_agent_rdata_fifo_src_data;                                                                     // rtc_mgmt_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          rtc_mgmt_agent_rdata_fifo_src_ready;                                                                    // avalon_st_adapter_004:in_0_ready -> rtc_mgmt_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                                      // avalon_st_adapter_004:out_0_valid -> rtc_mgmt_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                                       // avalon_st_adapter_004:out_0_data -> rtc_mgmt_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                                      // rtc_mgmt_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                                      // avalon_st_adapter_004:out_0_error -> rtc_mgmt_agent:rdata_fifo_sink_error
	wire          sound_mgmt_agent_rdata_fifo_src_valid;                                                                  // sound_mgmt_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] sound_mgmt_agent_rdata_fifo_src_data;                                                                   // sound_mgmt_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          sound_mgmt_agent_rdata_fifo_src_ready;                                                                  // avalon_st_adapter_005:in_0_ready -> sound_mgmt_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                                      // avalon_st_adapter_005:out_0_valid -> sound_mgmt_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                                       // avalon_st_adapter_005:out_0_data -> sound_mgmt_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                                      // sound_mgmt_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                                      // avalon_st_adapter_005:out_0_error -> sound_mgmt_agent:rdata_fifo_sink_error
	wire          pit_mgmt_agent_rdata_fifo_src_valid;                                                                    // pit_mgmt_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] pit_mgmt_agent_rdata_fifo_src_data;                                                                     // pit_mgmt_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire          pit_mgmt_agent_rdata_fifo_src_ready;                                                                    // avalon_st_adapter_006:in_0_ready -> pit_mgmt_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                                      // avalon_st_adapter_006:out_0_valid -> pit_mgmt_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                                       // avalon_st_adapter_006:out_0_data -> pit_mgmt_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                                      // pit_mgmt_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                                      // avalon_st_adapter_006:out_0_error -> pit_mgmt_agent:rdata_fifo_sink_error
	wire          hdd1_mgmt_agent_rdata_fifo_src_valid;                                                                   // hdd1_mgmt_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] hdd1_mgmt_agent_rdata_fifo_src_data;                                                                    // hdd1_mgmt_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire          hdd1_mgmt_agent_rdata_fifo_src_ready;                                                                   // avalon_st_adapter_007:in_0_ready -> hdd1_mgmt_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                                      // avalon_st_adapter_007:out_0_valid -> hdd1_mgmt_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                                       // avalon_st_adapter_007:out_0_data -> hdd1_mgmt_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                                      // hdd1_mgmt_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                                      // avalon_st_adapter_007:out_0_error -> hdd1_mgmt_agent:rdata_fifo_sink_error
	wire          floppy0_sd_slave_agent_rdata_fifo_src_valid;                                                            // floppy0_sd_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire    [9:0] floppy0_sd_slave_agent_rdata_fifo_src_data;                                                             // floppy0_sd_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire          floppy0_sd_slave_agent_rdata_fifo_src_ready;                                                            // avalon_st_adapter_008:in_0_ready -> floppy0_sd_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                                      // avalon_st_adapter_008:out_0_valid -> floppy0_sd_slave_agent:rdata_fifo_sink_valid
	wire    [9:0] avalon_st_adapter_008_out_0_data;                                                                       // avalon_st_adapter_008:out_0_data -> floppy0_sd_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                                      // floppy0_sd_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                                      // avalon_st_adapter_008:out_0_error -> floppy0_sd_slave_agent:rdata_fifo_sink_error
	wire          hdd0_sd_slave_agent_rdata_fifo_src_valid;                                                               // hdd0_sd_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire   [33:0] hdd0_sd_slave_agent_rdata_fifo_src_data;                                                                // hdd0_sd_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire          hdd0_sd_slave_agent_rdata_fifo_src_ready;                                                               // avalon_st_adapter_009:in_0_ready -> hdd0_sd_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                                      // avalon_st_adapter_009:out_0_valid -> hdd0_sd_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_009_out_0_data;                                                                       // avalon_st_adapter_009:out_0_data -> hdd0_sd_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                                      // hdd0_sd_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                                      // avalon_st_adapter_009:out_0_error -> hdd0_sd_slave_agent:rdata_fifo_sink_error
	wire          hdd1_sd_slave_agent_rdata_fifo_src_valid;                                                               // hdd1_sd_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire   [33:0] hdd1_sd_slave_agent_rdata_fifo_src_data;                                                                // hdd1_sd_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire          hdd1_sd_slave_agent_rdata_fifo_src_ready;                                                               // avalon_st_adapter_010:in_0_ready -> hdd1_sd_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                                      // avalon_st_adapter_010:out_0_valid -> hdd1_sd_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_010_out_0_data;                                                                       // avalon_st_adapter_010:out_0_data -> hdd1_sd_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                                      // hdd1_sd_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                                      // avalon_st_adapter_010:out_0_error -> hdd1_sd_slave_agent:rdata_fifo_sink_error
	wire          address_span_extender_windowed_slave_agent_rdata_fifo_out_valid;                                        // address_span_extender_windowed_slave_agent_rdata_fifo:out_valid -> avalon_st_adapter_011:in_0_valid
	wire   [65:0] address_span_extender_windowed_slave_agent_rdata_fifo_out_data;                                         // address_span_extender_windowed_slave_agent_rdata_fifo:out_data -> avalon_st_adapter_011:in_0_data
	wire          address_span_extender_windowed_slave_agent_rdata_fifo_out_ready;                                        // avalon_st_adapter_011:in_0_ready -> address_span_extender_windowed_slave_agent_rdata_fifo:out_ready
	wire          avalon_st_adapter_011_out_0_valid;                                                                      // avalon_st_adapter_011:out_0_valid -> address_span_extender_windowed_slave_agent:rdata_fifo_sink_valid
	wire   [65:0] avalon_st_adapter_011_out_0_data;                                                                       // avalon_st_adapter_011:out_0_data -> address_span_extender_windowed_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                                                      // address_span_extender_windowed_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                                                      // avalon_st_adapter_011:out_0_error -> address_span_extender_windowed_slave_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) floppy0_avalon_master_translator (
		.clk                    (pll_0_outclk0_clk),                                                        //                       clk.clk
		.reset                  (floppy0_reset_sink_reset_bridge_in_reset_reset),                           //                     reset.reset
		.uav_address            (floppy0_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (floppy0_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (floppy0_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (floppy0_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (floppy0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (floppy0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (floppy0_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (floppy0_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (floppy0_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (floppy0_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (floppy0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (floppy0_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (floppy0_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_read                (floppy0_avalon_master_read),                                               //                          .read
		.av_readdata            (floppy0_avalon_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (floppy0_avalon_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (floppy0_avalon_master_write),                                              //                          .write
		.av_writedata           (floppy0_avalon_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                     //               (terminated)
		.av_byteenable          (4'b1111),                                                                  //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                     //               (terminated)
		.av_begintransfer       (1'b0),                                                                     //               (terminated)
		.av_chipselect          (1'b0),                                                                     //               (terminated)
		.av_lock                (1'b0),                                                                     //               (terminated)
		.av_debugaccess         (1'b0),                                                                     //               (terminated)
		.uav_clken              (),                                                                         //               (terminated)
		.av_clken               (1'b1),                                                                     //               (terminated)
		.uav_response           (2'b00),                                                                    //               (terminated)
		.av_response            (),                                                                         //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                     //               (terminated)
		.av_writeresponsevalid  ()                                                                          //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) hdd0_avalon_master_translator (
		.clk                    (pll_0_outclk0_clk),                                                     //                       clk.clk
		.reset                  (floppy0_reset_sink_reset_bridge_in_reset_reset),                        //                     reset.reset
		.uav_address            (hdd0_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (hdd0_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (hdd0_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (hdd0_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (hdd0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (hdd0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (hdd0_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (hdd0_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (hdd0_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (hdd0_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (hdd0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (hdd0_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (hdd0_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_read                (hdd0_avalon_master_read),                                               //                          .read
		.av_readdata            (hdd0_avalon_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (hdd0_avalon_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (hdd0_avalon_master_write),                                              //                          .write
		.av_writedata           (hdd0_avalon_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                  //               (terminated)
		.av_byteenable          (4'b1111),                                                               //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                  //               (terminated)
		.av_chipselect          (1'b0),                                                                  //               (terminated)
		.av_lock                (1'b0),                                                                  //               (terminated)
		.av_debugaccess         (1'b0),                                                                  //               (terminated)
		.uav_clken              (),                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                 //               (terminated)
		.av_response            (),                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                       //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) hdd1_avalon_master_translator (
		.clk                    (pll_0_outclk0_clk),                                                     //                       clk.clk
		.reset                  (floppy0_reset_sink_reset_bridge_in_reset_reset),                        //                     reset.reset
		.uav_address            (hdd1_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (hdd1_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (hdd1_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (hdd1_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (hdd1_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (hdd1_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (hdd1_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (hdd1_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (hdd1_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (hdd1_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (hdd1_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (hdd1_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (hdd1_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_read                (hdd1_avalon_master_read),                                               //                          .read
		.av_readdata            (hdd1_avalon_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (hdd1_avalon_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (hdd1_avalon_master_write),                                              //                          .write
		.av_writedata           (hdd1_avalon_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                  //               (terminated)
		.av_byteenable          (4'b1111),                                                               //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                  //               (terminated)
		.av_chipselect          (1'b0),                                                                  //               (terminated)
		.av_lock                (1'b0),                                                                  //               (terminated)
		.av_debugaccess         (1'b0),                                                                  //               (terminated)
		.uav_clken              (),                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                 //               (terminated)
		.av_response            (),                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                       //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) mm_bridge_m0_translator (
		.clk                    (pll_0_outclk0_clk),                                               //                       clk.clk
		.reset                  (floppy0_reset_sink_reset_bridge_in_reset_reset),                  //                     reset.reset
		.uav_address            (mm_bridge_m0_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (mm_bridge_m0_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (mm_bridge_m0_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (mm_bridge_m0_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (mm_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (mm_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (mm_bridge_m0_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (mm_bridge_m0_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (mm_bridge_m0_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (mm_bridge_m0_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (mm_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (mm_bridge_m0_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (mm_bridge_m0_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (mm_bridge_m0_burstcount),                                         //                          .burstcount
		.av_byteenable          (mm_bridge_m0_byteenable),                                         //                          .byteenable
		.av_read                (mm_bridge_m0_read),                                               //                          .read
		.av_readdata            (mm_bridge_m0_readdata),                                           //                          .readdata
		.av_readdatavalid       (mm_bridge_m0_readdatavalid),                                      //                          .readdatavalid
		.av_write               (mm_bridge_m0_write),                                              //                          .write
		.av_writedata           (mm_bridge_m0_writedata),                                          //                          .writedata
		.av_debugaccess         (mm_bridge_m0_debugaccess),                                        //                          .debugaccess
		.av_beginbursttransfer  (1'b0),                                                            //               (terminated)
		.av_begintransfer       (1'b0),                                                            //               (terminated)
		.av_chipselect          (1'b0),                                                            //               (terminated)
		.av_lock                (1'b0),                                                            //               (terminated)
		.uav_clken              (),                                                                //               (terminated)
		.av_clken               (1'b1),                                                            //               (terminated)
		.uav_response           (2'b00),                                                           //               (terminated)
		.av_response            (),                                                                //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                            //               (terminated)
		.av_writeresponsevalid  ()                                                                 //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (8),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (1),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (1),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (1),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) pc_dma_avalon_master_translator (
		.clk                    (pll_0_outclk0_clk),                                                       //                       clk.clk
		.reset                  (floppy0_reset_sink_reset_bridge_in_reset_reset),                          //                     reset.reset
		.uav_address            (pc_dma_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (pc_dma_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (pc_dma_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (pc_dma_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (pc_dma_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (pc_dma_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (pc_dma_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (pc_dma_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (pc_dma_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (pc_dma_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (pc_dma_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (pc_dma_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (pc_dma_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_read                (pc_dma_avalon_master_read),                                               //                          .read
		.av_readdata            (pc_dma_avalon_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (pc_dma_avalon_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (pc_dma_avalon_master_write),                                              //                          .write
		.av_writedata           (pc_dma_avalon_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                    //               (terminated)
		.av_byteenable          (1'b1),                                                                    //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                    //               (terminated)
		.av_begintransfer       (1'b0),                                                                    //               (terminated)
		.av_chipselect          (1'b0),                                                                    //               (terminated)
		.av_lock                (1'b0),                                                                    //               (terminated)
		.av_debugaccess         (1'b0),                                                                    //               (terminated)
		.uav_clken              (),                                                                        //               (terminated)
		.av_clken               (1'b1),                                                                    //               (terminated)
		.uav_response           (2'b00),                                                                   //               (terminated)
		.av_response            (),                                                                        //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                    //               (terminated)
		.av_writeresponsevalid  ()                                                                         //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (3),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (5),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (1),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (1),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) pc_bus_avalon_sdram_master_translator (
		.clk                    (pll_0_outclk0_clk),                                                             //                       clk.clk
		.reset                  (floppy0_reset_sink_reset_bridge_in_reset_reset),                                //                     reset.reset
		.uav_address            (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (pc_bus_avalon_sdram_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (pc_bus_avalon_sdram_master_waitrequest),                                        //                          .waitrequest
		.av_burstcount          (pc_bus_avalon_sdram_master_burstcount),                                         //                          .burstcount
		.av_byteenable          (pc_bus_avalon_sdram_master_byteenable),                                         //                          .byteenable
		.av_read                (pc_bus_avalon_sdram_master_read),                                               //                          .read
		.av_readdata            (pc_bus_avalon_sdram_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (pc_bus_avalon_sdram_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (pc_bus_avalon_sdram_master_write),                                              //                          .write
		.av_writedata           (pc_bus_avalon_sdram_master_writedata),                                          //                          .writedata
		.av_beginbursttransfer  (1'b0),                                                                          //               (terminated)
		.av_begintransfer       (1'b0),                                                                          //               (terminated)
		.av_chipselect          (1'b0),                                                                          //               (terminated)
		.av_lock                (1'b0),                                                                          //               (terminated)
		.av_debugaccess         (1'b0),                                                                          //               (terminated)
		.uav_clken              (),                                                                              //               (terminated)
		.av_clken               (1'b1),                                                                          //               (terminated)
		.uav_response           (2'b00),                                                                         //               (terminated)
		.av_response            (),                                                                              //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                          //               (terminated)
		.av_writeresponsevalid  ()                                                                               //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) driver_sd_avalon_slave_0_translator (
		.clk                    (pll_0_outclk0_clk),                               //                      clk.clk
		.reset                  (floppy0_reset_sink_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (driver_sd_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (driver_sd_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (driver_sd_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write              (driver_sd_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (driver_sd_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (driver_sd_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (driver_sd_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (driver_sd_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (driver_sd_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (driver_sd_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (driver_sd_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (driver_sd_avalon_slave_0_address),                //      avalon_anti_slave_0.address
		.av_write               (driver_sd_avalon_slave_0_write),                  //                         .write
		.av_read                (driver_sd_avalon_slave_0_read),                   //                         .read
		.av_readdata            (driver_sd_avalon_slave_0_readdata),               //                         .readdata
		.av_writedata           (driver_sd_avalon_slave_0_writedata),              //                         .writedata
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_byteenable          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_waitrequest         (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_chipselect          (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_debugaccess         (),                                                //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pc_bus_ctrl_translator (
		.clk                    (pll_0_outclk0_clk),                              //                      clk.clk
		.reset                  (floppy0_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pc_bus_ctrl_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (pc_bus_ctrl_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (pc_bus_ctrl_agent_m0_read),                      //                         .read
		.uav_write              (pc_bus_ctrl_agent_m0_write),                     //                         .write
		.uav_waitrequest        (pc_bus_ctrl_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (pc_bus_ctrl_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (pc_bus_ctrl_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (pc_bus_ctrl_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (pc_bus_ctrl_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (pc_bus_ctrl_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (pc_bus_ctrl_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (pc_bus_ctrl_address),                            //      avalon_anti_slave_0.address
		.av_write               (pc_bus_ctrl_write),                              //                         .write
		.av_writedata           (pc_bus_ctrl_writedata),                          //                         .writedata
		.av_read                (),                                               //              (terminated)
		.av_readdata            (32'b11011110101011011101111010101101),           //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) floppy0_mgmt_translator (
		.clk                    (pll_0_outclk0_clk),                              //                      clk.clk
		.reset                  (floppy0_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (floppy0_mgmt_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (floppy0_mgmt_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (floppy0_mgmt_agent_m0_read),                     //                         .read
		.uav_write              (floppy0_mgmt_agent_m0_write),                    //                         .write
		.uav_waitrequest        (floppy0_mgmt_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (floppy0_mgmt_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (floppy0_mgmt_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (floppy0_mgmt_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (floppy0_mgmt_agent_m0_writedata),                //                         .writedata
		.uav_lock               (floppy0_mgmt_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (floppy0_mgmt_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (floppy0_mgmt_address),                           //      avalon_anti_slave_0.address
		.av_write               (floppy0_mgmt_write),                             //                         .write
		.av_writedata           (floppy0_mgmt_writedata),                         //                         .writedata
		.av_read                (),                                               //              (terminated)
		.av_readdata            (32'b11011110101011011101111010101101),           //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hdd0_mgmt_translator (
		.clk                    (pll_0_outclk0_clk),                              //                      clk.clk
		.reset                  (floppy0_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hdd0_mgmt_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (hdd0_mgmt_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (hdd0_mgmt_agent_m0_read),                        //                         .read
		.uav_write              (hdd0_mgmt_agent_m0_write),                       //                         .write
		.uav_waitrequest        (hdd0_mgmt_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (hdd0_mgmt_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (hdd0_mgmt_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (hdd0_mgmt_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (hdd0_mgmt_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (hdd0_mgmt_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (hdd0_mgmt_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (hdd0_mgmt_address),                              //      avalon_anti_slave_0.address
		.av_write               (hdd0_mgmt_write),                                //                         .write
		.av_writedata           (hdd0_mgmt_writedata),                            //                         .writedata
		.av_read                (),                                               //              (terminated)
		.av_readdata            (32'b11011110101011011101111010101101),           //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) rtc_mgmt_translator (
		.clk                    (pll_0_outclk0_clk),                              //                      clk.clk
		.reset                  (floppy0_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (rtc_mgmt_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (rtc_mgmt_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (rtc_mgmt_agent_m0_read),                         //                         .read
		.uav_write              (rtc_mgmt_agent_m0_write),                        //                         .write
		.uav_waitrequest        (rtc_mgmt_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (rtc_mgmt_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (rtc_mgmt_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (rtc_mgmt_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (rtc_mgmt_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (rtc_mgmt_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (rtc_mgmt_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (rtc_mgmt_address),                               //      avalon_anti_slave_0.address
		.av_write               (rtc_mgmt_write),                                 //                         .write
		.av_writedata           (rtc_mgmt_writedata),                             //                         .writedata
		.av_read                (),                                               //              (terminated)
		.av_readdata            (32'b11011110101011011101111010101101),           //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sound_mgmt_translator (
		.clk                    (pll_0_outclk0_clk),                              //                      clk.clk
		.reset                  (floppy0_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (sound_mgmt_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (sound_mgmt_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (sound_mgmt_agent_m0_read),                       //                         .read
		.uav_write              (sound_mgmt_agent_m0_write),                      //                         .write
		.uav_waitrequest        (sound_mgmt_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (sound_mgmt_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (sound_mgmt_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (sound_mgmt_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (sound_mgmt_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (sound_mgmt_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (sound_mgmt_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (sound_mgmt_address),                             //      avalon_anti_slave_0.address
		.av_write               (sound_mgmt_write),                               //                         .write
		.av_writedata           (sound_mgmt_writedata),                           //                         .writedata
		.av_read                (),                                               //              (terminated)
		.av_readdata            (32'b11011110101011011101111010101101),           //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pit_mgmt_translator (
		.clk                    (pll_0_outclk0_clk),                              //                      clk.clk
		.reset                  (floppy0_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pit_mgmt_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (pit_mgmt_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (pit_mgmt_agent_m0_read),                         //                         .read
		.uav_write              (pit_mgmt_agent_m0_write),                        //                         .write
		.uav_waitrequest        (pit_mgmt_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (pit_mgmt_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (pit_mgmt_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (pit_mgmt_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (pit_mgmt_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (pit_mgmt_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (pit_mgmt_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (pit_mgmt_address),                               //      avalon_anti_slave_0.address
		.av_write               (pit_mgmt_write),                                 //                         .write
		.av_writedata           (pit_mgmt_writedata),                             //                         .writedata
		.av_read                (),                                               //              (terminated)
		.av_readdata            (32'b11011110101011011101111010101101),           //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hdd1_mgmt_translator (
		.clk                    (pll_0_outclk0_clk),                              //                      clk.clk
		.reset                  (floppy0_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hdd1_mgmt_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (hdd1_mgmt_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (hdd1_mgmt_agent_m0_read),                        //                         .read
		.uav_write              (hdd1_mgmt_agent_m0_write),                       //                         .write
		.uav_waitrequest        (hdd1_mgmt_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (hdd1_mgmt_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (hdd1_mgmt_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (hdd1_mgmt_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (hdd1_mgmt_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (hdd1_mgmt_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (hdd1_mgmt_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (hdd1_mgmt_address),                              //      avalon_anti_slave_0.address
		.av_write               (hdd1_mgmt_write),                                //                         .write
		.av_writedata           (hdd1_mgmt_writedata),                            //                         .writedata
		.av_read                (),                                               //              (terminated)
		.av_readdata            (32'b11011110101011011101111010101101),           //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) floppy0_sd_slave_translator (
		.clk                    (pll_0_outclk0_clk),                              //                      clk.clk
		.reset                  (floppy0_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (floppy0_sd_slave_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (floppy0_sd_slave_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (floppy0_sd_slave_agent_m0_read),                 //                         .read
		.uav_write              (floppy0_sd_slave_agent_m0_write),                //                         .write
		.uav_waitrequest        (floppy0_sd_slave_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (floppy0_sd_slave_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (floppy0_sd_slave_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (floppy0_sd_slave_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (floppy0_sd_slave_agent_m0_writedata),            //                         .writedata
		.uav_lock               (floppy0_sd_slave_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (floppy0_sd_slave_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (floppy0_sd_slave_address),                       //      avalon_anti_slave_0.address
		.av_write               (floppy0_sd_slave_write),                         //                         .write
		.av_read                (floppy0_sd_slave_read),                          //                         .read
		.av_readdata            (floppy0_sd_slave_readdata),                      //                         .readdata
		.av_writedata           (floppy0_sd_slave_writedata),                     //                         .writedata
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hdd0_sd_slave_translator (
		.clk                    (pll_0_outclk0_clk),                              //                      clk.clk
		.reset                  (floppy0_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hdd0_sd_slave_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (hdd0_sd_slave_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (hdd0_sd_slave_agent_m0_read),                    //                         .read
		.uav_write              (hdd0_sd_slave_agent_m0_write),                   //                         .write
		.uav_waitrequest        (hdd0_sd_slave_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (hdd0_sd_slave_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (hdd0_sd_slave_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (hdd0_sd_slave_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (hdd0_sd_slave_agent_m0_writedata),               //                         .writedata
		.uav_lock               (hdd0_sd_slave_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (hdd0_sd_slave_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (hdd0_sd_slave_address),                          //      avalon_anti_slave_0.address
		.av_write               (hdd0_sd_slave_write),                            //                         .write
		.av_read                (hdd0_sd_slave_read),                             //                         .read
		.av_readdata            (hdd0_sd_slave_readdata),                         //                         .readdata
		.av_writedata           (hdd0_sd_slave_writedata),                        //                         .writedata
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hdd1_sd_slave_translator (
		.clk                    (pll_0_outclk0_clk),                              //                      clk.clk
		.reset                  (floppy0_reset_sink_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hdd1_sd_slave_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (hdd1_sd_slave_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (hdd1_sd_slave_agent_m0_read),                    //                         .read
		.uav_write              (hdd1_sd_slave_agent_m0_write),                   //                         .write
		.uav_waitrequest        (hdd1_sd_slave_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (hdd1_sd_slave_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (hdd1_sd_slave_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (hdd1_sd_slave_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (hdd1_sd_slave_agent_m0_writedata),               //                         .writedata
		.uav_lock               (hdd1_sd_slave_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (hdd1_sd_slave_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (hdd1_sd_slave_address),                          //      avalon_anti_slave_0.address
		.av_write               (hdd1_sd_slave_write),                            //                         .write
		.av_read                (hdd1_sd_slave_read),                             //                         .read
		.av_readdata            (hdd1_sd_slave_readdata),                         //                         .readdata
		.av_writedata           (hdd1_sd_slave_writedata),                        //                         .writedata
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (24),
		.AV_DATA_W                      (64),
		.UAV_DATA_W                     (64),
		.AV_BURSTCOUNT_W                (8),
		.AV_BYTEENABLE_W                (8),
		.UAV_BYTEENABLE_W               (8),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (11),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (8),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) address_span_extender_windowed_slave_translator (
		.clk                    (pll_0_outclk0_clk),                                           //                      clk.clk
		.reset                  (floppy0_reset_sink_reset_bridge_in_reset_reset),              //                    reset.reset
		.uav_address            (address_span_extender_windowed_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (address_span_extender_windowed_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (address_span_extender_windowed_slave_agent_m0_read),          //                         .read
		.uav_write              (address_span_extender_windowed_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (address_span_extender_windowed_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (address_span_extender_windowed_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (address_span_extender_windowed_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (address_span_extender_windowed_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (address_span_extender_windowed_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (address_span_extender_windowed_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (address_span_extender_windowed_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (address_span_extender_windowed_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (address_span_extender_windowed_slave_write),                  //                         .write
		.av_read                (address_span_extender_windowed_slave_read),                   //                         .read
		.av_readdata            (address_span_extender_windowed_slave_readdata),               //                         .readdata
		.av_writedata           (address_span_extender_windowed_slave_writedata),              //                         .writedata
		.av_burstcount          (address_span_extender_windowed_slave_burstcount),             //                         .burstcount
		.av_byteenable          (address_span_extender_windowed_slave_byteenable),             //                         .byteenable
		.av_readdatavalid       (address_span_extender_windowed_slave_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (address_span_extender_windowed_slave_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                            //              (terminated)
		.av_beginbursttransfer  (),                                                            //              (terminated)
		.av_writebyteenable     (),                                                            //              (terminated)
		.av_lock                (),                                                            //              (terminated)
		.av_chipselect          (),                                                            //              (terminated)
		.av_clken               (),                                                            //              (terminated)
		.uav_clken              (1'b0),                                                        //              (terminated)
		.av_debugaccess         (),                                                            //              (terminated)
		.av_outputenable        (),                                                            //              (terminated)
		.uav_response           (),                                                            //              (terminated)
		.av_response            (2'b00),                                                       //              (terminated)
		.uav_writeresponsevalid (),                                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                         //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_QOS_H                 (94),
		.PKT_QOS_L                 (94),
		.PKT_DATA_SIDEBAND_H       (92),
		.PKT_DATA_SIDEBAND_L       (92),
		.PKT_ADDR_SIDEBAND_H       (91),
		.PKT_ADDR_SIDEBAND_L       (91),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_CACHE_H               (110),
		.PKT_CACHE_L               (107),
		.PKT_THREAD_ID_H           (103),
		.PKT_THREAD_ID_L           (103),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (93),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (99),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (12),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) floppy0_avalon_master_agent (
		.clk                   (pll_0_outclk0_clk),                                                        //       clk.clk
		.reset                 (floppy0_reset_sink_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.av_address            (floppy0_avalon_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (floppy0_avalon_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (floppy0_avalon_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (floppy0_avalon_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (floppy0_avalon_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (floppy0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (floppy0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (floppy0_avalon_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (floppy0_avalon_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (floppy0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (floppy0_avalon_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (floppy0_avalon_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (floppy0_avalon_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (floppy0_avalon_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (floppy0_avalon_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (floppy0_avalon_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                        //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                         //          .data
		.rp_channel            (rsp_mux_src_channel),                                                      //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                  //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                        //          .ready
		.av_response           (),                                                                         // (terminated)
		.av_writeresponsevalid ()                                                                          // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_QOS_H                 (94),
		.PKT_QOS_L                 (94),
		.PKT_DATA_SIDEBAND_H       (92),
		.PKT_DATA_SIDEBAND_L       (92),
		.PKT_ADDR_SIDEBAND_H       (91),
		.PKT_ADDR_SIDEBAND_L       (91),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_CACHE_H               (110),
		.PKT_CACHE_L               (107),
		.PKT_THREAD_ID_H           (103),
		.PKT_THREAD_ID_L           (103),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (93),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (99),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (12),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (1),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) hdd0_avalon_master_agent (
		.clk                   (pll_0_outclk0_clk),                                                     //       clk.clk
		.reset                 (floppy0_reset_sink_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.av_address            (hdd0_avalon_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (hdd0_avalon_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (hdd0_avalon_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (hdd0_avalon_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (hdd0_avalon_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (hdd0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (hdd0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (hdd0_avalon_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (hdd0_avalon_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (hdd0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (hdd0_avalon_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (hdd0_avalon_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (hdd0_avalon_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (hdd0_avalon_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (hdd0_avalon_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (hdd0_avalon_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                 //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                  //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                               //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                         //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                           //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                 //          .ready
		.av_response           (),                                                                      // (terminated)
		.av_writeresponsevalid ()                                                                       // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_QOS_H                 (94),
		.PKT_QOS_L                 (94),
		.PKT_DATA_SIDEBAND_H       (92),
		.PKT_DATA_SIDEBAND_L       (92),
		.PKT_ADDR_SIDEBAND_H       (91),
		.PKT_ADDR_SIDEBAND_L       (91),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_CACHE_H               (110),
		.PKT_CACHE_L               (107),
		.PKT_THREAD_ID_H           (103),
		.PKT_THREAD_ID_L           (103),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (93),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (99),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (12),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (2),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) hdd1_avalon_master_agent (
		.clk                   (pll_0_outclk0_clk),                                                     //       clk.clk
		.reset                 (floppy0_reset_sink_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.av_address            (hdd1_avalon_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (hdd1_avalon_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (hdd1_avalon_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (hdd1_avalon_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (hdd1_avalon_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (hdd1_avalon_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (hdd1_avalon_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (hdd1_avalon_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (hdd1_avalon_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (hdd1_avalon_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (hdd1_avalon_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (hdd1_avalon_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (hdd1_avalon_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (hdd1_avalon_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (hdd1_avalon_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (hdd1_avalon_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_002_src_valid),                                                 //        rp.valid
		.rp_data               (rsp_mux_002_src_data),                                                  //          .data
		.rp_channel            (rsp_mux_002_src_channel),                                               //          .channel
		.rp_startofpacket      (rsp_mux_002_src_startofpacket),                                         //          .startofpacket
		.rp_endofpacket        (rsp_mux_002_src_endofpacket),                                           //          .endofpacket
		.rp_ready              (rsp_mux_002_src_ready),                                                 //          .ready
		.av_response           (),                                                                      // (terminated)
		.av_writeresponsevalid ()                                                                       // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_QOS_H                 (94),
		.PKT_QOS_L                 (94),
		.PKT_DATA_SIDEBAND_H       (92),
		.PKT_DATA_SIDEBAND_L       (92),
		.PKT_ADDR_SIDEBAND_H       (91),
		.PKT_ADDR_SIDEBAND_L       (91),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_CACHE_H               (110),
		.PKT_CACHE_L               (107),
		.PKT_THREAD_ID_H           (103),
		.PKT_THREAD_ID_L           (103),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (93),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (99),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (12),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (3),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) mm_bridge_m0_agent (
		.clk                   (pll_0_outclk0_clk),                                               //       clk.clk
		.reset                 (floppy0_reset_sink_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.av_address            (mm_bridge_m0_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (mm_bridge_m0_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (mm_bridge_m0_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (mm_bridge_m0_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (mm_bridge_m0_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (mm_bridge_m0_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (mm_bridge_m0_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (mm_bridge_m0_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (mm_bridge_m0_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (mm_bridge_m0_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (mm_bridge_m0_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (mm_bridge_m0_agent_cp_valid),                                     //        cp.valid
		.cp_data               (mm_bridge_m0_agent_cp_data),                                      //          .data
		.cp_startofpacket      (mm_bridge_m0_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (mm_bridge_m0_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (mm_bridge_m0_agent_cp_ready),                                     //          .ready
		.rp_valid              (mm_bridge_m0_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data               (mm_bridge_m0_limiter_rsp_src_data),                               //          .data
		.rp_channel            (mm_bridge_m0_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket      (mm_bridge_m0_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket        (mm_bridge_m0_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready              (mm_bridge_m0_limiter_rsp_src_ready),                              //          .ready
		.av_response           (),                                                                // (terminated)
		.av_writeresponsevalid ()                                                                 // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (88),
		.PKT_ORI_BURST_SIZE_L      (86),
		.PKT_RESPONSE_STATUS_H     (85),
		.PKT_RESPONSE_STATUS_L     (84),
		.PKT_QOS_H                 (67),
		.PKT_QOS_L                 (67),
		.PKT_DATA_SIDEBAND_H       (65),
		.PKT_DATA_SIDEBAND_L       (65),
		.PKT_ADDR_SIDEBAND_H       (64),
		.PKT_ADDR_SIDEBAND_L       (64),
		.PKT_BURST_TYPE_H          (63),
		.PKT_BURST_TYPE_L          (62),
		.PKT_CACHE_H               (83),
		.PKT_CACHE_L               (80),
		.PKT_THREAD_ID_H           (76),
		.PKT_THREAD_ID_L           (76),
		.PKT_BURST_SIZE_H          (61),
		.PKT_BURST_SIZE_L          (59),
		.PKT_TRANS_EXCLUSIVE       (46),
		.PKT_TRANS_LOCK            (45),
		.PKT_BEGIN_BURST           (66),
		.PKT_PROTECTION_H          (79),
		.PKT_PROTECTION_L          (77),
		.PKT_BURSTWRAP_H           (58),
		.PKT_BURSTWRAP_L           (58),
		.PKT_BYTE_CNT_H            (57),
		.PKT_BYTE_CNT_L            (47),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (71),
		.PKT_SRC_ID_L              (68),
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (72),
		.ST_DATA_W                 (89),
		.ST_CHANNEL_W              (12),
		.AV_BURSTCOUNT_W           (1),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (5),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pc_dma_avalon_master_agent (
		.clk                   (pll_0_outclk0_clk),                                                       //       clk.clk
		.reset                 (floppy0_reset_sink_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.av_address            (pc_dma_avalon_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (pc_dma_avalon_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (pc_dma_avalon_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (pc_dma_avalon_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (pc_dma_avalon_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (pc_dma_avalon_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (pc_dma_avalon_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (pc_dma_avalon_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (pc_dma_avalon_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (pc_dma_avalon_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (pc_dma_avalon_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (pc_dma_avalon_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (pc_dma_avalon_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (pc_dma_avalon_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (pc_dma_avalon_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (pc_dma_avalon_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_004_src_valid),                                                   //        rp.valid
		.rp_data               (rsp_mux_004_src_data),                                                    //          .data
		.rp_channel            (rsp_mux_004_src_channel),                                                 //          .channel
		.rp_startofpacket      (rsp_mux_004_src_startofpacket),                                           //          .startofpacket
		.rp_endofpacket        (rsp_mux_004_src_endofpacket),                                             //          .endofpacket
		.rp_ready              (rsp_mux_004_src_ready),                                                   //          .ready
		.av_response           (),                                                                        // (terminated)
		.av_writeresponsevalid ()                                                                         // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_QOS_H                 (94),
		.PKT_QOS_L                 (94),
		.PKT_DATA_SIDEBAND_H       (92),
		.PKT_DATA_SIDEBAND_L       (92),
		.PKT_ADDR_SIDEBAND_H       (91),
		.PKT_ADDR_SIDEBAND_L       (91),
		.PKT_BURST_TYPE_H          (90),
		.PKT_BURST_TYPE_L          (89),
		.PKT_CACHE_H               (110),
		.PKT_CACHE_L               (107),
		.PKT_THREAD_ID_H           (103),
		.PKT_THREAD_ID_L           (103),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (93),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (99),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (12),
		.AV_BURSTCOUNT_W           (5),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (4),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pc_bus_avalon_sdram_master_agent (
		.clk                   (pll_0_outclk0_clk),                                                             //       clk.clk
		.reset                 (floppy0_reset_sink_reset_bridge_in_reset_reset),                                // clk_reset.reset
		.av_address            (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (pc_bus_avalon_sdram_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (pc_bus_avalon_sdram_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (pc_bus_avalon_sdram_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (pc_bus_avalon_sdram_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (pc_bus_avalon_sdram_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (pc_bus_avalon_sdram_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_005_src_valid),                                                         //        rp.valid
		.rp_data               (rsp_mux_005_src_data),                                                          //          .data
		.rp_channel            (rsp_mux_005_src_channel),                                                       //          .channel
		.rp_startofpacket      (rsp_mux_005_src_startofpacket),                                                 //          .startofpacket
		.rp_endofpacket        (rsp_mux_005_src_endofpacket),                                                   //          .endofpacket
		.rp_ready              (rsp_mux_005_src_ready),                                                         //          .ready
		.av_response           (),                                                                              // (terminated)
		.av_writeresponsevalid ()                                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (93),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) driver_sd_avalon_slave_0_agent (
		.clk                     (pll_0_outclk0_clk),                                         //             clk.clk
		.reset                   (floppy0_reset_sink_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (driver_sd_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (driver_sd_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (driver_sd_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (driver_sd_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (driver_sd_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (driver_sd_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (driver_sd_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (driver_sd_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (driver_sd_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (driver_sd_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (driver_sd_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (driver_sd_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (driver_sd_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (driver_sd_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (driver_sd_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (driver_sd_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                       //                .channel
		.rf_sink_ready           (driver_sd_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (driver_sd_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (driver_sd_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (driver_sd_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (driver_sd_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (driver_sd_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (driver_sd_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (driver_sd_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (driver_sd_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (driver_sd_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (driver_sd_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (driver_sd_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (driver_sd_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) driver_sd_avalon_slave_0_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                         //       clk.clk
		.reset             (floppy0_reset_sink_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (driver_sd_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (driver_sd_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (driver_sd_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (driver_sd_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (driver_sd_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (driver_sd_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (driver_sd_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (driver_sd_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (driver_sd_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (driver_sd_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (93),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pc_bus_ctrl_agent (
		.clk                     (pll_0_outclk0_clk),                              //             clk.clk
		.reset                   (floppy0_reset_sink_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pc_bus_ctrl_agent_m0_address),                   //              m0.address
		.m0_burstcount           (pc_bus_ctrl_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (pc_bus_ctrl_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (pc_bus_ctrl_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (pc_bus_ctrl_agent_m0_lock),                      //                .lock
		.m0_readdata             (pc_bus_ctrl_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (pc_bus_ctrl_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (pc_bus_ctrl_agent_m0_read),                      //                .read
		.m0_waitrequest          (pc_bus_ctrl_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (pc_bus_ctrl_agent_m0_writedata),                 //                .writedata
		.m0_write                (pc_bus_ctrl_agent_m0_write),                     //                .write
		.rp_endofpacket          (pc_bus_ctrl_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (pc_bus_ctrl_agent_rp_ready),                     //                .ready
		.rp_valid                (pc_bus_ctrl_agent_rp_valid),                     //                .valid
		.rp_data                 (pc_bus_ctrl_agent_rp_data),                      //                .data
		.rp_startofpacket        (pc_bus_ctrl_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_001_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                        //                .channel
		.rf_sink_ready           (pc_bus_ctrl_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (pc_bus_ctrl_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (pc_bus_ctrl_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (pc_bus_ctrl_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (pc_bus_ctrl_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (pc_bus_ctrl_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (pc_bus_ctrl_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (pc_bus_ctrl_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (pc_bus_ctrl_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (pc_bus_ctrl_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),              //                .error
		.rdata_fifo_src_ready    (pc_bus_ctrl_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pc_bus_ctrl_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (pc_bus_ctrl_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pc_bus_ctrl_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                              //       clk.clk
		.reset             (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pc_bus_ctrl_agent_rf_source_data),               //        in.data
		.in_valid          (pc_bus_ctrl_agent_rf_source_valid),              //          .valid
		.in_ready          (pc_bus_ctrl_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (pc_bus_ctrl_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (pc_bus_ctrl_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (pc_bus_ctrl_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (pc_bus_ctrl_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (pc_bus_ctrl_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (pc_bus_ctrl_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (pc_bus_ctrl_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (93),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) floppy0_mgmt_agent (
		.clk                     (pll_0_outclk0_clk),                              //             clk.clk
		.reset                   (floppy0_reset_sink_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (floppy0_mgmt_agent_m0_address),                  //              m0.address
		.m0_burstcount           (floppy0_mgmt_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (floppy0_mgmt_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (floppy0_mgmt_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (floppy0_mgmt_agent_m0_lock),                     //                .lock
		.m0_readdata             (floppy0_mgmt_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (floppy0_mgmt_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (floppy0_mgmt_agent_m0_read),                     //                .read
		.m0_waitrequest          (floppy0_mgmt_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (floppy0_mgmt_agent_m0_writedata),                //                .writedata
		.m0_write                (floppy0_mgmt_agent_m0_write),                    //                .write
		.rp_endofpacket          (floppy0_mgmt_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (floppy0_mgmt_agent_rp_ready),                    //                .ready
		.rp_valid                (floppy0_mgmt_agent_rp_valid),                    //                .valid
		.rp_data                 (floppy0_mgmt_agent_rp_data),                     //                .data
		.rp_startofpacket        (floppy0_mgmt_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_002_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                        //                .channel
		.rf_sink_ready           (floppy0_mgmt_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (floppy0_mgmt_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (floppy0_mgmt_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (floppy0_mgmt_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (floppy0_mgmt_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (floppy0_mgmt_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (floppy0_mgmt_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (floppy0_mgmt_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (floppy0_mgmt_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (floppy0_mgmt_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),              //                .error
		.rdata_fifo_src_ready    (floppy0_mgmt_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (floppy0_mgmt_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (floppy0_mgmt_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) floppy0_mgmt_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                              //       clk.clk
		.reset             (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (floppy0_mgmt_agent_rf_source_data),              //        in.data
		.in_valid          (floppy0_mgmt_agent_rf_source_valid),             //          .valid
		.in_ready          (floppy0_mgmt_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (floppy0_mgmt_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (floppy0_mgmt_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (floppy0_mgmt_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (floppy0_mgmt_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (floppy0_mgmt_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (floppy0_mgmt_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (floppy0_mgmt_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (93),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hdd0_mgmt_agent (
		.clk                     (pll_0_outclk0_clk),                              //             clk.clk
		.reset                   (floppy0_reset_sink_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (hdd0_mgmt_agent_m0_address),                     //              m0.address
		.m0_burstcount           (hdd0_mgmt_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (hdd0_mgmt_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (hdd0_mgmt_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (hdd0_mgmt_agent_m0_lock),                        //                .lock
		.m0_readdata             (hdd0_mgmt_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (hdd0_mgmt_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (hdd0_mgmt_agent_m0_read),                        //                .read
		.m0_waitrequest          (hdd0_mgmt_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (hdd0_mgmt_agent_m0_writedata),                   //                .writedata
		.m0_write                (hdd0_mgmt_agent_m0_write),                       //                .write
		.rp_endofpacket          (hdd0_mgmt_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (hdd0_mgmt_agent_rp_ready),                       //                .ready
		.rp_valid                (hdd0_mgmt_agent_rp_valid),                       //                .valid
		.rp_data                 (hdd0_mgmt_agent_rp_data),                        //                .data
		.rp_startofpacket        (hdd0_mgmt_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_003_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                        //                .channel
		.rf_sink_ready           (hdd0_mgmt_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (hdd0_mgmt_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (hdd0_mgmt_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (hdd0_mgmt_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (hdd0_mgmt_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (hdd0_mgmt_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (hdd0_mgmt_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (hdd0_mgmt_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (hdd0_mgmt_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (hdd0_mgmt_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),              //                .error
		.rdata_fifo_src_ready    (hdd0_mgmt_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hdd0_mgmt_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (hdd0_mgmt_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hdd0_mgmt_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                              //       clk.clk
		.reset             (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hdd0_mgmt_agent_rf_source_data),                 //        in.data
		.in_valid          (hdd0_mgmt_agent_rf_source_valid),                //          .valid
		.in_ready          (hdd0_mgmt_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (hdd0_mgmt_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (hdd0_mgmt_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (hdd0_mgmt_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (hdd0_mgmt_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (hdd0_mgmt_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (hdd0_mgmt_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (hdd0_mgmt_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (93),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) rtc_mgmt_agent (
		.clk                     (pll_0_outclk0_clk),                              //             clk.clk
		.reset                   (floppy0_reset_sink_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (rtc_mgmt_agent_m0_address),                      //              m0.address
		.m0_burstcount           (rtc_mgmt_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (rtc_mgmt_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (rtc_mgmt_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (rtc_mgmt_agent_m0_lock),                         //                .lock
		.m0_readdata             (rtc_mgmt_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (rtc_mgmt_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (rtc_mgmt_agent_m0_read),                         //                .read
		.m0_waitrequest          (rtc_mgmt_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (rtc_mgmt_agent_m0_writedata),                    //                .writedata
		.m0_write                (rtc_mgmt_agent_m0_write),                        //                .write
		.rp_endofpacket          (rtc_mgmt_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (rtc_mgmt_agent_rp_ready),                        //                .ready
		.rp_valid                (rtc_mgmt_agent_rp_valid),                        //                .valid
		.rp_data                 (rtc_mgmt_agent_rp_data),                         //                .data
		.rp_startofpacket        (rtc_mgmt_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_004_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                        //                .channel
		.rf_sink_ready           (rtc_mgmt_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (rtc_mgmt_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (rtc_mgmt_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (rtc_mgmt_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (rtc_mgmt_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (rtc_mgmt_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (rtc_mgmt_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (rtc_mgmt_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (rtc_mgmt_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (rtc_mgmt_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),              //                .error
		.rdata_fifo_src_ready    (rtc_mgmt_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rtc_mgmt_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (rtc_mgmt_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rtc_mgmt_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                              //       clk.clk
		.reset             (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (rtc_mgmt_agent_rf_source_data),                  //        in.data
		.in_valid          (rtc_mgmt_agent_rf_source_valid),                 //          .valid
		.in_ready          (rtc_mgmt_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (rtc_mgmt_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (rtc_mgmt_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (rtc_mgmt_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (rtc_mgmt_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (rtc_mgmt_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (rtc_mgmt_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (rtc_mgmt_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (93),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sound_mgmt_agent (
		.clk                     (pll_0_outclk0_clk),                              //             clk.clk
		.reset                   (floppy0_reset_sink_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (sound_mgmt_agent_m0_address),                    //              m0.address
		.m0_burstcount           (sound_mgmt_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (sound_mgmt_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (sound_mgmt_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (sound_mgmt_agent_m0_lock),                       //                .lock
		.m0_readdata             (sound_mgmt_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (sound_mgmt_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (sound_mgmt_agent_m0_read),                       //                .read
		.m0_waitrequest          (sound_mgmt_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (sound_mgmt_agent_m0_writedata),                  //                .writedata
		.m0_write                (sound_mgmt_agent_m0_write),                      //                .write
		.rp_endofpacket          (sound_mgmt_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (sound_mgmt_agent_rp_ready),                      //                .ready
		.rp_valid                (sound_mgmt_agent_rp_valid),                      //                .valid
		.rp_data                 (sound_mgmt_agent_rp_data),                       //                .data
		.rp_startofpacket        (sound_mgmt_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_005_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                        //                .channel
		.rf_sink_ready           (sound_mgmt_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (sound_mgmt_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (sound_mgmt_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (sound_mgmt_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (sound_mgmt_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (sound_mgmt_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (sound_mgmt_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (sound_mgmt_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (sound_mgmt_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (sound_mgmt_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),              //                .error
		.rdata_fifo_src_ready    (sound_mgmt_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sound_mgmt_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (sound_mgmt_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sound_mgmt_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                              //       clk.clk
		.reset             (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (sound_mgmt_agent_rf_source_data),                //        in.data
		.in_valid          (sound_mgmt_agent_rf_source_valid),               //          .valid
		.in_ready          (sound_mgmt_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (sound_mgmt_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (sound_mgmt_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (sound_mgmt_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (sound_mgmt_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (sound_mgmt_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (sound_mgmt_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (sound_mgmt_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (93),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pit_mgmt_agent (
		.clk                     (pll_0_outclk0_clk),                              //             clk.clk
		.reset                   (floppy0_reset_sink_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pit_mgmt_agent_m0_address),                      //              m0.address
		.m0_burstcount           (pit_mgmt_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (pit_mgmt_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (pit_mgmt_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (pit_mgmt_agent_m0_lock),                         //                .lock
		.m0_readdata             (pit_mgmt_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (pit_mgmt_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (pit_mgmt_agent_m0_read),                         //                .read
		.m0_waitrequest          (pit_mgmt_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (pit_mgmt_agent_m0_writedata),                    //                .writedata
		.m0_write                (pit_mgmt_agent_m0_write),                        //                .write
		.rp_endofpacket          (pit_mgmt_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (pit_mgmt_agent_rp_ready),                        //                .ready
		.rp_valid                (pit_mgmt_agent_rp_valid),                        //                .valid
		.rp_data                 (pit_mgmt_agent_rp_data),                         //                .data
		.rp_startofpacket        (pit_mgmt_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_006_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                        //                .channel
		.rf_sink_ready           (pit_mgmt_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (pit_mgmt_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (pit_mgmt_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (pit_mgmt_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (pit_mgmt_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (pit_mgmt_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (pit_mgmt_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (pit_mgmt_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (pit_mgmt_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (pit_mgmt_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),              //                .error
		.rdata_fifo_src_ready    (pit_mgmt_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pit_mgmt_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (pit_mgmt_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pit_mgmt_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                              //       clk.clk
		.reset             (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pit_mgmt_agent_rf_source_data),                  //        in.data
		.in_valid          (pit_mgmt_agent_rf_source_valid),                 //          .valid
		.in_ready          (pit_mgmt_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (pit_mgmt_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (pit_mgmt_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (pit_mgmt_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (pit_mgmt_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (pit_mgmt_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (pit_mgmt_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (pit_mgmt_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (93),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hdd1_mgmt_agent (
		.clk                     (pll_0_outclk0_clk),                              //             clk.clk
		.reset                   (floppy0_reset_sink_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (hdd1_mgmt_agent_m0_address),                     //              m0.address
		.m0_burstcount           (hdd1_mgmt_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (hdd1_mgmt_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (hdd1_mgmt_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (hdd1_mgmt_agent_m0_lock),                        //                .lock
		.m0_readdata             (hdd1_mgmt_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (hdd1_mgmt_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (hdd1_mgmt_agent_m0_read),                        //                .read
		.m0_waitrequest          (hdd1_mgmt_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (hdd1_mgmt_agent_m0_writedata),                   //                .writedata
		.m0_write                (hdd1_mgmt_agent_m0_write),                       //                .write
		.rp_endofpacket          (hdd1_mgmt_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (hdd1_mgmt_agent_rp_ready),                       //                .ready
		.rp_valid                (hdd1_mgmt_agent_rp_valid),                       //                .valid
		.rp_data                 (hdd1_mgmt_agent_rp_data),                        //                .data
		.rp_startofpacket        (hdd1_mgmt_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_007_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                        //                .channel
		.rf_sink_ready           (hdd1_mgmt_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (hdd1_mgmt_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (hdd1_mgmt_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (hdd1_mgmt_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (hdd1_mgmt_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (hdd1_mgmt_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (hdd1_mgmt_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (hdd1_mgmt_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (hdd1_mgmt_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (hdd1_mgmt_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),              //                .error
		.rdata_fifo_src_ready    (hdd1_mgmt_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hdd1_mgmt_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (hdd1_mgmt_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hdd1_mgmt_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                              //       clk.clk
		.reset             (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hdd1_mgmt_agent_rf_source_data),                 //        in.data
		.in_valid          (hdd1_mgmt_agent_rf_source_valid),                //          .valid
		.in_ready          (hdd1_mgmt_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (hdd1_mgmt_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (hdd1_mgmt_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (hdd1_mgmt_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (hdd1_mgmt_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (hdd1_mgmt_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (hdd1_mgmt_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (hdd1_mgmt_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (88),
		.PKT_ORI_BURST_SIZE_L      (86),
		.PKT_RESPONSE_STATUS_H     (85),
		.PKT_RESPONSE_STATUS_L     (84),
		.PKT_BURST_SIZE_H          (61),
		.PKT_BURST_SIZE_L          (59),
		.PKT_TRANS_LOCK            (45),
		.PKT_BEGIN_BURST           (66),
		.PKT_PROTECTION_H          (79),
		.PKT_PROTECTION_L          (77),
		.PKT_BURSTWRAP_H           (58),
		.PKT_BURSTWRAP_L           (58),
		.PKT_BYTE_CNT_H            (57),
		.PKT_BYTE_CNT_L            (47),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (71),
		.PKT_SRC_ID_L              (68),
		.PKT_DEST_ID_H             (75),
		.PKT_DEST_ID_L             (72),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (89),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) floppy0_sd_slave_agent (
		.clk                     (pll_0_outclk0_clk),                                    //             clk.clk
		.reset                   (floppy0_reset_sink_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (floppy0_sd_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (floppy0_sd_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (floppy0_sd_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (floppy0_sd_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (floppy0_sd_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (floppy0_sd_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (floppy0_sd_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (floppy0_sd_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (floppy0_sd_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (floppy0_sd_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (floppy0_sd_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (floppy0_sd_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (floppy0_sd_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (floppy0_sd_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (floppy0_sd_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (floppy0_sd_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (floppy0_sd_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (floppy0_sd_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (floppy0_sd_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (floppy0_sd_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (floppy0_sd_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (floppy0_sd_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (floppy0_sd_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (floppy0_sd_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (floppy0_sd_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (floppy0_sd_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (floppy0_sd_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (floppy0_sd_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (floppy0_sd_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (floppy0_sd_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (floppy0_sd_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (floppy0_sd_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (floppy0_sd_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (floppy0_sd_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (floppy0_sd_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (90),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) floppy0_sd_slave_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                 //       clk.clk
		.reset             (floppy0_reset_sink_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (floppy0_sd_slave_agent_rf_source_data),             //        in.data
		.in_valid          (floppy0_sd_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (floppy0_sd_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (floppy0_sd_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (floppy0_sd_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (floppy0_sd_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (floppy0_sd_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (floppy0_sd_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (floppy0_sd_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (floppy0_sd_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (93),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hdd0_sd_slave_agent (
		.clk                     (pll_0_outclk0_clk),                              //             clk.clk
		.reset                   (floppy0_reset_sink_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (hdd0_sd_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hdd0_sd_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hdd0_sd_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hdd0_sd_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hdd0_sd_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (hdd0_sd_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hdd0_sd_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hdd0_sd_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (hdd0_sd_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hdd0_sd_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (hdd0_sd_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (hdd0_sd_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hdd0_sd_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (hdd0_sd_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (hdd0_sd_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (hdd0_sd_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_009_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                        //                .channel
		.rf_sink_ready           (hdd0_sd_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hdd0_sd_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hdd0_sd_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hdd0_sd_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hdd0_sd_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hdd0_sd_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hdd0_sd_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hdd0_sd_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hdd0_sd_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hdd0_sd_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),              //                .error
		.rdata_fifo_src_ready    (hdd0_sd_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hdd0_sd_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hdd0_sd_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hdd0_sd_slave_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                              //       clk.clk
		.reset             (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hdd0_sd_slave_agent_rf_source_data),             //        in.data
		.in_valid          (hdd0_sd_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (hdd0_sd_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hdd0_sd_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hdd0_sd_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hdd0_sd_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hdd0_sd_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hdd0_sd_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hdd0_sd_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hdd0_sd_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (115),
		.PKT_ORI_BURST_SIZE_L      (113),
		.PKT_RESPONSE_STATUS_H     (112),
		.PKT_RESPONSE_STATUS_L     (111),
		.PKT_BURST_SIZE_H          (88),
		.PKT_BURST_SIZE_L          (86),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (93),
		.PKT_PROTECTION_H          (106),
		.PKT_PROTECTION_L          (104),
		.PKT_BURSTWRAP_H           (85),
		.PKT_BURSTWRAP_L           (85),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (95),
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (99),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (116),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) hdd1_sd_slave_agent (
		.clk                     (pll_0_outclk0_clk),                              //             clk.clk
		.reset                   (floppy0_reset_sink_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (hdd1_sd_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hdd1_sd_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hdd1_sd_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hdd1_sd_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hdd1_sd_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (hdd1_sd_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hdd1_sd_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hdd1_sd_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (hdd1_sd_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hdd1_sd_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (hdd1_sd_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (hdd1_sd_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hdd1_sd_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (hdd1_sd_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (hdd1_sd_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (hdd1_sd_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_010_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                        //                .channel
		.rf_sink_ready           (hdd1_sd_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hdd1_sd_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hdd1_sd_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hdd1_sd_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hdd1_sd_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hdd1_sd_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hdd1_sd_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hdd1_sd_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hdd1_sd_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hdd1_sd_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),              //                .error
		.rdata_fifo_src_ready    (hdd1_sd_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hdd1_sd_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hdd1_sd_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (117),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hdd1_sd_slave_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                              //       clk.clk
		.reset             (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (hdd1_sd_slave_agent_rf_source_data),             //        in.data
		.in_valid          (hdd1_sd_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (hdd1_sd_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hdd1_sd_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hdd1_sd_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hdd1_sd_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hdd1_sd_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hdd1_sd_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hdd1_sd_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hdd1_sd_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (151),
		.PKT_ORI_BURST_SIZE_L      (149),
		.PKT_RESPONSE_STATUS_H     (148),
		.PKT_RESPONSE_STATUS_L     (147),
		.PKT_BURST_SIZE_H          (124),
		.PKT_BURST_SIZE_L          (122),
		.PKT_TRANS_LOCK            (108),
		.PKT_BEGIN_BURST           (129),
		.PKT_PROTECTION_H          (142),
		.PKT_PROTECTION_L          (140),
		.PKT_BURSTWRAP_H           (121),
		.PKT_BURSTWRAP_L           (121),
		.PKT_BYTE_CNT_H            (120),
		.PKT_BYTE_CNT_L            (110),
		.PKT_ADDR_H                (103),
		.PKT_ADDR_L                (72),
		.PKT_TRANS_COMPRESSED_READ (104),
		.PKT_TRANS_POSTED          (105),
		.PKT_TRANS_WRITE           (106),
		.PKT_TRANS_READ            (107),
		.PKT_DATA_H                (63),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (71),
		.PKT_BYTEEN_L              (64),
		.PKT_SRC_ID_H              (134),
		.PKT_SRC_ID_L              (131),
		.PKT_DEST_ID_H             (138),
		.PKT_DEST_ID_L             (135),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (12),
		.ST_DATA_W                 (152),
		.AVS_BURSTCOUNT_W          (11),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) address_span_extender_windowed_slave_agent (
		.clk                     (pll_0_outclk0_clk),                                                     //             clk.clk
		.reset                   (floppy0_reset_sink_reset_bridge_in_reset_reset),                        //       clk_reset.reset
		.m0_address              (address_span_extender_windowed_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (address_span_extender_windowed_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (address_span_extender_windowed_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (address_span_extender_windowed_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (address_span_extender_windowed_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (address_span_extender_windowed_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (address_span_extender_windowed_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (address_span_extender_windowed_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (address_span_extender_windowed_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (address_span_extender_windowed_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (address_span_extender_windowed_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (address_span_extender_windowed_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (address_span_extender_windowed_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (address_span_extender_windowed_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (address_span_extender_windowed_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (address_span_extender_windowed_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                                                 //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                                                 //                .valid
		.cp_data                 (cmd_mux_011_src_data),                                                  //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                                           //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                                               //                .channel
		.rf_sink_ready           (address_span_extender_windowed_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (address_span_extender_windowed_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (address_span_extender_windowed_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (address_span_extender_windowed_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (address_span_extender_windowed_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (address_span_extender_windowed_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (address_span_extender_windowed_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (address_span_extender_windowed_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (address_span_extender_windowed_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (address_span_extender_windowed_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (address_span_extender_windowed_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (address_span_extender_windowed_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (address_span_extender_windowed_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                                 //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (153),
		.FIFO_DEPTH          (9),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) address_span_extender_windowed_slave_agent_rsp_fifo (
		.clk               (pll_0_outclk0_clk),                                                     //       clk.clk
		.reset             (floppy0_reset_sink_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.in_data           (address_span_extender_windowed_slave_agent_rf_source_data),             //        in.data
		.in_valid          (address_span_extender_windowed_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (address_span_extender_windowed_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (address_span_extender_windowed_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (address_span_extender_windowed_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (address_span_extender_windowed_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (address_span_extender_windowed_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (address_span_extender_windowed_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (address_span_extender_windowed_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (address_span_extender_windowed_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                                 // (terminated)
		.csr_read          (1'b0),                                                                  // (terminated)
		.csr_write         (1'b0),                                                                  // (terminated)
		.csr_readdata      (),                                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                  // (terminated)
		.almost_full_data  (),                                                                      // (terminated)
		.almost_empty_data (),                                                                      // (terminated)
		.in_empty          (1'b0),                                                                  // (terminated)
		.out_empty         (),                                                                      // (terminated)
		.in_error          (1'b0),                                                                  // (terminated)
		.out_error         (),                                                                      // (terminated)
		.in_channel        (1'b0),                                                                  // (terminated)
		.out_channel       ()                                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (66),
		.FIFO_DEPTH          (32),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (3),
		.USE_MEMORY_BLOCKS   (1),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) address_span_extender_windowed_slave_agent_rdata_fifo (
		.clk               (pll_0_outclk0_clk),                                               //       clk.clk
		.reset             (floppy0_reset_sink_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (address_span_extender_windowed_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (address_span_extender_windowed_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (address_span_extender_windowed_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (address_span_extender_windowed_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (address_span_extender_windowed_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (address_span_extender_windowed_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_startofpacket  (1'b0),                                                            // (terminated)
		.in_endofpacket    (1'b0),                                                            // (terminated)
		.out_startofpacket (),                                                                // (terminated)
		.out_endofpacket   (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	system_mm_interconnect_1_router router (
		.sink_ready         (floppy0_avalon_master_agent_cp_ready),           //      sink.ready
		.sink_valid         (floppy0_avalon_master_agent_cp_valid),           //          .valid
		.sink_data          (floppy0_avalon_master_agent_cp_data),            //          .data
		.sink_startofpacket (floppy0_avalon_master_agent_cp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (floppy0_avalon_master_agent_cp_endofpacket),     //          .endofpacket
		.clk                (pll_0_outclk0_clk),                              //       clk.clk
		.reset              (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                               //       src.ready
		.src_valid          (router_src_valid),                               //          .valid
		.src_data           (router_src_data),                                //          .data
		.src_channel        (router_src_channel),                             //          .channel
		.src_startofpacket  (router_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                          //          .endofpacket
	);

	system_mm_interconnect_1_router router_001 (
		.sink_ready         (hdd0_avalon_master_agent_cp_ready),              //      sink.ready
		.sink_valid         (hdd0_avalon_master_agent_cp_valid),              //          .valid
		.sink_data          (hdd0_avalon_master_agent_cp_data),               //          .data
		.sink_startofpacket (hdd0_avalon_master_agent_cp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (hdd0_avalon_master_agent_cp_endofpacket),        //          .endofpacket
		.clk                (pll_0_outclk0_clk),                              //       clk.clk
		.reset              (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                           //       src.ready
		.src_valid          (router_001_src_valid),                           //          .valid
		.src_data           (router_001_src_data),                            //          .data
		.src_channel        (router_001_src_channel),                         //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                      //          .endofpacket
	);

	system_mm_interconnect_1_router router_002 (
		.sink_ready         (hdd1_avalon_master_agent_cp_ready),              //      sink.ready
		.sink_valid         (hdd1_avalon_master_agent_cp_valid),              //          .valid
		.sink_data          (hdd1_avalon_master_agent_cp_data),               //          .data
		.sink_startofpacket (hdd1_avalon_master_agent_cp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (hdd1_avalon_master_agent_cp_endofpacket),        //          .endofpacket
		.clk                (pll_0_outclk0_clk),                              //       clk.clk
		.reset              (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                           //       src.ready
		.src_valid          (router_002_src_valid),                           //          .valid
		.src_data           (router_002_src_data),                            //          .data
		.src_channel        (router_002_src_channel),                         //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                      //          .endofpacket
	);

	system_mm_interconnect_1_router_003 router_003 (
		.sink_ready         (mm_bridge_m0_agent_cp_ready),                    //      sink.ready
		.sink_valid         (mm_bridge_m0_agent_cp_valid),                    //          .valid
		.sink_data          (mm_bridge_m0_agent_cp_data),                     //          .data
		.sink_startofpacket (mm_bridge_m0_agent_cp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (mm_bridge_m0_agent_cp_endofpacket),              //          .endofpacket
		.clk                (pll_0_outclk0_clk),                              //       clk.clk
		.reset              (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                           //       src.ready
		.src_valid          (router_003_src_valid),                           //          .valid
		.src_data           (router_003_src_data),                            //          .data
		.src_channel        (router_003_src_channel),                         //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                      //          .endofpacket
	);

	system_mm_interconnect_1_router_004 router_004 (
		.sink_ready         (pc_dma_avalon_master_agent_cp_ready),            //      sink.ready
		.sink_valid         (pc_dma_avalon_master_agent_cp_valid),            //          .valid
		.sink_data          (pc_dma_avalon_master_agent_cp_data),             //          .data
		.sink_startofpacket (pc_dma_avalon_master_agent_cp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (pc_dma_avalon_master_agent_cp_endofpacket),      //          .endofpacket
		.clk                (pll_0_outclk0_clk),                              //       clk.clk
		.reset              (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                           //       src.ready
		.src_valid          (router_004_src_valid),                           //          .valid
		.src_data           (router_004_src_data),                            //          .data
		.src_channel        (router_004_src_channel),                         //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                      //          .endofpacket
	);

	system_mm_interconnect_1_router_005 router_005 (
		.sink_ready         (pc_bus_avalon_sdram_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (pc_bus_avalon_sdram_master_agent_cp_valid),         //          .valid
		.sink_data          (pc_bus_avalon_sdram_master_agent_cp_data),          //          .data
		.sink_startofpacket (pc_bus_avalon_sdram_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pc_bus_avalon_sdram_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                 //       clk.clk
		.reset              (floppy0_reset_sink_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_005_src_ready),                              //       src.ready
		.src_valid          (router_005_src_valid),                              //          .valid
		.src_data           (router_005_src_data),                               //          .data
		.src_channel        (router_005_src_channel),                            //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                         //          .endofpacket
	);

	system_mm_interconnect_1_router_006 router_006 (
		.sink_ready         (driver_sd_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (driver_sd_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (driver_sd_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (driver_sd_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (driver_sd_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_0_outclk0_clk),                               //       clk.clk
		.reset              (floppy0_reset_sink_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_006_src_ready),                            //       src.ready
		.src_valid          (router_006_src_valid),                            //          .valid
		.src_data           (router_006_src_data),                             //          .data
		.src_channel        (router_006_src_channel),                          //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                       //          .endofpacket
	);

	system_mm_interconnect_1_router_007 router_007 (
		.sink_ready         (pc_bus_ctrl_agent_rp_ready),                     //      sink.ready
		.sink_valid         (pc_bus_ctrl_agent_rp_valid),                     //          .valid
		.sink_data          (pc_bus_ctrl_agent_rp_data),                      //          .data
		.sink_startofpacket (pc_bus_ctrl_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (pc_bus_ctrl_agent_rp_endofpacket),               //          .endofpacket
		.clk                (pll_0_outclk0_clk),                              //       clk.clk
		.reset              (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                           //       src.ready
		.src_valid          (router_007_src_valid),                           //          .valid
		.src_data           (router_007_src_data),                            //          .data
		.src_channel        (router_007_src_channel),                         //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                      //          .endofpacket
	);

	system_mm_interconnect_1_router_007 router_008 (
		.sink_ready         (floppy0_mgmt_agent_rp_ready),                    //      sink.ready
		.sink_valid         (floppy0_mgmt_agent_rp_valid),                    //          .valid
		.sink_data          (floppy0_mgmt_agent_rp_data),                     //          .data
		.sink_startofpacket (floppy0_mgmt_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (floppy0_mgmt_agent_rp_endofpacket),              //          .endofpacket
		.clk                (pll_0_outclk0_clk),                              //       clk.clk
		.reset              (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                           //       src.ready
		.src_valid          (router_008_src_valid),                           //          .valid
		.src_data           (router_008_src_data),                            //          .data
		.src_channel        (router_008_src_channel),                         //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                      //          .endofpacket
	);

	system_mm_interconnect_1_router_007 router_009 (
		.sink_ready         (hdd0_mgmt_agent_rp_ready),                       //      sink.ready
		.sink_valid         (hdd0_mgmt_agent_rp_valid),                       //          .valid
		.sink_data          (hdd0_mgmt_agent_rp_data),                        //          .data
		.sink_startofpacket (hdd0_mgmt_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (hdd0_mgmt_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (pll_0_outclk0_clk),                              //       clk.clk
		.reset              (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                           //       src.ready
		.src_valid          (router_009_src_valid),                           //          .valid
		.src_data           (router_009_src_data),                            //          .data
		.src_channel        (router_009_src_channel),                         //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                      //          .endofpacket
	);

	system_mm_interconnect_1_router_007 router_010 (
		.sink_ready         (rtc_mgmt_agent_rp_ready),                        //      sink.ready
		.sink_valid         (rtc_mgmt_agent_rp_valid),                        //          .valid
		.sink_data          (rtc_mgmt_agent_rp_data),                         //          .data
		.sink_startofpacket (rtc_mgmt_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (rtc_mgmt_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (pll_0_outclk0_clk),                              //       clk.clk
		.reset              (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                           //       src.ready
		.src_valid          (router_010_src_valid),                           //          .valid
		.src_data           (router_010_src_data),                            //          .data
		.src_channel        (router_010_src_channel),                         //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                      //          .endofpacket
	);

	system_mm_interconnect_1_router_007 router_011 (
		.sink_ready         (sound_mgmt_agent_rp_ready),                      //      sink.ready
		.sink_valid         (sound_mgmt_agent_rp_valid),                      //          .valid
		.sink_data          (sound_mgmt_agent_rp_data),                       //          .data
		.sink_startofpacket (sound_mgmt_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (sound_mgmt_agent_rp_endofpacket),                //          .endofpacket
		.clk                (pll_0_outclk0_clk),                              //       clk.clk
		.reset              (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                           //       src.ready
		.src_valid          (router_011_src_valid),                           //          .valid
		.src_data           (router_011_src_data),                            //          .data
		.src_channel        (router_011_src_channel),                         //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                      //          .endofpacket
	);

	system_mm_interconnect_1_router_007 router_012 (
		.sink_ready         (pit_mgmt_agent_rp_ready),                        //      sink.ready
		.sink_valid         (pit_mgmt_agent_rp_valid),                        //          .valid
		.sink_data          (pit_mgmt_agent_rp_data),                         //          .data
		.sink_startofpacket (pit_mgmt_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (pit_mgmt_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (pll_0_outclk0_clk),                              //       clk.clk
		.reset              (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                           //       src.ready
		.src_valid          (router_012_src_valid),                           //          .valid
		.src_data           (router_012_src_data),                            //          .data
		.src_channel        (router_012_src_channel),                         //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                      //          .endofpacket
	);

	system_mm_interconnect_1_router_007 router_013 (
		.sink_ready         (hdd1_mgmt_agent_rp_ready),                       //      sink.ready
		.sink_valid         (hdd1_mgmt_agent_rp_valid),                       //          .valid
		.sink_data          (hdd1_mgmt_agent_rp_data),                        //          .data
		.sink_startofpacket (hdd1_mgmt_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (hdd1_mgmt_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (pll_0_outclk0_clk),                              //       clk.clk
		.reset              (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                           //       src.ready
		.src_valid          (router_013_src_valid),                           //          .valid
		.src_data           (router_013_src_data),                            //          .data
		.src_channel        (router_013_src_channel),                         //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                      //          .endofpacket
	);

	system_mm_interconnect_1_router_014 router_014 (
		.sink_ready         (floppy0_sd_slave_agent_rp_ready),                //      sink.ready
		.sink_valid         (floppy0_sd_slave_agent_rp_valid),                //          .valid
		.sink_data          (floppy0_sd_slave_agent_rp_data),                 //          .data
		.sink_startofpacket (floppy0_sd_slave_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (floppy0_sd_slave_agent_rp_endofpacket),          //          .endofpacket
		.clk                (pll_0_outclk0_clk),                              //       clk.clk
		.reset              (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                           //       src.ready
		.src_valid          (router_014_src_valid),                           //          .valid
		.src_data           (router_014_src_data),                            //          .data
		.src_channel        (router_014_src_channel),                         //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                      //          .endofpacket
	);

	system_mm_interconnect_1_router_007 router_015 (
		.sink_ready         (hdd0_sd_slave_agent_rp_ready),                   //      sink.ready
		.sink_valid         (hdd0_sd_slave_agent_rp_valid),                   //          .valid
		.sink_data          (hdd0_sd_slave_agent_rp_data),                    //          .data
		.sink_startofpacket (hdd0_sd_slave_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (hdd0_sd_slave_agent_rp_endofpacket),             //          .endofpacket
		.clk                (pll_0_outclk0_clk),                              //       clk.clk
		.reset              (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                           //       src.ready
		.src_valid          (router_015_src_valid),                           //          .valid
		.src_data           (router_015_src_data),                            //          .data
		.src_channel        (router_015_src_channel),                         //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                      //          .endofpacket
	);

	system_mm_interconnect_1_router_007 router_016 (
		.sink_ready         (hdd1_sd_slave_agent_rp_ready),                   //      sink.ready
		.sink_valid         (hdd1_sd_slave_agent_rp_valid),                   //          .valid
		.sink_data          (hdd1_sd_slave_agent_rp_data),                    //          .data
		.sink_startofpacket (hdd1_sd_slave_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (hdd1_sd_slave_agent_rp_endofpacket),             //          .endofpacket
		.clk                (pll_0_outclk0_clk),                              //       clk.clk
		.reset              (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                           //       src.ready
		.src_valid          (router_016_src_valid),                           //          .valid
		.src_data           (router_016_src_data),                            //          .data
		.src_channel        (router_016_src_channel),                         //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                      //          .endofpacket
	);

	system_mm_interconnect_1_router_017 router_017 (
		.sink_ready         (address_span_extender_windowed_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (address_span_extender_windowed_slave_agent_rp_valid),         //          .valid
		.sink_data          (address_span_extender_windowed_slave_agent_rp_data),          //          .data
		.sink_startofpacket (address_span_extender_windowed_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (address_span_extender_windowed_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (pll_0_outclk0_clk),                                           //       clk.clk
		.reset              (floppy0_reset_sink_reset_bridge_in_reset_reset),              // clk_reset.reset
		.src_ready          (router_017_src_ready),                                        //       src.ready
		.src_valid          (router_017_src_valid),                                        //          .valid
		.src_data           (router_017_src_data),                                         //          .data
		.src_channel        (router_017_src_channel),                                      //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                                   //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (102),
		.PKT_DEST_ID_L             (99),
		.PKT_SRC_ID_H              (98),
		.PKT_SRC_ID_L              (95),
		.PKT_BYTE_CNT_H            (84),
		.PKT_BYTE_CNT_L            (74),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.MAX_OUTSTANDING_RESPONSES (8),
		.PIPELINED                 (0),
		.ST_DATA_W                 (116),
		.ST_CHANNEL_W              (12),
		.VALID_WIDTH               (12),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.SUPPORTS_POSTED_WRITES    (1),
		.SUPPORTS_NONPOSTED_WRITES (0),
		.REORDER                   (0)
	) mm_bridge_m0_limiter (
		.clk                    (pll_0_outclk0_clk),                              //       clk.clk
		.reset                  (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.cmd_sink_ready         (router_003_src_ready),                           //  cmd_sink.ready
		.cmd_sink_valid         (router_003_src_valid),                           //          .valid
		.cmd_sink_data          (router_003_src_data),                            //          .data
		.cmd_sink_channel       (router_003_src_channel),                         //          .channel
		.cmd_sink_startofpacket (router_003_src_startofpacket),                   //          .startofpacket
		.cmd_sink_endofpacket   (router_003_src_endofpacket),                     //          .endofpacket
		.cmd_src_ready          (mm_bridge_m0_limiter_cmd_src_ready),             //   cmd_src.ready
		.cmd_src_data           (mm_bridge_m0_limiter_cmd_src_data),              //          .data
		.cmd_src_channel        (mm_bridge_m0_limiter_cmd_src_channel),           //          .channel
		.cmd_src_startofpacket  (mm_bridge_m0_limiter_cmd_src_startofpacket),     //          .startofpacket
		.cmd_src_endofpacket    (mm_bridge_m0_limiter_cmd_src_endofpacket),       //          .endofpacket
		.rsp_sink_ready         (rsp_mux_003_src_ready),                          //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_003_src_valid),                          //          .valid
		.rsp_sink_channel       (rsp_mux_003_src_channel),                        //          .channel
		.rsp_sink_data          (rsp_mux_003_src_data),                           //          .data
		.rsp_sink_startofpacket (rsp_mux_003_src_startofpacket),                  //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_003_src_endofpacket),                    //          .endofpacket
		.rsp_src_ready          (mm_bridge_m0_limiter_rsp_src_ready),             //   rsp_src.ready
		.rsp_src_valid          (mm_bridge_m0_limiter_rsp_src_valid),             //          .valid
		.rsp_src_data           (mm_bridge_m0_limiter_rsp_src_data),              //          .data
		.rsp_src_channel        (mm_bridge_m0_limiter_rsp_src_channel),           //          .channel
		.rsp_src_startofpacket  (mm_bridge_m0_limiter_rsp_src_startofpacket),     //          .startofpacket
		.rsp_src_endofpacket    (mm_bridge_m0_limiter_rsp_src_endofpacket),       //          .endofpacket
		.cmd_src_valid          (mm_bridge_m0_limiter_cmd_valid_data)             // cmd_valid.data
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (66),
		.PKT_BYTE_CNT_H            (57),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (61),
		.PKT_BURST_SIZE_L          (59),
		.PKT_BURST_TYPE_H          (63),
		.PKT_BURST_TYPE_L          (62),
		.PKT_BURSTWRAP_H           (58),
		.PKT_BURSTWRAP_L           (58),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (89),
		.ST_CHANNEL_W              (12),
		.OUT_BYTE_CNT_H            (47),
		.OUT_BURSTWRAP_H           (58),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (1),
		.BURSTWRAP_CONST_VALUE     (1),
		.ADAPTER_VERSION           ("13.1")
	) floppy0_sd_slave_burst_adapter (
		.clk                   (pll_0_outclk0_clk),                                    //       cr0.clk
		.reset                 (floppy0_reset_sink_reset_bridge_in_reset_reset),       // cr0_reset.reset
		.sink0_valid           (cmd_mux_008_src_valid),                                //     sink0.valid
		.sink0_data            (cmd_mux_008_src_data),                                 //          .data
		.sink0_channel         (cmd_mux_008_src_channel),                              //          .channel
		.sink0_startofpacket   (cmd_mux_008_src_startofpacket),                        //          .startofpacket
		.sink0_endofpacket     (cmd_mux_008_src_endofpacket),                          //          .endofpacket
		.sink0_ready           (cmd_mux_008_src_ready),                                //          .ready
		.source0_valid         (floppy0_sd_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (floppy0_sd_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (floppy0_sd_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (floppy0_sd_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (floppy0_sd_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (floppy0_sd_slave_burst_adapter_source0_ready)          //          .ready
	);

	system_mm_interconnect_1_cmd_demux cmd_demux (
		.clk                (pll_0_outclk0_clk),                              //       clk.clk
		.reset              (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                               //      sink.ready
		.sink_channel       (router_src_channel),                             //          .channel
		.sink_data          (router_src_data),                                //          .data
		.sink_startofpacket (router_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                         //          .endofpacket
		.sink_valid         (router_src_valid),                               //          .valid
		.src0_ready         (cmd_demux_src0_ready),                           //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                           //          .valid
		.src0_data          (cmd_demux_src0_data),                            //          .data
		.src0_channel       (cmd_demux_src0_channel),                         //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                      //          .endofpacket
	);

	system_mm_interconnect_1_cmd_demux cmd_demux_001 (
		.clk                (pll_0_outclk0_clk),                              //       clk.clk
		.reset              (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                           //      sink.ready
		.sink_channel       (router_001_src_channel),                         //          .channel
		.sink_data          (router_001_src_data),                            //          .data
		.sink_startofpacket (router_001_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_001_src_valid),                           //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                       //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                       //          .valid
		.src0_data          (cmd_demux_001_src0_data),                        //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                     //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                  //          .endofpacket
	);

	system_mm_interconnect_1_cmd_demux cmd_demux_002 (
		.clk                (pll_0_outclk0_clk),                              //       clk.clk
		.reset              (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                           //      sink.ready
		.sink_channel       (router_002_src_channel),                         //          .channel
		.sink_data          (router_002_src_data),                            //          .data
		.sink_startofpacket (router_002_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_002_src_valid),                           //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                       //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                       //          .valid
		.src0_data          (cmd_demux_002_src0_data),                        //          .data
		.src0_channel       (cmd_demux_002_src0_channel),                     //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket)                  //          .endofpacket
	);

	system_mm_interconnect_1_cmd_demux_003 cmd_demux_003 (
		.clk                 (pll_0_outclk0_clk),                              //        clk.clk
		.reset               (floppy0_reset_sink_reset_bridge_in_reset_reset), //  clk_reset.reset
		.sink_ready          (mm_bridge_m0_limiter_cmd_src_ready),             //       sink.ready
		.sink_channel        (mm_bridge_m0_limiter_cmd_src_channel),           //           .channel
		.sink_data           (mm_bridge_m0_limiter_cmd_src_data),              //           .data
		.sink_startofpacket  (mm_bridge_m0_limiter_cmd_src_startofpacket),     //           .startofpacket
		.sink_endofpacket    (mm_bridge_m0_limiter_cmd_src_endofpacket),       //           .endofpacket
		.sink_valid          (mm_bridge_m0_limiter_cmd_valid_data),            // sink_valid.data
		.src0_ready          (cmd_demux_003_src0_ready),                       //       src0.ready
		.src0_valid          (cmd_demux_003_src0_valid),                       //           .valid
		.src0_data           (cmd_demux_003_src0_data),                        //           .data
		.src0_channel        (cmd_demux_003_src0_channel),                     //           .channel
		.src0_startofpacket  (cmd_demux_003_src0_startofpacket),               //           .startofpacket
		.src0_endofpacket    (cmd_demux_003_src0_endofpacket),                 //           .endofpacket
		.src1_ready          (cmd_demux_003_src1_ready),                       //       src1.ready
		.src1_valid          (cmd_demux_003_src1_valid),                       //           .valid
		.src1_data           (cmd_demux_003_src1_data),                        //           .data
		.src1_channel        (cmd_demux_003_src1_channel),                     //           .channel
		.src1_startofpacket  (cmd_demux_003_src1_startofpacket),               //           .startofpacket
		.src1_endofpacket    (cmd_demux_003_src1_endofpacket),                 //           .endofpacket
		.src2_ready          (cmd_demux_003_src2_ready),                       //       src2.ready
		.src2_valid          (cmd_demux_003_src2_valid),                       //           .valid
		.src2_data           (cmd_demux_003_src2_data),                        //           .data
		.src2_channel        (cmd_demux_003_src2_channel),                     //           .channel
		.src2_startofpacket  (cmd_demux_003_src2_startofpacket),               //           .startofpacket
		.src2_endofpacket    (cmd_demux_003_src2_endofpacket),                 //           .endofpacket
		.src3_ready          (cmd_demux_003_src3_ready),                       //       src3.ready
		.src3_valid          (cmd_demux_003_src3_valid),                       //           .valid
		.src3_data           (cmd_demux_003_src3_data),                        //           .data
		.src3_channel        (cmd_demux_003_src3_channel),                     //           .channel
		.src3_startofpacket  (cmd_demux_003_src3_startofpacket),               //           .startofpacket
		.src3_endofpacket    (cmd_demux_003_src3_endofpacket),                 //           .endofpacket
		.src4_ready          (cmd_demux_003_src4_ready),                       //       src4.ready
		.src4_valid          (cmd_demux_003_src4_valid),                       //           .valid
		.src4_data           (cmd_demux_003_src4_data),                        //           .data
		.src4_channel        (cmd_demux_003_src4_channel),                     //           .channel
		.src4_startofpacket  (cmd_demux_003_src4_startofpacket),               //           .startofpacket
		.src4_endofpacket    (cmd_demux_003_src4_endofpacket),                 //           .endofpacket
		.src5_ready          (cmd_demux_003_src5_ready),                       //       src5.ready
		.src5_valid          (cmd_demux_003_src5_valid),                       //           .valid
		.src5_data           (cmd_demux_003_src5_data),                        //           .data
		.src5_channel        (cmd_demux_003_src5_channel),                     //           .channel
		.src5_startofpacket  (cmd_demux_003_src5_startofpacket),               //           .startofpacket
		.src5_endofpacket    (cmd_demux_003_src5_endofpacket),                 //           .endofpacket
		.src6_ready          (cmd_demux_003_src6_ready),                       //       src6.ready
		.src6_valid          (cmd_demux_003_src6_valid),                       //           .valid
		.src6_data           (cmd_demux_003_src6_data),                        //           .data
		.src6_channel        (cmd_demux_003_src6_channel),                     //           .channel
		.src6_startofpacket  (cmd_demux_003_src6_startofpacket),               //           .startofpacket
		.src6_endofpacket    (cmd_demux_003_src6_endofpacket),                 //           .endofpacket
		.src7_ready          (cmd_demux_003_src7_ready),                       //       src7.ready
		.src7_valid          (cmd_demux_003_src7_valid),                       //           .valid
		.src7_data           (cmd_demux_003_src7_data),                        //           .data
		.src7_channel        (cmd_demux_003_src7_channel),                     //           .channel
		.src7_startofpacket  (cmd_demux_003_src7_startofpacket),               //           .startofpacket
		.src7_endofpacket    (cmd_demux_003_src7_endofpacket),                 //           .endofpacket
		.src8_ready          (cmd_demux_003_src8_ready),                       //       src8.ready
		.src8_valid          (cmd_demux_003_src8_valid),                       //           .valid
		.src8_data           (cmd_demux_003_src8_data),                        //           .data
		.src8_channel        (cmd_demux_003_src8_channel),                     //           .channel
		.src8_startofpacket  (cmd_demux_003_src8_startofpacket),               //           .startofpacket
		.src8_endofpacket    (cmd_demux_003_src8_endofpacket),                 //           .endofpacket
		.src9_ready          (cmd_demux_003_src9_ready),                       //       src9.ready
		.src9_valid          (cmd_demux_003_src9_valid),                       //           .valid
		.src9_data           (cmd_demux_003_src9_data),                        //           .data
		.src9_channel        (cmd_demux_003_src9_channel),                     //           .channel
		.src9_startofpacket  (cmd_demux_003_src9_startofpacket),               //           .startofpacket
		.src9_endofpacket    (cmd_demux_003_src9_endofpacket),                 //           .endofpacket
		.src10_ready         (cmd_demux_003_src10_ready),                      //      src10.ready
		.src10_valid         (cmd_demux_003_src10_valid),                      //           .valid
		.src10_data          (cmd_demux_003_src10_data),                       //           .data
		.src10_channel       (cmd_demux_003_src10_channel),                    //           .channel
		.src10_startofpacket (cmd_demux_003_src10_startofpacket),              //           .startofpacket
		.src10_endofpacket   (cmd_demux_003_src10_endofpacket),                //           .endofpacket
		.src11_ready         (cmd_demux_003_src11_ready),                      //      src11.ready
		.src11_valid         (cmd_demux_003_src11_valid),                      //           .valid
		.src11_data          (cmd_demux_003_src11_data),                       //           .data
		.src11_channel       (cmd_demux_003_src11_channel),                    //           .channel
		.src11_startofpacket (cmd_demux_003_src11_startofpacket),              //           .startofpacket
		.src11_endofpacket   (cmd_demux_003_src11_endofpacket)                 //           .endofpacket
	);

	system_mm_interconnect_1_cmd_demux_004 cmd_demux_004 (
		.clk                (pll_0_outclk0_clk),                              //       clk.clk
		.reset              (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                           //      sink.ready
		.sink_channel       (router_004_src_channel),                         //          .channel
		.sink_data          (router_004_src_data),                            //          .data
		.sink_startofpacket (router_004_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_004_src_valid),                           //          .valid
		.src0_ready         (cmd_demux_004_src0_ready),                       //      src0.ready
		.src0_valid         (cmd_demux_004_src0_valid),                       //          .valid
		.src0_data          (cmd_demux_004_src0_data),                        //          .data
		.src0_channel       (cmd_demux_004_src0_channel),                     //          .channel
		.src0_startofpacket (cmd_demux_004_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (cmd_demux_004_src0_endofpacket)                  //          .endofpacket
	);

	system_mm_interconnect_1_cmd_demux cmd_demux_005 (
		.clk                (pll_0_outclk0_clk),                              //       clk.clk
		.reset              (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                           //      sink.ready
		.sink_channel       (router_005_src_channel),                         //          .channel
		.sink_data          (router_005_src_data),                            //          .data
		.sink_startofpacket (router_005_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_005_src_valid),                           //          .valid
		.src0_ready         (cmd_demux_005_src0_ready),                       //      src0.ready
		.src0_valid         (cmd_demux_005_src0_valid),                       //          .valid
		.src0_data          (cmd_demux_005_src0_data),                        //          .data
		.src0_channel       (cmd_demux_005_src0_channel),                     //          .channel
		.src0_startofpacket (cmd_demux_005_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (cmd_demux_005_src0_endofpacket)                  //          .endofpacket
	);

	system_mm_interconnect_1_cmd_mux cmd_mux (
		.clk                 (pll_0_outclk0_clk),                              //       clk.clk
		.reset               (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                              //       src.ready
		.src_valid           (cmd_mux_src_valid),                              //          .valid
		.src_data            (cmd_mux_src_data),                               //          .data
		.src_channel         (cmd_mux_src_channel),                            //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                         //          .channel
		.sink0_data          (cmd_demux_src0_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                       //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                     //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                        //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket),                 //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                       //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                       //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                     //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                        //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket),                 //          .endofpacket
		.sink3_ready         (cmd_demux_003_src0_ready),                       //     sink3.ready
		.sink3_valid         (cmd_demux_003_src0_valid),                       //          .valid
		.sink3_channel       (cmd_demux_003_src0_channel),                     //          .channel
		.sink3_data          (cmd_demux_003_src0_data),                        //          .data
		.sink3_startofpacket (cmd_demux_003_src0_startofpacket),               //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src0_endofpacket)                  //          .endofpacket
	);

	system_mm_interconnect_1_cmd_mux_001 cmd_mux_001 (
		.clk                 (pll_0_outclk0_clk),                              //       clk.clk
		.reset               (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                          //          .valid
		.src_data            (cmd_mux_001_src_data),                           //          .data
		.src_channel         (cmd_mux_001_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_003_src1_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_003_src1_valid),                       //          .valid
		.sink0_channel       (cmd_demux_003_src1_channel),                     //          .channel
		.sink0_data          (cmd_demux_003_src1_data),                        //          .data
		.sink0_startofpacket (cmd_demux_003_src1_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_003_src1_endofpacket)                  //          .endofpacket
	);

	system_mm_interconnect_1_cmd_mux_001 cmd_mux_002 (
		.clk                 (pll_0_outclk0_clk),                              //       clk.clk
		.reset               (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                          //          .valid
		.src_data            (cmd_mux_002_src_data),                           //          .data
		.src_channel         (cmd_mux_002_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_003_src2_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_003_src2_valid),                       //          .valid
		.sink0_channel       (cmd_demux_003_src2_channel),                     //          .channel
		.sink0_data          (cmd_demux_003_src2_data),                        //          .data
		.sink0_startofpacket (cmd_demux_003_src2_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_003_src2_endofpacket)                  //          .endofpacket
	);

	system_mm_interconnect_1_cmd_mux_001 cmd_mux_003 (
		.clk                 (pll_0_outclk0_clk),                              //       clk.clk
		.reset               (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                          //          .valid
		.src_data            (cmd_mux_003_src_data),                           //          .data
		.src_channel         (cmd_mux_003_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_003_src3_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_003_src3_valid),                       //          .valid
		.sink0_channel       (cmd_demux_003_src3_channel),                     //          .channel
		.sink0_data          (cmd_demux_003_src3_data),                        //          .data
		.sink0_startofpacket (cmd_demux_003_src3_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_003_src3_endofpacket)                  //          .endofpacket
	);

	system_mm_interconnect_1_cmd_mux_001 cmd_mux_004 (
		.clk                 (pll_0_outclk0_clk),                              //       clk.clk
		.reset               (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                          //          .valid
		.src_data            (cmd_mux_004_src_data),                           //          .data
		.src_channel         (cmd_mux_004_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_003_src4_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_003_src4_valid),                       //          .valid
		.sink0_channel       (cmd_demux_003_src4_channel),                     //          .channel
		.sink0_data          (cmd_demux_003_src4_data),                        //          .data
		.sink0_startofpacket (cmd_demux_003_src4_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_003_src4_endofpacket)                  //          .endofpacket
	);

	system_mm_interconnect_1_cmd_mux_001 cmd_mux_005 (
		.clk                 (pll_0_outclk0_clk),                              //       clk.clk
		.reset               (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                          //          .valid
		.src_data            (cmd_mux_005_src_data),                           //          .data
		.src_channel         (cmd_mux_005_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_003_src5_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_003_src5_valid),                       //          .valid
		.sink0_channel       (cmd_demux_003_src5_channel),                     //          .channel
		.sink0_data          (cmd_demux_003_src5_data),                        //          .data
		.sink0_startofpacket (cmd_demux_003_src5_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_003_src5_endofpacket)                  //          .endofpacket
	);

	system_mm_interconnect_1_cmd_mux_001 cmd_mux_006 (
		.clk                 (pll_0_outclk0_clk),                              //       clk.clk
		.reset               (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                          //          .valid
		.src_data            (cmd_mux_006_src_data),                           //          .data
		.src_channel         (cmd_mux_006_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_003_src6_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_003_src6_valid),                       //          .valid
		.sink0_channel       (cmd_demux_003_src6_channel),                     //          .channel
		.sink0_data          (cmd_demux_003_src6_data),                        //          .data
		.sink0_startofpacket (cmd_demux_003_src6_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_003_src6_endofpacket)                  //          .endofpacket
	);

	system_mm_interconnect_1_cmd_mux_001 cmd_mux_007 (
		.clk                 (pll_0_outclk0_clk),                              //       clk.clk
		.reset               (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                          //          .valid
		.src_data            (cmd_mux_007_src_data),                           //          .data
		.src_channel         (cmd_mux_007_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_003_src7_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_003_src7_valid),                       //          .valid
		.sink0_channel       (cmd_demux_003_src7_channel),                     //          .channel
		.sink0_data          (cmd_demux_003_src7_data),                        //          .data
		.sink0_startofpacket (cmd_demux_003_src7_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_003_src7_endofpacket)                  //          .endofpacket
	);

	system_mm_interconnect_1_cmd_mux_008 cmd_mux_008 (
		.clk                 (pll_0_outclk0_clk),                                                    //       clk.clk
		.reset               (floppy0_reset_sink_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                                                //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                                                //          .valid
		.src_data            (cmd_mux_008_src_data),                                                 //          .data
		.src_channel         (cmd_mux_008_src_channel),                                              //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                                        //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                                          //          .endofpacket
		.sink0_ready         (mm_bridge_m0_to_floppy0_sd_slave_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (mm_bridge_m0_to_floppy0_sd_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (mm_bridge_m0_to_floppy0_sd_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (mm_bridge_m0_to_floppy0_sd_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (mm_bridge_m0_to_floppy0_sd_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (mm_bridge_m0_to_floppy0_sd_slave_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	system_mm_interconnect_1_cmd_mux_001 cmd_mux_009 (
		.clk                 (pll_0_outclk0_clk),                              //       clk.clk
		.reset               (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                          //          .valid
		.src_data            (cmd_mux_009_src_data),                           //          .data
		.src_channel         (cmd_mux_009_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_003_src9_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_003_src9_valid),                       //          .valid
		.sink0_channel       (cmd_demux_003_src9_channel),                     //          .channel
		.sink0_data          (cmd_demux_003_src9_data),                        //          .data
		.sink0_startofpacket (cmd_demux_003_src9_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_003_src9_endofpacket)                  //          .endofpacket
	);

	system_mm_interconnect_1_cmd_mux_001 cmd_mux_010 (
		.clk                 (pll_0_outclk0_clk),                              //       clk.clk
		.reset               (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                          //          .valid
		.src_data            (cmd_mux_010_src_data),                           //          .data
		.src_channel         (cmd_mux_010_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_003_src10_ready),                      //     sink0.ready
		.sink0_valid         (cmd_demux_003_src10_valid),                      //          .valid
		.sink0_channel       (cmd_demux_003_src10_channel),                    //          .channel
		.sink0_data          (cmd_demux_003_src10_data),                       //          .data
		.sink0_startofpacket (cmd_demux_003_src10_startofpacket),              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_003_src10_endofpacket)                 //          .endofpacket
	);

	system_mm_interconnect_1_cmd_mux_011 cmd_mux_011 (
		.clk                 (pll_0_outclk0_clk),                                                                                      //       clk.clk
		.reset               (floppy0_reset_sink_reset_bridge_in_reset_reset),                                                         // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                                                                                  //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                                                                                  //          .valid
		.src_data            (cmd_mux_011_src_data),                                                                                   //          .data
		.src_channel         (cmd_mux_011_src_channel),                                                                                //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                                                                          //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                                                                            //          .endofpacket
		.sink0_ready         (mm_bridge_m0_to_address_span_extender_windowed_slave_cmd_width_adapter_src_ready),                       //     sink0.ready
		.sink0_valid         (mm_bridge_m0_to_address_span_extender_windowed_slave_cmd_width_adapter_src_valid),                       //          .valid
		.sink0_channel       (mm_bridge_m0_to_address_span_extender_windowed_slave_cmd_width_adapter_src_channel),                     //          .channel
		.sink0_data          (mm_bridge_m0_to_address_span_extender_windowed_slave_cmd_width_adapter_src_data),                        //          .data
		.sink0_startofpacket (mm_bridge_m0_to_address_span_extender_windowed_slave_cmd_width_adapter_src_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (mm_bridge_m0_to_address_span_extender_windowed_slave_cmd_width_adapter_src_endofpacket),                 //          .endofpacket
		.sink1_ready         (pc_dma_avalon_master_to_address_span_extender_windowed_slave_cmd_width_adapter_src_ready),               //     sink1.ready
		.sink1_valid         (pc_dma_avalon_master_to_address_span_extender_windowed_slave_cmd_width_adapter_src_valid),               //          .valid
		.sink1_channel       (pc_dma_avalon_master_to_address_span_extender_windowed_slave_cmd_width_adapter_src_channel),             //          .channel
		.sink1_data          (pc_dma_avalon_master_to_address_span_extender_windowed_slave_cmd_width_adapter_src_data),                //          .data
		.sink1_startofpacket (pc_dma_avalon_master_to_address_span_extender_windowed_slave_cmd_width_adapter_src_startofpacket),       //          .startofpacket
		.sink1_endofpacket   (pc_dma_avalon_master_to_address_span_extender_windowed_slave_cmd_width_adapter_src_endofpacket),         //          .endofpacket
		.sink2_ready         (pc_bus_avalon_sdram_master_to_address_span_extender_windowed_slave_cmd_width_adapter_src_ready),         //     sink2.ready
		.sink2_valid         (pc_bus_avalon_sdram_master_to_address_span_extender_windowed_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink2_channel       (pc_bus_avalon_sdram_master_to_address_span_extender_windowed_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink2_data          (pc_bus_avalon_sdram_master_to_address_span_extender_windowed_slave_cmd_width_adapter_src_data),          //          .data
		.sink2_startofpacket (pc_bus_avalon_sdram_master_to_address_span_extender_windowed_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink2_endofpacket   (pc_bus_avalon_sdram_master_to_address_span_extender_windowed_slave_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	system_mm_interconnect_1_rsp_demux rsp_demux (
		.clk                (pll_0_outclk0_clk),                              //       clk.clk
		.reset              (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                           //      sink.ready
		.sink_channel       (router_006_src_channel),                         //          .channel
		.sink_data          (router_006_src_data),                            //          .data
		.sink_startofpacket (router_006_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_006_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_src0_data),                            //          .data
		.src0_channel       (rsp_demux_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                     //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                           //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                           //          .valid
		.src1_data          (rsp_demux_src1_data),                            //          .data
		.src1_channel       (rsp_demux_src1_channel),                         //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),                     //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                           //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                           //          .valid
		.src2_data          (rsp_demux_src2_data),                            //          .data
		.src2_channel       (rsp_demux_src2_channel),                         //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),                   //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket),                     //          .endofpacket
		.src3_ready         (rsp_demux_src3_ready),                           //      src3.ready
		.src3_valid         (rsp_demux_src3_valid),                           //          .valid
		.src3_data          (rsp_demux_src3_data),                            //          .data
		.src3_channel       (rsp_demux_src3_channel),                         //          .channel
		.src3_startofpacket (rsp_demux_src3_startofpacket),                   //          .startofpacket
		.src3_endofpacket   (rsp_demux_src3_endofpacket)                      //          .endofpacket
	);

	system_mm_interconnect_1_cmd_demux rsp_demux_001 (
		.clk                (pll_0_outclk0_clk),                              //       clk.clk
		.reset              (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                           //      sink.ready
		.sink_channel       (router_007_src_channel),                         //          .channel
		.sink_data          (router_007_src_data),                            //          .data
		.sink_startofpacket (router_007_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_007_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_001_src0_data),                        //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                  //          .endofpacket
	);

	system_mm_interconnect_1_cmd_demux rsp_demux_002 (
		.clk                (pll_0_outclk0_clk),                              //       clk.clk
		.reset              (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                           //      sink.ready
		.sink_channel       (router_008_src_channel),                         //          .channel
		.sink_data          (router_008_src_data),                            //          .data
		.sink_startofpacket (router_008_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_008_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_002_src0_data),                        //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                  //          .endofpacket
	);

	system_mm_interconnect_1_cmd_demux rsp_demux_003 (
		.clk                (pll_0_outclk0_clk),                              //       clk.clk
		.reset              (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                           //      sink.ready
		.sink_channel       (router_009_src_channel),                         //          .channel
		.sink_data          (router_009_src_data),                            //          .data
		.sink_startofpacket (router_009_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_009_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_003_src0_data),                        //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                  //          .endofpacket
	);

	system_mm_interconnect_1_cmd_demux rsp_demux_004 (
		.clk                (pll_0_outclk0_clk),                              //       clk.clk
		.reset              (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                           //      sink.ready
		.sink_channel       (router_010_src_channel),                         //          .channel
		.sink_data          (router_010_src_data),                            //          .data
		.sink_startofpacket (router_010_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_010_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_004_src0_data),                        //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                  //          .endofpacket
	);

	system_mm_interconnect_1_cmd_demux rsp_demux_005 (
		.clk                (pll_0_outclk0_clk),                              //       clk.clk
		.reset              (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                           //      sink.ready
		.sink_channel       (router_011_src_channel),                         //          .channel
		.sink_data          (router_011_src_data),                            //          .data
		.sink_startofpacket (router_011_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_011_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_005_src0_data),                        //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                  //          .endofpacket
	);

	system_mm_interconnect_1_cmd_demux rsp_demux_006 (
		.clk                (pll_0_outclk0_clk),                              //       clk.clk
		.reset              (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                           //      sink.ready
		.sink_channel       (router_012_src_channel),                         //          .channel
		.sink_data          (router_012_src_data),                            //          .data
		.sink_startofpacket (router_012_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_012_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_006_src0_data),                        //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                  //          .endofpacket
	);

	system_mm_interconnect_1_cmd_demux rsp_demux_007 (
		.clk                (pll_0_outclk0_clk),                              //       clk.clk
		.reset              (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                           //      sink.ready
		.sink_channel       (router_013_src_channel),                         //          .channel
		.sink_data          (router_013_src_data),                            //          .data
		.sink_startofpacket (router_013_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_013_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_007_src0_data),                        //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                  //          .endofpacket
	);

	system_mm_interconnect_1_cmd_demux_004 rsp_demux_008 (
		.clk                (pll_0_outclk0_clk),                              //       clk.clk
		.reset              (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                           //      sink.ready
		.sink_channel       (router_014_src_channel),                         //          .channel
		.sink_data          (router_014_src_data),                            //          .data
		.sink_startofpacket (router_014_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_014_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_008_src0_data),                        //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                  //          .endofpacket
	);

	system_mm_interconnect_1_cmd_demux rsp_demux_009 (
		.clk                (pll_0_outclk0_clk),                              //       clk.clk
		.reset              (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                           //      sink.ready
		.sink_channel       (router_015_src_channel),                         //          .channel
		.sink_data          (router_015_src_data),                            //          .data
		.sink_startofpacket (router_015_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_015_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_009_src0_data),                        //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                  //          .endofpacket
	);

	system_mm_interconnect_1_cmd_demux rsp_demux_010 (
		.clk                (pll_0_outclk0_clk),                              //       clk.clk
		.reset              (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                           //      sink.ready
		.sink_channel       (router_016_src_channel),                         //          .channel
		.sink_data          (router_016_src_data),                            //          .data
		.sink_startofpacket (router_016_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_016_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_010_src0_data),                        //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)                  //          .endofpacket
	);

	system_mm_interconnect_1_rsp_demux_011 rsp_demux_011 (
		.clk                (pll_0_outclk0_clk),                              //       clk.clk
		.reset              (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                           //      sink.ready
		.sink_channel       (router_017_src_channel),                         //          .channel
		.sink_data          (router_017_src_data),                            //          .data
		.sink_startofpacket (router_017_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_017_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_011_src0_data),                        //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_011_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_011_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_011_src1_data),                        //          .data
		.src1_channel       (rsp_demux_011_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_011_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_011_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_demux_011_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_demux_011_src2_valid),                       //          .valid
		.src2_data          (rsp_demux_011_src2_data),                        //          .data
		.src2_channel       (rsp_demux_011_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_demux_011_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_demux_011_src2_endofpacket)                  //          .endofpacket
	);

	system_mm_interconnect_1_rsp_mux rsp_mux (
		.clk                 (pll_0_outclk0_clk),                              //       clk.clk
		.reset               (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                              //       src.ready
		.src_valid           (rsp_mux_src_valid),                              //          .valid
		.src_data            (rsp_mux_src_data),                               //          .data
		.src_channel         (rsp_mux_src_channel),                            //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                      //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                        //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                           //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                           //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                         //          .channel
		.sink0_data          (rsp_demux_src0_data),                            //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                      //          .endofpacket
	);

	system_mm_interconnect_1_rsp_mux rsp_mux_001 (
		.clk                 (pll_0_outclk0_clk),                              //       clk.clk
		.reset               (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                          //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                          //          .valid
		.src_data            (rsp_mux_001_src_data),                           //          .data
		.src_channel         (rsp_mux_001_src_channel),                        //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                           //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                           //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                         //          .channel
		.sink0_data          (rsp_demux_src1_data),                            //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket)                      //          .endofpacket
	);

	system_mm_interconnect_1_rsp_mux rsp_mux_002 (
		.clk                 (pll_0_outclk0_clk),                              //       clk.clk
		.reset               (floppy0_reset_sink_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                          //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                          //          .valid
		.src_data            (rsp_mux_002_src_data),                           //          .data
		.src_channel         (rsp_mux_002_src_channel),                        //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (rsp_demux_src2_ready),                           //     sink0.ready
		.sink0_valid         (rsp_demux_src2_valid),                           //          .valid
		.sink0_channel       (rsp_demux_src2_channel),                         //          .channel
		.sink0_data          (rsp_demux_src2_data),                            //          .data
		.sink0_startofpacket (rsp_demux_src2_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src2_endofpacket)                      //          .endofpacket
	);

	system_mm_interconnect_1_rsp_mux_003 rsp_mux_003 (
		.clk                  (pll_0_outclk0_clk),                                                                        //       clk.clk
		.reset                (floppy0_reset_sink_reset_bridge_in_reset_reset),                                           // clk_reset.reset
		.src_ready            (rsp_mux_003_src_ready),                                                                    //       src.ready
		.src_valid            (rsp_mux_003_src_valid),                                                                    //          .valid
		.src_data             (rsp_mux_003_src_data),                                                                     //          .data
		.src_channel          (rsp_mux_003_src_channel),                                                                  //          .channel
		.src_startofpacket    (rsp_mux_003_src_startofpacket),                                                            //          .startofpacket
		.src_endofpacket      (rsp_mux_003_src_endofpacket),                                                              //          .endofpacket
		.sink0_ready          (rsp_demux_src3_ready),                                                                     //     sink0.ready
		.sink0_valid          (rsp_demux_src3_valid),                                                                     //          .valid
		.sink0_channel        (rsp_demux_src3_channel),                                                                   //          .channel
		.sink0_data           (rsp_demux_src3_data),                                                                      //          .data
		.sink0_startofpacket  (rsp_demux_src3_startofpacket),                                                             //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src3_endofpacket),                                                               //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                                                                 //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                                                                 //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                                                               //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                                                                  //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),                                                         //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),                                                           //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                                                                 //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                                                                 //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                                                               //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                                                                  //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),                                                         //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                                                           //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                                                                 //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                                                                 //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                                                               //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                                                                  //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),                                                         //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                                                           //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                                                                 //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                                                                 //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                                                               //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                                                                  //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),                                                         //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                                                           //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                                                                 //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                                                                 //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                                                               //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                                                                  //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),                                                         //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                                                           //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                                                                 //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                                                                 //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                                                               //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                                                                  //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),                                                         //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                                                           //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                                                                 //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                                                                 //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                                                               //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                                                                  //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),                                                         //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                                                           //          .endofpacket
		.sink8_ready          (floppy0_sd_slave_to_mm_bridge_m0_rsp_width_adapter_src_ready),                             //     sink8.ready
		.sink8_valid          (floppy0_sd_slave_to_mm_bridge_m0_rsp_width_adapter_src_valid),                             //          .valid
		.sink8_channel        (floppy0_sd_slave_to_mm_bridge_m0_rsp_width_adapter_src_channel),                           //          .channel
		.sink8_data           (floppy0_sd_slave_to_mm_bridge_m0_rsp_width_adapter_src_data),                              //          .data
		.sink8_startofpacket  (floppy0_sd_slave_to_mm_bridge_m0_rsp_width_adapter_src_startofpacket),                     //          .startofpacket
		.sink8_endofpacket    (floppy0_sd_slave_to_mm_bridge_m0_rsp_width_adapter_src_endofpacket),                       //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                                                                 //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                                                                 //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                                                               //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                                                                  //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),                                                         //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                                                           //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                                                                 //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                                                                 //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                                                               //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                                                                  //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),                                                         //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                                                           //          .endofpacket
		.sink11_ready         (address_span_extender_windowed_slave_to_mm_bridge_m0_rsp_width_adapter_src_ready),         //    sink11.ready
		.sink11_valid         (address_span_extender_windowed_slave_to_mm_bridge_m0_rsp_width_adapter_src_valid),         //          .valid
		.sink11_channel       (address_span_extender_windowed_slave_to_mm_bridge_m0_rsp_width_adapter_src_channel),       //          .channel
		.sink11_data          (address_span_extender_windowed_slave_to_mm_bridge_m0_rsp_width_adapter_src_data),          //          .data
		.sink11_startofpacket (address_span_extender_windowed_slave_to_mm_bridge_m0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink11_endofpacket   (address_span_extender_windowed_slave_to_mm_bridge_m0_rsp_width_adapter_src_endofpacket)    //          .endofpacket
	);

	system_mm_interconnect_1_rsp_mux_004 rsp_mux_004 (
		.clk                 (pll_0_outclk0_clk),                                                                                //       clk.clk
		.reset               (floppy0_reset_sink_reset_bridge_in_reset_reset),                                                   // clk_reset.reset
		.src_ready           (rsp_mux_004_src_ready),                                                                            //       src.ready
		.src_valid           (rsp_mux_004_src_valid),                                                                            //          .valid
		.src_data            (rsp_mux_004_src_data),                                                                             //          .data
		.src_channel         (rsp_mux_004_src_channel),                                                                          //          .channel
		.src_startofpacket   (rsp_mux_004_src_startofpacket),                                                                    //          .startofpacket
		.src_endofpacket     (rsp_mux_004_src_endofpacket),                                                                      //          .endofpacket
		.sink0_ready         (address_span_extender_windowed_slave_to_pc_dma_avalon_master_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (address_span_extender_windowed_slave_to_pc_dma_avalon_master_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (address_span_extender_windowed_slave_to_pc_dma_avalon_master_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (address_span_extender_windowed_slave_to_pc_dma_avalon_master_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (address_span_extender_windowed_slave_to_pc_dma_avalon_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (address_span_extender_windowed_slave_to_pc_dma_avalon_master_rsp_width_adapter_src_endofpacket)    //          .endofpacket
	);

	system_mm_interconnect_1_rsp_mux rsp_mux_005 (
		.clk                 (pll_0_outclk0_clk),                                                                                      //       clk.clk
		.reset               (floppy0_reset_sink_reset_bridge_in_reset_reset),                                                         // clk_reset.reset
		.src_ready           (rsp_mux_005_src_ready),                                                                                  //       src.ready
		.src_valid           (rsp_mux_005_src_valid),                                                                                  //          .valid
		.src_data            (rsp_mux_005_src_data),                                                                                   //          .data
		.src_channel         (rsp_mux_005_src_channel),                                                                                //          .channel
		.src_startofpacket   (rsp_mux_005_src_startofpacket),                                                                          //          .startofpacket
		.src_endofpacket     (rsp_mux_005_src_endofpacket),                                                                            //          .endofpacket
		.sink0_ready         (address_span_extender_windowed_slave_to_pc_bus_avalon_sdram_master_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (address_span_extender_windowed_slave_to_pc_bus_avalon_sdram_master_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (address_span_extender_windowed_slave_to_pc_bus_avalon_sdram_master_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (address_span_extender_windowed_slave_to_pc_bus_avalon_sdram_master_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (address_span_extender_windowed_slave_to_pc_bus_avalon_sdram_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (address_span_extender_windowed_slave_to_pc_bus_avalon_sdram_master_rsp_width_adapter_src_endofpacket)    //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (84),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (85),
		.IN_PKT_BURSTWRAP_L            (85),
		.IN_PKT_BURST_SIZE_H           (88),
		.IN_PKT_BURST_SIZE_L           (86),
		.IN_PKT_RESPONSE_STATUS_H      (112),
		.IN_PKT_RESPONSE_STATUS_L      (111),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (90),
		.IN_PKT_BURST_TYPE_L           (89),
		.IN_PKT_ORI_BURST_SIZE_L       (113),
		.IN_PKT_ORI_BURST_SIZE_H       (115),
		.IN_ST_DATA_W                  (116),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (57),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (61),
		.OUT_PKT_BURST_SIZE_L          (59),
		.OUT_PKT_RESPONSE_STATUS_H     (85),
		.OUT_PKT_RESPONSE_STATUS_L     (84),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (63),
		.OUT_PKT_BURST_TYPE_L          (62),
		.OUT_PKT_ORI_BURST_SIZE_L      (86),
		.OUT_PKT_ORI_BURST_SIZE_H      (88),
		.OUT_ST_DATA_W                 (89),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) mm_bridge_m0_to_floppy0_sd_slave_cmd_width_adapter (
		.clk                  (pll_0_outclk0_clk),                                                    //       clk.clk
		.reset                (floppy0_reset_sink_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_valid             (cmd_demux_003_src8_valid),                                             //      sink.valid
		.in_channel           (cmd_demux_003_src8_channel),                                           //          .channel
		.in_startofpacket     (cmd_demux_003_src8_startofpacket),                                     //          .startofpacket
		.in_endofpacket       (cmd_demux_003_src8_endofpacket),                                       //          .endofpacket
		.in_ready             (cmd_demux_003_src8_ready),                                             //          .ready
		.in_data              (cmd_demux_003_src8_data),                                              //          .data
		.out_endofpacket      (mm_bridge_m0_to_floppy0_sd_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (mm_bridge_m0_to_floppy0_sd_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (mm_bridge_m0_to_floppy0_sd_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (mm_bridge_m0_to_floppy0_sd_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (mm_bridge_m0_to_floppy0_sd_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (mm_bridge_m0_to_floppy0_sd_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (84),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (85),
		.IN_PKT_BURSTWRAP_L            (85),
		.IN_PKT_BURST_SIZE_H           (88),
		.IN_PKT_BURST_SIZE_L           (86),
		.IN_PKT_RESPONSE_STATUS_H      (112),
		.IN_PKT_RESPONSE_STATUS_L      (111),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (90),
		.IN_PKT_BURST_TYPE_L           (89),
		.IN_PKT_ORI_BURST_SIZE_L       (113),
		.IN_PKT_ORI_BURST_SIZE_H       (115),
		.IN_ST_DATA_W                  (116),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (120),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (124),
		.OUT_PKT_BURST_SIZE_L          (122),
		.OUT_PKT_RESPONSE_STATUS_H     (148),
		.OUT_PKT_RESPONSE_STATUS_L     (147),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (126),
		.OUT_PKT_BURST_TYPE_L          (125),
		.OUT_PKT_ORI_BURST_SIZE_L      (149),
		.OUT_PKT_ORI_BURST_SIZE_H      (151),
		.OUT_ST_DATA_W                 (152),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) mm_bridge_m0_to_address_span_extender_windowed_slave_cmd_width_adapter (
		.clk                  (pll_0_outclk0_clk),                                                                        //       clk.clk
		.reset                (floppy0_reset_sink_reset_bridge_in_reset_reset),                                           // clk_reset.reset
		.in_valid             (cmd_demux_003_src11_valid),                                                                //      sink.valid
		.in_channel           (cmd_demux_003_src11_channel),                                                              //          .channel
		.in_startofpacket     (cmd_demux_003_src11_startofpacket),                                                        //          .startofpacket
		.in_endofpacket       (cmd_demux_003_src11_endofpacket),                                                          //          .endofpacket
		.in_ready             (cmd_demux_003_src11_ready),                                                                //          .ready
		.in_data              (cmd_demux_003_src11_data),                                                                 //          .data
		.out_endofpacket      (mm_bridge_m0_to_address_span_extender_windowed_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (mm_bridge_m0_to_address_span_extender_windowed_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (mm_bridge_m0_to_address_span_extender_windowed_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (mm_bridge_m0_to_address_span_extender_windowed_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (mm_bridge_m0_to_address_span_extender_windowed_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (mm_bridge_m0_to_address_span_extender_windowed_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (57),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (58),
		.IN_PKT_BURSTWRAP_L            (58),
		.IN_PKT_BURST_SIZE_H           (61),
		.IN_PKT_BURST_SIZE_L           (59),
		.IN_PKT_RESPONSE_STATUS_H      (85),
		.IN_PKT_RESPONSE_STATUS_L      (84),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (63),
		.IN_PKT_BURST_TYPE_L           (62),
		.IN_PKT_ORI_BURST_SIZE_L       (86),
		.IN_PKT_ORI_BURST_SIZE_H       (88),
		.IN_ST_DATA_W                  (89),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (120),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (124),
		.OUT_PKT_BURST_SIZE_L          (122),
		.OUT_PKT_RESPONSE_STATUS_H     (148),
		.OUT_PKT_RESPONSE_STATUS_L     (147),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (126),
		.OUT_PKT_BURST_TYPE_L          (125),
		.OUT_PKT_ORI_BURST_SIZE_L      (149),
		.OUT_PKT_ORI_BURST_SIZE_H      (151),
		.OUT_ST_DATA_W                 (152),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pc_dma_avalon_master_to_address_span_extender_windowed_slave_cmd_width_adapter (
		.clk                  (pll_0_outclk0_clk),                                                                                //       clk.clk
		.reset                (floppy0_reset_sink_reset_bridge_in_reset_reset),                                                   // clk_reset.reset
		.in_valid             (cmd_demux_004_src0_valid),                                                                         //      sink.valid
		.in_channel           (cmd_demux_004_src0_channel),                                                                       //          .channel
		.in_startofpacket     (cmd_demux_004_src0_startofpacket),                                                                 //          .startofpacket
		.in_endofpacket       (cmd_demux_004_src0_endofpacket),                                                                   //          .endofpacket
		.in_ready             (cmd_demux_004_src0_ready),                                                                         //          .ready
		.in_data              (cmd_demux_004_src0_data),                                                                          //          .data
		.out_endofpacket      (pc_dma_avalon_master_to_address_span_extender_windowed_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pc_dma_avalon_master_to_address_span_extender_windowed_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (pc_dma_avalon_master_to_address_span_extender_windowed_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (pc_dma_avalon_master_to_address_span_extender_windowed_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (pc_dma_avalon_master_to_address_span_extender_windowed_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pc_dma_avalon_master_to_address_span_extender_windowed_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (84),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (85),
		.IN_PKT_BURSTWRAP_L            (85),
		.IN_PKT_BURST_SIZE_H           (88),
		.IN_PKT_BURST_SIZE_L           (86),
		.IN_PKT_RESPONSE_STATUS_H      (112),
		.IN_PKT_RESPONSE_STATUS_L      (111),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (90),
		.IN_PKT_BURST_TYPE_L           (89),
		.IN_PKT_ORI_BURST_SIZE_L       (113),
		.IN_PKT_ORI_BURST_SIZE_H       (115),
		.IN_ST_DATA_W                  (116),
		.OUT_PKT_ADDR_H                (103),
		.OUT_PKT_ADDR_L                (72),
		.OUT_PKT_DATA_H                (63),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (71),
		.OUT_PKT_BYTEEN_L              (64),
		.OUT_PKT_BYTE_CNT_H            (120),
		.OUT_PKT_BYTE_CNT_L            (110),
		.OUT_PKT_TRANS_COMPRESSED_READ (104),
		.OUT_PKT_BURST_SIZE_H          (124),
		.OUT_PKT_BURST_SIZE_L          (122),
		.OUT_PKT_RESPONSE_STATUS_H     (148),
		.OUT_PKT_RESPONSE_STATUS_L     (147),
		.OUT_PKT_TRANS_EXCLUSIVE       (109),
		.OUT_PKT_BURST_TYPE_H          (126),
		.OUT_PKT_BURST_TYPE_L          (125),
		.OUT_PKT_ORI_BURST_SIZE_L      (149),
		.OUT_PKT_ORI_BURST_SIZE_H      (151),
		.OUT_ST_DATA_W                 (152),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) pc_bus_avalon_sdram_master_to_address_span_extender_windowed_slave_cmd_width_adapter (
		.clk                  (pll_0_outclk0_clk),                                                                                      //       clk.clk
		.reset                (floppy0_reset_sink_reset_bridge_in_reset_reset),                                                         // clk_reset.reset
		.in_valid             (cmd_demux_005_src0_valid),                                                                               //      sink.valid
		.in_channel           (cmd_demux_005_src0_channel),                                                                             //          .channel
		.in_startofpacket     (cmd_demux_005_src0_startofpacket),                                                                       //          .startofpacket
		.in_endofpacket       (cmd_demux_005_src0_endofpacket),                                                                         //          .endofpacket
		.in_ready             (cmd_demux_005_src0_ready),                                                                               //          .ready
		.in_data              (cmd_demux_005_src0_data),                                                                                //          .data
		.out_endofpacket      (pc_bus_avalon_sdram_master_to_address_span_extender_windowed_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (pc_bus_avalon_sdram_master_to_address_span_extender_windowed_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (pc_bus_avalon_sdram_master_to_address_span_extender_windowed_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (pc_bus_avalon_sdram_master_to_address_span_extender_windowed_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (pc_bus_avalon_sdram_master_to_address_span_extender_windowed_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (pc_bus_avalon_sdram_master_to_address_span_extender_windowed_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                                  // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (57),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (58),
		.IN_PKT_BURSTWRAP_L            (58),
		.IN_PKT_BURST_SIZE_H           (61),
		.IN_PKT_BURST_SIZE_L           (59),
		.IN_PKT_RESPONSE_STATUS_H      (85),
		.IN_PKT_RESPONSE_STATUS_L      (84),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (63),
		.IN_PKT_BURST_TYPE_L           (62),
		.IN_PKT_ORI_BURST_SIZE_L       (86),
		.IN_PKT_ORI_BURST_SIZE_H       (88),
		.IN_ST_DATA_W                  (89),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (84),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (88),
		.OUT_PKT_BURST_SIZE_L          (86),
		.OUT_PKT_RESPONSE_STATUS_H     (112),
		.OUT_PKT_RESPONSE_STATUS_L     (111),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (90),
		.OUT_PKT_BURST_TYPE_L          (89),
		.OUT_PKT_ORI_BURST_SIZE_L      (113),
		.OUT_PKT_ORI_BURST_SIZE_H      (115),
		.OUT_ST_DATA_W                 (116),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) floppy0_sd_slave_to_mm_bridge_m0_rsp_width_adapter (
		.clk                  (pll_0_outclk0_clk),                                                    //       clk.clk
		.reset                (floppy0_reset_sink_reset_bridge_in_reset_reset),                       // clk_reset.reset
		.in_valid             (rsp_demux_008_src0_valid),                                             //      sink.valid
		.in_channel           (rsp_demux_008_src0_channel),                                           //          .channel
		.in_startofpacket     (rsp_demux_008_src0_startofpacket),                                     //          .startofpacket
		.in_endofpacket       (rsp_demux_008_src0_endofpacket),                                       //          .endofpacket
		.in_ready             (rsp_demux_008_src0_ready),                                             //          .ready
		.in_data              (rsp_demux_008_src0_data),                                              //          .data
		.out_endofpacket      (floppy0_sd_slave_to_mm_bridge_m0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (floppy0_sd_slave_to_mm_bridge_m0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (floppy0_sd_slave_to_mm_bridge_m0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (floppy0_sd_slave_to_mm_bridge_m0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (floppy0_sd_slave_to_mm_bridge_m0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (floppy0_sd_slave_to_mm_bridge_m0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (120),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (121),
		.IN_PKT_BURSTWRAP_L            (121),
		.IN_PKT_BURST_SIZE_H           (124),
		.IN_PKT_BURST_SIZE_L           (122),
		.IN_PKT_RESPONSE_STATUS_H      (148),
		.IN_PKT_RESPONSE_STATUS_L      (147),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (126),
		.IN_PKT_BURST_TYPE_L           (125),
		.IN_PKT_ORI_BURST_SIZE_L       (149),
		.IN_PKT_ORI_BURST_SIZE_H       (151),
		.IN_ST_DATA_W                  (152),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (84),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (88),
		.OUT_PKT_BURST_SIZE_L          (86),
		.OUT_PKT_RESPONSE_STATUS_H     (112),
		.OUT_PKT_RESPONSE_STATUS_L     (111),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (90),
		.OUT_PKT_BURST_TYPE_L          (89),
		.OUT_PKT_ORI_BURST_SIZE_L      (113),
		.OUT_PKT_ORI_BURST_SIZE_H      (115),
		.OUT_ST_DATA_W                 (116),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) address_span_extender_windowed_slave_to_mm_bridge_m0_rsp_width_adapter (
		.clk                  (pll_0_outclk0_clk),                                                                        //       clk.clk
		.reset                (floppy0_reset_sink_reset_bridge_in_reset_reset),                                           // clk_reset.reset
		.in_valid             (rsp_demux_011_src0_valid),                                                                 //      sink.valid
		.in_channel           (rsp_demux_011_src0_channel),                                                               //          .channel
		.in_startofpacket     (rsp_demux_011_src0_startofpacket),                                                         //          .startofpacket
		.in_endofpacket       (rsp_demux_011_src0_endofpacket),                                                           //          .endofpacket
		.in_ready             (rsp_demux_011_src0_ready),                                                                 //          .ready
		.in_data              (rsp_demux_011_src0_data),                                                                  //          .data
		.out_endofpacket      (address_span_extender_windowed_slave_to_mm_bridge_m0_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (address_span_extender_windowed_slave_to_mm_bridge_m0_rsp_width_adapter_src_data),          //          .data
		.out_channel          (address_span_extender_windowed_slave_to_mm_bridge_m0_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (address_span_extender_windowed_slave_to_mm_bridge_m0_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (address_span_extender_windowed_slave_to_mm_bridge_m0_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (address_span_extender_windowed_slave_to_mm_bridge_m0_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (120),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (121),
		.IN_PKT_BURSTWRAP_L            (121),
		.IN_PKT_BURST_SIZE_H           (124),
		.IN_PKT_BURST_SIZE_L           (122),
		.IN_PKT_RESPONSE_STATUS_H      (148),
		.IN_PKT_RESPONSE_STATUS_L      (147),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (126),
		.IN_PKT_BURST_TYPE_L           (125),
		.IN_PKT_ORI_BURST_SIZE_L       (149),
		.IN_PKT_ORI_BURST_SIZE_H       (151),
		.IN_ST_DATA_W                  (152),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (57),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (61),
		.OUT_PKT_BURST_SIZE_L          (59),
		.OUT_PKT_RESPONSE_STATUS_H     (85),
		.OUT_PKT_RESPONSE_STATUS_L     (84),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (63),
		.OUT_PKT_BURST_TYPE_L          (62),
		.OUT_PKT_ORI_BURST_SIZE_L      (86),
		.OUT_PKT_ORI_BURST_SIZE_H      (88),
		.OUT_ST_DATA_W                 (89),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) address_span_extender_windowed_slave_to_pc_dma_avalon_master_rsp_width_adapter (
		.clk                  (pll_0_outclk0_clk),                                                                                //       clk.clk
		.reset                (floppy0_reset_sink_reset_bridge_in_reset_reset),                                                   // clk_reset.reset
		.in_valid             (rsp_demux_011_src1_valid),                                                                         //      sink.valid
		.in_channel           (rsp_demux_011_src1_channel),                                                                       //          .channel
		.in_startofpacket     (rsp_demux_011_src1_startofpacket),                                                                 //          .startofpacket
		.in_endofpacket       (rsp_demux_011_src1_endofpacket),                                                                   //          .endofpacket
		.in_ready             (rsp_demux_011_src1_ready),                                                                         //          .ready
		.in_data              (rsp_demux_011_src1_data),                                                                          //          .data
		.out_endofpacket      (address_span_extender_windowed_slave_to_pc_dma_avalon_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (address_span_extender_windowed_slave_to_pc_dma_avalon_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (address_span_extender_windowed_slave_to_pc_dma_avalon_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (address_span_extender_windowed_slave_to_pc_dma_avalon_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (address_span_extender_windowed_slave_to_pc_dma_avalon_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (address_span_extender_windowed_slave_to_pc_dma_avalon_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                            // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (103),
		.IN_PKT_ADDR_L                 (72),
		.IN_PKT_DATA_H                 (63),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (71),
		.IN_PKT_BYTEEN_L               (64),
		.IN_PKT_BYTE_CNT_H             (120),
		.IN_PKT_BYTE_CNT_L             (110),
		.IN_PKT_TRANS_COMPRESSED_READ  (104),
		.IN_PKT_TRANS_WRITE            (106),
		.IN_PKT_BURSTWRAP_H            (121),
		.IN_PKT_BURSTWRAP_L            (121),
		.IN_PKT_BURST_SIZE_H           (124),
		.IN_PKT_BURST_SIZE_L           (122),
		.IN_PKT_RESPONSE_STATUS_H      (148),
		.IN_PKT_RESPONSE_STATUS_L      (147),
		.IN_PKT_TRANS_EXCLUSIVE        (109),
		.IN_PKT_BURST_TYPE_H           (126),
		.IN_PKT_BURST_TYPE_L           (125),
		.IN_PKT_ORI_BURST_SIZE_L       (149),
		.IN_PKT_ORI_BURST_SIZE_H       (151),
		.IN_ST_DATA_W                  (152),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (84),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (88),
		.OUT_PKT_BURST_SIZE_L          (86),
		.OUT_PKT_RESPONSE_STATUS_H     (112),
		.OUT_PKT_RESPONSE_STATUS_L     (111),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (90),
		.OUT_PKT_BURST_TYPE_L          (89),
		.OUT_PKT_ORI_BURST_SIZE_L      (113),
		.OUT_PKT_ORI_BURST_SIZE_H      (115),
		.OUT_ST_DATA_W                 (116),
		.ST_CHANNEL_W                  (12),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) address_span_extender_windowed_slave_to_pc_bus_avalon_sdram_master_rsp_width_adapter (
		.clk                  (pll_0_outclk0_clk),                                                                                      //       clk.clk
		.reset                (floppy0_reset_sink_reset_bridge_in_reset_reset),                                                         // clk_reset.reset
		.in_valid             (rsp_demux_011_src2_valid),                                                                               //      sink.valid
		.in_channel           (rsp_demux_011_src2_channel),                                                                             //          .channel
		.in_startofpacket     (rsp_demux_011_src2_startofpacket),                                                                       //          .startofpacket
		.in_endofpacket       (rsp_demux_011_src2_endofpacket),                                                                         //          .endofpacket
		.in_ready             (rsp_demux_011_src2_ready),                                                                               //          .ready
		.in_data              (rsp_demux_011_src2_data),                                                                                //          .data
		.out_endofpacket      (address_span_extender_windowed_slave_to_pc_bus_avalon_sdram_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (address_span_extender_windowed_slave_to_pc_bus_avalon_sdram_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (address_span_extender_windowed_slave_to_pc_bus_avalon_sdram_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (address_span_extender_windowed_slave_to_pc_bus_avalon_sdram_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (address_span_extender_windowed_slave_to_pc_bus_avalon_sdram_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (address_span_extender_windowed_slave_to_pc_bus_avalon_sdram_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                                  // (terminated)
	);

	system_mm_interconnect_0_avalon_st_adapter_005 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (pll_0_outclk0_clk),                                   // in_clk_0.clk
		.in_rst_0_reset (floppy0_reset_sink_reset_bridge_in_reset_reset),      // in_rst_0.reset
		.in_0_data      (driver_sd_avalon_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (driver_sd_avalon_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (driver_sd_avalon_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                        //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_005 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                              // in_clk_0.clk
		.in_rst_0_reset (floppy0_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pc_bus_ctrl_agent_rdata_fifo_src_data),          //     in_0.data
		.in_0_valid     (pc_bus_ctrl_agent_rdata_fifo_src_valid),         //         .valid
		.in_0_ready     (pc_bus_ctrl_agent_rdata_fifo_src_ready),         //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)               //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_005 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                              // in_clk_0.clk
		.in_rst_0_reset (floppy0_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (floppy0_mgmt_agent_rdata_fifo_src_data),         //     in_0.data
		.in_0_valid     (floppy0_mgmt_agent_rdata_fifo_src_valid),        //         .valid
		.in_0_ready     (floppy0_mgmt_agent_rdata_fifo_src_ready),        //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)               //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_005 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                              // in_clk_0.clk
		.in_rst_0_reset (floppy0_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hdd0_mgmt_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (hdd0_mgmt_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (hdd0_mgmt_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)               //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_005 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                              // in_clk_0.clk
		.in_rst_0_reset (floppy0_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (rtc_mgmt_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (rtc_mgmt_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (rtc_mgmt_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)               //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_005 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                              // in_clk_0.clk
		.in_rst_0_reset (floppy0_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (sound_mgmt_agent_rdata_fifo_src_data),           //     in_0.data
		.in_0_valid     (sound_mgmt_agent_rdata_fifo_src_valid),          //         .valid
		.in_0_ready     (sound_mgmt_agent_rdata_fifo_src_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)               //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_005 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                              // in_clk_0.clk
		.in_rst_0_reset (floppy0_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pit_mgmt_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (pit_mgmt_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (pit_mgmt_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)               //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_005 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                              // in_clk_0.clk
		.in_rst_0_reset (floppy0_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hdd1_mgmt_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (hdd1_mgmt_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (hdd1_mgmt_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)               //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                              // in_clk_0.clk
		.in_rst_0_reset (floppy0_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (floppy0_sd_slave_agent_rdata_fifo_src_data),     //     in_0.data
		.in_0_valid     (floppy0_sd_slave_agent_rdata_fifo_src_valid),    //         .valid
		.in_0_ready     (floppy0_sd_slave_agent_rdata_fifo_src_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)               //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_005 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                              // in_clk_0.clk
		.in_rst_0_reset (floppy0_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hdd0_sd_slave_agent_rdata_fifo_src_data),        //     in_0.data
		.in_0_valid     (hdd0_sd_slave_agent_rdata_fifo_src_valid),       //         .valid
		.in_0_ready     (hdd0_sd_slave_agent_rdata_fifo_src_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)               //         .error
	);

	system_mm_interconnect_0_avalon_st_adapter_005 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                              // in_clk_0.clk
		.in_rst_0_reset (floppy0_reset_sink_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (hdd1_sd_slave_agent_rdata_fifo_src_data),        //     in_0.data
		.in_0_valid     (hdd1_sd_slave_agent_rdata_fifo_src_valid),       //         .valid
		.in_0_ready     (hdd1_sd_slave_agent_rdata_fifo_src_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)               //         .error
	);

	system_mm_interconnect_1_avalon_st_adapter_011 #(
		.inBitsPerSymbol (66),
		.inUsePackets    (0),
		.inDataWidth     (66),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (66),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (pll_0_outclk0_clk),                                               // in_clk_0.clk
		.in_rst_0_reset (floppy0_reset_sink_reset_bridge_in_reset_reset),                  // in_rst_0.reset
		.in_0_data      (address_span_extender_windowed_slave_agent_rdata_fifo_out_data),  //     in_0.data
		.in_0_valid     (address_span_extender_windowed_slave_agent_rdata_fifo_out_valid), //         .valid
		.in_0_ready     (address_span_extender_windowed_slave_agent_rdata_fifo_out_ready), //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                                //         .error
	);

endmodule
